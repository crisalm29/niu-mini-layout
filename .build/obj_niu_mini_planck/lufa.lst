   1               		.file	"lufa.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_leds,"ax",@progbits
  12               	keyboard_leds:
  13               	.LFB129:
  14               		.file 1 "tmk_core/protocol/lufa/lufa.c"
   1:tmk_core/protocol/lufa/lufa.c **** /*
   2:tmk_core/protocol/lufa/lufa.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/protocol/lufa/lufa.c ****  * This file is based on:
   4:tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:tmk_core/protocol/lufa/lufa.c ****  */
   7:tmk_core/protocol/lufa/lufa.c **** 
   8:tmk_core/protocol/lufa/lufa.c **** /*
   9:tmk_core/protocol/lufa/lufa.c ****              LUFA Library
  10:tmk_core/protocol/lufa/lufa.c ****      Copyright (C) Dean Camera, 2012.
  11:tmk_core/protocol/lufa/lufa.c **** 
  12:tmk_core/protocol/lufa/lufa.c ****   dean [at] fourwalledcubicle [dot] com
  13:tmk_core/protocol/lufa/lufa.c ****            www.lufa-lib.org
  14:tmk_core/protocol/lufa/lufa.c **** */
  15:tmk_core/protocol/lufa/lufa.c **** 
  16:tmk_core/protocol/lufa/lufa.c **** /*
  17:tmk_core/protocol/lufa/lufa.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:tmk_core/protocol/lufa/lufa.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:tmk_core/protocol/lufa/lufa.c **** 
  20:tmk_core/protocol/lufa/lufa.c ****   Permission to use, copy, modify, distribute, and sell this
  21:tmk_core/protocol/lufa/lufa.c ****   software and its documentation for any purpose is hereby granted
  22:tmk_core/protocol/lufa/lufa.c ****   without fee, provided that the above copyright notice appear in
  23:tmk_core/protocol/lufa/lufa.c ****   all copies and that both that the copyright notice and this
  24:tmk_core/protocol/lufa/lufa.c ****   permission notice and warranty disclaimer appear in supporting
  25:tmk_core/protocol/lufa/lufa.c ****   documentation, and that the name of the author not be used in
  26:tmk_core/protocol/lufa/lufa.c ****   advertising or publicity pertaining to distribution of the
  27:tmk_core/protocol/lufa/lufa.c ****   software without specific, written prior permission.
  28:tmk_core/protocol/lufa/lufa.c **** 
  29:tmk_core/protocol/lufa/lufa.c ****   The author disclaim all warranties with regard to this
  30:tmk_core/protocol/lufa/lufa.c ****   software, including all implied warranties of merchantability
  31:tmk_core/protocol/lufa/lufa.c ****   and fitness.  In no event shall the author be liable for any
  32:tmk_core/protocol/lufa/lufa.c ****   special, indirect or consequential damages or any damages
  33:tmk_core/protocol/lufa/lufa.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:tmk_core/protocol/lufa/lufa.c ****   in an action of contract, negligence or other tortious action,
  35:tmk_core/protocol/lufa/lufa.c ****   arising out of or in connection with the use or performance of
  36:tmk_core/protocol/lufa/lufa.c ****   this software.
  37:tmk_core/protocol/lufa/lufa.c **** */
  38:tmk_core/protocol/lufa/lufa.c **** 
  39:tmk_core/protocol/lufa/lufa.c **** #include "report.h"
  40:tmk_core/protocol/lufa/lufa.c **** #include "host.h"
  41:tmk_core/protocol/lufa/lufa.c **** #include "host_driver.h"
  42:tmk_core/protocol/lufa/lufa.c **** #include "keyboard.h"
  43:tmk_core/protocol/lufa/lufa.c **** #include "action.h"
  44:tmk_core/protocol/lufa/lufa.c **** #include "led.h"
  45:tmk_core/protocol/lufa/lufa.c **** #include "sendchar.h"
  46:tmk_core/protocol/lufa/lufa.c **** #include "debug.h"
  47:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
  48:tmk_core/protocol/lufa/lufa.c **** #include "sleep_led.h"
  49:tmk_core/protocol/lufa/lufa.c **** #endif
  50:tmk_core/protocol/lufa/lufa.c **** #include "suspend.h"
  51:tmk_core/protocol/lufa/lufa.c **** 
  52:tmk_core/protocol/lufa/lufa.c **** #include "usb_descriptor.h"
  53:tmk_core/protocol/lufa/lufa.c **** #include "lufa.h"
  54:tmk_core/protocol/lufa/lufa.c **** #include "quantum.h"
  55:tmk_core/protocol/lufa/lufa.c **** #include <util/atomic.h>
  56:tmk_core/protocol/lufa/lufa.c **** #include "outputselect.h"
  57:tmk_core/protocol/lufa/lufa.c **** 
  58:tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
  59:tmk_core/protocol/lufa/lufa.c ****   #include "keycode_config.h"
  60:tmk_core/protocol/lufa/lufa.c **** 
  61:tmk_core/protocol/lufa/lufa.c ****   extern keymap_config_t keymap_config;
  62:tmk_core/protocol/lufa/lufa.c **** #endif
  63:tmk_core/protocol/lufa/lufa.c **** 
  64:tmk_core/protocol/lufa/lufa.c **** 
  65:tmk_core/protocol/lufa/lufa.c **** #ifdef AUDIO_ENABLE
  66:tmk_core/protocol/lufa/lufa.c ****     #include <audio.h>
  67:tmk_core/protocol/lufa/lufa.c **** #endif
  68:tmk_core/protocol/lufa/lufa.c **** 
  69:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  70:tmk_core/protocol/lufa/lufa.c ****   #ifdef MODULE_ADAFRUIT_BLE
  71:tmk_core/protocol/lufa/lufa.c ****     #include "adafruit_ble.h"
  72:tmk_core/protocol/lufa/lufa.c ****   #else
  73:tmk_core/protocol/lufa/lufa.c ****     #include "bluetooth.h"
  74:tmk_core/protocol/lufa/lufa.c ****   #endif
  75:tmk_core/protocol/lufa/lufa.c **** #endif
  76:tmk_core/protocol/lufa/lufa.c **** 
  77:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
  78:tmk_core/protocol/lufa/lufa.c ****     #include "virtser.h"
  79:tmk_core/protocol/lufa/lufa.c **** #endif
  80:tmk_core/protocol/lufa/lufa.c **** 
  81:tmk_core/protocol/lufa/lufa.c **** #if (defined(RGB_MIDI) | defined(RGBLIGHT_ANIMATIONS)) & defined(RGBLIGHT_ENABLE)
  82:tmk_core/protocol/lufa/lufa.c ****     #include "rgblight.h"
  83:tmk_core/protocol/lufa/lufa.c **** #endif
  84:tmk_core/protocol/lufa/lufa.c **** 
  85:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  86:tmk_core/protocol/lufa/lufa.c ****   #include "qmk_midi.h"
  87:tmk_core/protocol/lufa/lufa.c **** #endif
  88:tmk_core/protocol/lufa/lufa.c **** 
  89:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
  90:tmk_core/protocol/lufa/lufa.c **** 	#include "raw_hid.h"
  91:tmk_core/protocol/lufa/lufa.c **** #endif
  92:tmk_core/protocol/lufa/lufa.c **** 
  93:tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_idle = 0;
  94:tmk_core/protocol/lufa/lufa.c **** /* 0: Boot Protocol, 1: Report Protocol(default) */
  95:tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_protocol = 1;
  96:tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_led_stats = 0;
  97:tmk_core/protocol/lufa/lufa.c **** 
  98:tmk_core/protocol/lufa/lufa.c **** static report_keyboard_t keyboard_report_sent;
  99:tmk_core/protocol/lufa/lufa.c **** 
 100:tmk_core/protocol/lufa/lufa.c **** /* Host driver */
 101:tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void);
 102:tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report);
 103:tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report);
 104:tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data);
 105:tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data);
 106:tmk_core/protocol/lufa/lufa.c **** host_driver_t lufa_driver = {
 107:tmk_core/protocol/lufa/lufa.c ****     keyboard_leds,
 108:tmk_core/protocol/lufa/lufa.c ****     send_keyboard,
 109:tmk_core/protocol/lufa/lufa.c ****     send_mouse,
 110:tmk_core/protocol/lufa/lufa.c ****     send_system,
 111:tmk_core/protocol/lufa/lufa.c ****     send_consumer,
 112:tmk_core/protocol/lufa/lufa.c **** };
 113:tmk_core/protocol/lufa/lufa.c **** 
 114:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 115:tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_CDC_Device_t cdc_device =
 116:tmk_core/protocol/lufa/lufa.c **** {
 117:tmk_core/protocol/lufa/lufa.c ****   .Config =
 118:tmk_core/protocol/lufa/lufa.c ****   {
 119:tmk_core/protocol/lufa/lufa.c ****     .ControlInterfaceNumber = CCI_INTERFACE,
 120:tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint         =
 121:tmk_core/protocol/lufa/lufa.c ****     {
 122:tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_IN_EPADDR,
 123:tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 124:tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 125:tmk_core/protocol/lufa/lufa.c ****     },
 126:tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint	    =
 127:tmk_core/protocol/lufa/lufa.c ****     {
 128:tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_OUT_EPADDR,
 129:tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 130:tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 131:tmk_core/protocol/lufa/lufa.c ****     },
 132:tmk_core/protocol/lufa/lufa.c ****     .NotificationEndpoint   =
 133:tmk_core/protocol/lufa/lufa.c ****     {
 134:tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_NOTIFICATION_EPADDR,
 135:tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_NOTIFICATION_EPSIZE,
 136:tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 137:tmk_core/protocol/lufa/lufa.c ****     },
 138:tmk_core/protocol/lufa/lufa.c ****   },
 139:tmk_core/protocol/lufa/lufa.c **** };
 140:tmk_core/protocol/lufa/lufa.c **** #endif
 141:tmk_core/protocol/lufa/lufa.c **** 
 142:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 143:tmk_core/protocol/lufa/lufa.c **** 
 144:tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Send
 145:tmk_core/protocol/lufa/lufa.c ****  *
 146:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 147:tmk_core/protocol/lufa/lufa.c ****  */
 148:tmk_core/protocol/lufa/lufa.c **** void raw_hid_send( uint8_t *data, uint8_t length )
 149:tmk_core/protocol/lufa/lufa.c **** {
 150:tmk_core/protocol/lufa/lufa.c **** 	// TODO: implement variable size packet
 151:tmk_core/protocol/lufa/lufa.c **** 	if ( length != RAW_EPSIZE )
 152:tmk_core/protocol/lufa/lufa.c **** 	{
 153:tmk_core/protocol/lufa/lufa.c **** 		return;
 154:tmk_core/protocol/lufa/lufa.c **** 	}
 155:tmk_core/protocol/lufa/lufa.c **** 
 156:tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 157:tmk_core/protocol/lufa/lufa.c **** 	{
 158:tmk_core/protocol/lufa/lufa.c **** 		return;
 159:tmk_core/protocol/lufa/lufa.c **** 	}
 160:tmk_core/protocol/lufa/lufa.c **** 
 161:tmk_core/protocol/lufa/lufa.c **** 	// TODO: decide if we allow calls to raw_hid_send() in the middle
 162:tmk_core/protocol/lufa/lufa.c **** 	// of other endpoint usage.
 163:tmk_core/protocol/lufa/lufa.c **** 	uint8_t ep = Endpoint_GetCurrentEndpoint();
 164:tmk_core/protocol/lufa/lufa.c **** 
 165:tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_IN_EPNUM);
 166:tmk_core/protocol/lufa/lufa.c **** 
 167:tmk_core/protocol/lufa/lufa.c **** 	// Check to see if the host is ready to accept another packet
 168:tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsINReady())
 169:tmk_core/protocol/lufa/lufa.c **** 	{
 170:tmk_core/protocol/lufa/lufa.c **** 		// Write data
 171:tmk_core/protocol/lufa/lufa.c **** 		Endpoint_Write_Stream_LE(data, RAW_EPSIZE, NULL);
 172:tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to send the last packet
 173:tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearIN();
 174:tmk_core/protocol/lufa/lufa.c **** 	}
 175:tmk_core/protocol/lufa/lufa.c **** 
 176:tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(ep);
 177:tmk_core/protocol/lufa/lufa.c **** }
 178:tmk_core/protocol/lufa/lufa.c **** 
 179:tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Receive
 180:tmk_core/protocol/lufa/lufa.c ****  *
 181:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 182:tmk_core/protocol/lufa/lufa.c ****  */
 183:tmk_core/protocol/lufa/lufa.c **** __attribute__ ((weak))
 184:tmk_core/protocol/lufa/lufa.c **** void raw_hid_receive( uint8_t *data, uint8_t length )
 185:tmk_core/protocol/lufa/lufa.c **** {
 186:tmk_core/protocol/lufa/lufa.c **** 	// Users should #include "raw_hid.h" in their own code
 187:tmk_core/protocol/lufa/lufa.c **** 	// and implement this function there. Leave this as weak linkage
 188:tmk_core/protocol/lufa/lufa.c **** 	// so users can opt to not handle data coming in.
 189:tmk_core/protocol/lufa/lufa.c **** }
 190:tmk_core/protocol/lufa/lufa.c **** 
 191:tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Task
 192:tmk_core/protocol/lufa/lufa.c ****  *
 193:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 194:tmk_core/protocol/lufa/lufa.c ****  */
 195:tmk_core/protocol/lufa/lufa.c **** static void raw_hid_task(void)
 196:tmk_core/protocol/lufa/lufa.c **** {
 197:tmk_core/protocol/lufa/lufa.c **** 	// Create a temporary buffer to hold the read in data from the host
 198:tmk_core/protocol/lufa/lufa.c **** 	uint8_t data[RAW_EPSIZE];
 199:tmk_core/protocol/lufa/lufa.c **** 	bool data_read = false;
 200:tmk_core/protocol/lufa/lufa.c **** 
 201:tmk_core/protocol/lufa/lufa.c **** 	// Device must be connected and configured for the task to run
 202:tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 203:tmk_core/protocol/lufa/lufa.c **** 	return;
 204:tmk_core/protocol/lufa/lufa.c **** 
 205:tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_OUT_EPNUM);
 206:tmk_core/protocol/lufa/lufa.c **** 
 207:tmk_core/protocol/lufa/lufa.c **** 	// Check to see if a packet has been sent from the host
 208:tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsOUTReceived())
 209:tmk_core/protocol/lufa/lufa.c **** 	{
 210:tmk_core/protocol/lufa/lufa.c **** 		// Check to see if the packet contains data
 211:tmk_core/protocol/lufa/lufa.c **** 		if (Endpoint_IsReadWriteAllowed())
 212:tmk_core/protocol/lufa/lufa.c **** 		{
 213:tmk_core/protocol/lufa/lufa.c **** 			/* Read data */
 214:tmk_core/protocol/lufa/lufa.c **** 			Endpoint_Read_Stream_LE(data, sizeof(data), NULL);
 215:tmk_core/protocol/lufa/lufa.c **** 			data_read = true;
 216:tmk_core/protocol/lufa/lufa.c **** 		}
 217:tmk_core/protocol/lufa/lufa.c **** 
 218:tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to receive the last packet
 219:tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearOUT();
 220:tmk_core/protocol/lufa/lufa.c **** 
 221:tmk_core/protocol/lufa/lufa.c **** 		if ( data_read )
 222:tmk_core/protocol/lufa/lufa.c **** 		{
 223:tmk_core/protocol/lufa/lufa.c **** 			raw_hid_receive( data, sizeof(data) );
 224:tmk_core/protocol/lufa/lufa.c **** 		}
 225:tmk_core/protocol/lufa/lufa.c **** 	}
 226:tmk_core/protocol/lufa/lufa.c **** }
 227:tmk_core/protocol/lufa/lufa.c **** #endif
 228:tmk_core/protocol/lufa/lufa.c **** 
 229:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 230:tmk_core/protocol/lufa/lufa.c ****  * Console
 231:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 232:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 233:tmk_core/protocol/lufa/lufa.c **** /** \brief Console Task
 234:tmk_core/protocol/lufa/lufa.c ****  *
 235:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 236:tmk_core/protocol/lufa/lufa.c ****  */
 237:tmk_core/protocol/lufa/lufa.c **** static void Console_Task(void)
 238:tmk_core/protocol/lufa/lufa.c **** {
 239:tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 240:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 241:tmk_core/protocol/lufa/lufa.c ****         return;
 242:tmk_core/protocol/lufa/lufa.c **** 
 243:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 244:tmk_core/protocol/lufa/lufa.c **** 
 245:tmk_core/protocol/lufa/lufa.c **** #if 0
 246:tmk_core/protocol/lufa/lufa.c ****     // TODO: impl receivechar()/recvchar()
 247:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_OUT_EPNUM);
 248:tmk_core/protocol/lufa/lufa.c **** 
 249:tmk_core/protocol/lufa/lufa.c ****     /* Check to see if a packet has been sent from the host */
 250:tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
 251:tmk_core/protocol/lufa/lufa.c ****     {
 252:tmk_core/protocol/lufa/lufa.c ****         /* Check to see if the packet contains data */
 253:tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed())
 254:tmk_core/protocol/lufa/lufa.c ****         {
 255:tmk_core/protocol/lufa/lufa.c ****             /* Create a temporary buffer to hold the read in report from the host */
 256:tmk_core/protocol/lufa/lufa.c ****             uint8_t ConsoleData[CONSOLE_EPSIZE];
 257:tmk_core/protocol/lufa/lufa.c **** 
 258:tmk_core/protocol/lufa/lufa.c ****             /* Read Console Report Data */
 259:tmk_core/protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(&ConsoleData, sizeof(ConsoleData), NULL);
 260:tmk_core/protocol/lufa/lufa.c **** 
 261:tmk_core/protocol/lufa/lufa.c ****             /* Process Console Report Data */
 262:tmk_core/protocol/lufa/lufa.c ****             //ProcessConsoleHIDReport(ConsoleData);
 263:tmk_core/protocol/lufa/lufa.c ****         }
 264:tmk_core/protocol/lufa/lufa.c **** 
 265:tmk_core/protocol/lufa/lufa.c ****         /* Finalize the stream transfer to send the last packet */
 266:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 267:tmk_core/protocol/lufa/lufa.c ****     }
 268:tmk_core/protocol/lufa/lufa.c **** #endif
 269:tmk_core/protocol/lufa/lufa.c **** 
 270:tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 271:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 272:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 273:tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 274:tmk_core/protocol/lufa/lufa.c ****         return;
 275:tmk_core/protocol/lufa/lufa.c ****     }
 276:tmk_core/protocol/lufa/lufa.c **** 
 277:tmk_core/protocol/lufa/lufa.c ****     // fill empty bank
 278:tmk_core/protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed())
 279:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 280:tmk_core/protocol/lufa/lufa.c **** 
 281:tmk_core/protocol/lufa/lufa.c ****     // flash senchar packet
 282:tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 283:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 284:tmk_core/protocol/lufa/lufa.c ****     }
 285:tmk_core/protocol/lufa/lufa.c **** 
 286:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 287:tmk_core/protocol/lufa/lufa.c **** }
 288:tmk_core/protocol/lufa/lufa.c **** #endif
 289:tmk_core/protocol/lufa/lufa.c **** 
 290:tmk_core/protocol/lufa/lufa.c **** 
 291:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 292:tmk_core/protocol/lufa/lufa.c ****  * USB Events
 293:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 294:tmk_core/protocol/lufa/lufa.c **** /*
 295:tmk_core/protocol/lufa/lufa.c ****  * Event Order of Plug in:
 296:tmk_core/protocol/lufa/lufa.c ****  * 0) EVENT_USB_Device_Connect
 297:tmk_core/protocol/lufa/lufa.c ****  * 1) EVENT_USB_Device_Suspend
 298:tmk_core/protocol/lufa/lufa.c ****  * 2) EVENT_USB_Device_Reset
 299:tmk_core/protocol/lufa/lufa.c ****  * 3) EVENT_USB_Device_Wake
 300:tmk_core/protocol/lufa/lufa.c **** */
 301:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 302:tmk_core/protocol/lufa/lufa.c ****  *
 303:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 304:tmk_core/protocol/lufa/lufa.c ****  */
 305:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Connect(void)
 306:tmk_core/protocol/lufa/lufa.c **** {
 307:tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 308:tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 309:tmk_core/protocol/lufa/lufa.c ****     if (!USB_IsInitialized) {
 310:tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 311:tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 312:tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 313:tmk_core/protocol/lufa/lufa.c ****     }
 314:tmk_core/protocol/lufa/lufa.c **** }
 315:tmk_core/protocol/lufa/lufa.c **** 
 316:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 317:tmk_core/protocol/lufa/lufa.c ****  *
 318:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 319:tmk_core/protocol/lufa/lufa.c ****  */
 320:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Disconnect(void)
 321:tmk_core/protocol/lufa/lufa.c **** {
 322:tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 323:tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 324:tmk_core/protocol/lufa/lufa.c ****     USB_IsInitialized = false;
 325:tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 326:tmk_core/protocol/lufa/lufa.c ****     if (USB_IsInitialized) {
 327:tmk_core/protocol/lufa/lufa.c ****         USB_Disable();  // Disable all interrupts
 328:tmk_core/protocol/lufa/lufa.c **** 	USB_Controller_Enable();
 329:tmk_core/protocol/lufa/lufa.c ****         USB_INT_Enable(USB_INT_VBUSTI);
 330:tmk_core/protocol/lufa/lufa.c ****     }
 331:tmk_core/protocol/lufa/lufa.c **** */
 332:tmk_core/protocol/lufa/lufa.c **** }
 333:tmk_core/protocol/lufa/lufa.c **** 
 334:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 335:tmk_core/protocol/lufa/lufa.c ****  *
 336:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 337:tmk_core/protocol/lufa/lufa.c ****  */
 338:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Reset(void)
 339:tmk_core/protocol/lufa/lufa.c **** {
 340:tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 341:tmk_core/protocol/lufa/lufa.c **** }
 342:tmk_core/protocol/lufa/lufa.c **** 
 343:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 344:tmk_core/protocol/lufa/lufa.c ****  *
 345:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 346:tmk_core/protocol/lufa/lufa.c ****  */
 347:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Suspend()
 348:tmk_core/protocol/lufa/lufa.c **** {
 349:tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 350:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 351:tmk_core/protocol/lufa/lufa.c ****     sleep_led_enable();
 352:tmk_core/protocol/lufa/lufa.c **** #endif
 353:tmk_core/protocol/lufa/lufa.c **** }
 354:tmk_core/protocol/lufa/lufa.c **** 
 355:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 356:tmk_core/protocol/lufa/lufa.c ****  *
 357:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 358:tmk_core/protocol/lufa/lufa.c ****  */
 359:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_WakeUp()
 360:tmk_core/protocol/lufa/lufa.c **** {
 361:tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 362:tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 363:tmk_core/protocol/lufa/lufa.c **** 
 364:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 365:tmk_core/protocol/lufa/lufa.c ****     sleep_led_disable();
 366:tmk_core/protocol/lufa/lufa.c ****     // NOTE: converters may not accept this
 367:tmk_core/protocol/lufa/lufa.c ****     led_set(host_keyboard_leds());
 368:tmk_core/protocol/lufa/lufa.c **** #endif
 369:tmk_core/protocol/lufa/lufa.c **** }
 370:tmk_core/protocol/lufa/lufa.c **** 
 371:tmk_core/protocol/lufa/lufa.c **** 
 372:tmk_core/protocol/lufa/lufa.c **** 
 373:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 374:tmk_core/protocol/lufa/lufa.c **** static bool console_flush = false;
 375:tmk_core/protocol/lufa/lufa.c **** #define CONSOLE_FLUSH_SET(b)   do { \
 376:tmk_core/protocol/lufa/lufa.c ****   ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {\
 377:tmk_core/protocol/lufa/lufa.c ****     console_flush = b; \
 378:tmk_core/protocol/lufa/lufa.c ****   } \
 379:tmk_core/protocol/lufa/lufa.c **** } while (0)
 380:tmk_core/protocol/lufa/lufa.c **** 
 381:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Start Of Frame
 382:tmk_core/protocol/lufa/lufa.c ****  *
 383:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 384:tmk_core/protocol/lufa/lufa.c ****  * called every 1ms
 385:tmk_core/protocol/lufa/lufa.c ****  */
 386:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_StartOfFrame(void)
 387:tmk_core/protocol/lufa/lufa.c **** {
 388:tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 389:tmk_core/protocol/lufa/lufa.c ****     if (++count % 50) return;
 390:tmk_core/protocol/lufa/lufa.c ****     count = 0;
 391:tmk_core/protocol/lufa/lufa.c **** 
 392:tmk_core/protocol/lufa/lufa.c ****     if (!console_flush) return;
 393:tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 394:tmk_core/protocol/lufa/lufa.c ****     console_flush = false;
 395:tmk_core/protocol/lufa/lufa.c **** }
 396:tmk_core/protocol/lufa/lufa.c **** 
 397:tmk_core/protocol/lufa/lufa.c **** #endif
 398:tmk_core/protocol/lufa/lufa.c **** 
 399:tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ConfigurationChanged event.
 400:tmk_core/protocol/lufa/lufa.c ****  *
 401:tmk_core/protocol/lufa/lufa.c ****  * This is fired when the host sets the current configuration of the USB device after enumeration.
 402:tmk_core/protocol/lufa/lufa.c ****  *
 403:tmk_core/protocol/lufa/lufa.c ****  * ATMega32u2 supports dual bank(ping-pong mode) only on endpoint 3 and 4,
 404:tmk_core/protocol/lufa/lufa.c ****  * it is safe to use single bank for all endpoints.
 405:tmk_core/protocol/lufa/lufa.c ****  */
 406:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 407:tmk_core/protocol/lufa/lufa.c **** {
 408:tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 409:tmk_core/protocol/lufa/lufa.c **** 
 410:tmk_core/protocol/lufa/lufa.c ****     /* Setup Keyboard HID Report Endpoints */
 411:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 412:tmk_core/protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 413:tmk_core/protocol/lufa/lufa.c **** 
 414:tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 415:tmk_core/protocol/lufa/lufa.c ****     /* Setup Mouse HID Report Endpoint */
 416:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 417:tmk_core/protocol/lufa/lufa.c ****                                      MOUSE_EPSIZE, ENDPOINT_BANK_SINGLE);
 418:tmk_core/protocol/lufa/lufa.c **** #endif
 419:tmk_core/protocol/lufa/lufa.c **** 
 420:tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 421:tmk_core/protocol/lufa/lufa.c ****     /* Setup Extra HID Report Endpoint */
 422:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(EXTRAKEY_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 423:tmk_core/protocol/lufa/lufa.c ****                                      EXTRAKEY_EPSIZE, ENDPOINT_BANK_SINGLE);
 424:tmk_core/protocol/lufa/lufa.c **** #endif
 425:tmk_core/protocol/lufa/lufa.c **** 
 426:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 427:tmk_core/protocol/lufa/lufa.c ****     /* Setup Raw HID Report Endpoints */
 428:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 429:tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 430:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 431:tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 432:tmk_core/protocol/lufa/lufa.c **** #endif
 433:tmk_core/protocol/lufa/lufa.c **** 
 434:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 435:tmk_core/protocol/lufa/lufa.c ****     /* Setup Console HID Report Endpoints */
 436:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 437:tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 438:tmk_core/protocol/lufa/lufa.c **** #if 0
 439:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 440:tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 441:tmk_core/protocol/lufa/lufa.c **** #endif
 442:tmk_core/protocol/lufa/lufa.c **** #endif
 443:tmk_core/protocol/lufa/lufa.c **** 
 444:tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 445:tmk_core/protocol/lufa/lufa.c ****     /* Setup NKRO HID Report Endpoints */
 446:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 447:tmk_core/protocol/lufa/lufa.c ****                                      NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
 448:tmk_core/protocol/lufa/lufa.c **** #endif
 449:tmk_core/protocol/lufa/lufa.c **** 
 450:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 451:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EP
 452:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_E
 453:tmk_core/protocol/lufa/lufa.c **** #endif
 454:tmk_core/protocol/lufa/lufa.c **** 
 455:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 456:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPADDR, EP_TYPE_INTERRUPT, CDC_NOT
 457:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_OUT_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_
 458:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_IN_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_B
 459:tmk_core/protocol/lufa/lufa.c **** #endif
 460:tmk_core/protocol/lufa/lufa.c **** }
 461:tmk_core/protocol/lufa/lufa.c **** 
 462:tmk_core/protocol/lufa/lufa.c **** /* FIXME: Expose this table in the docs somehow
 463:tmk_core/protocol/lufa/lufa.c **** Appendix G: HID Request Support Requirements
 464:tmk_core/protocol/lufa/lufa.c **** 
 465:tmk_core/protocol/lufa/lufa.c **** The following table enumerates the requests that need to be supported by various types of HID class
 466:tmk_core/protocol/lufa/lufa.c **** 
 467:tmk_core/protocol/lufa/lufa.c **** Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 468:tmk_core/protocol/lufa/lufa.c **** ------------------------------------------------------------------------------------------
 469:tmk_core/protocol/lufa/lufa.c **** Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 470:tmk_core/protocol/lufa/lufa.c **** Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 471:tmk_core/protocol/lufa/lufa.c **** Boot Keyboard   Required    Optional    Required    Required    Required    Required
 472:tmk_core/protocol/lufa/lufa.c **** Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 473:tmk_core/protocol/lufa/lufa.c **** Other Device    Required    Optional    Optional    Optional    Optional    Optional
 474:tmk_core/protocol/lufa/lufa.c **** */
 475:tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ControlRequest event.
 476:tmk_core/protocol/lufa/lufa.c ****  *
 477:tmk_core/protocol/lufa/lufa.c ****  *  This is fired before passing along unhandled control requests to the library for processing int
 478:tmk_core/protocol/lufa/lufa.c ****  */
 479:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ControlRequest(void)
 480:tmk_core/protocol/lufa/lufa.c **** {
 481:tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 482:tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 483:tmk_core/protocol/lufa/lufa.c **** 
 484:tmk_core/protocol/lufa/lufa.c ****     /* Handle HID Class specific requests */
 485:tmk_core/protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 486:tmk_core/protocol/lufa/lufa.c ****     {
 487:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 488:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 489:tmk_core/protocol/lufa/lufa.c ****             {
 490:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 491:tmk_core/protocol/lufa/lufa.c **** 
 492:tmk_core/protocol/lufa/lufa.c ****                 // Interface
 493:tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 494:tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 495:tmk_core/protocol/lufa/lufa.c ****                     // TODO: test/check
 496:tmk_core/protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 497:tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 498:tmk_core/protocol/lufa/lufa.c ****                     break;
 499:tmk_core/protocol/lufa/lufa.c ****                 }
 500:tmk_core/protocol/lufa/lufa.c **** 
 501:tmk_core/protocol/lufa/lufa.c ****                 /* Write the report data to the control endpoint */
 502:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 503:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 504:tmk_core/protocol/lufa/lufa.c ****             }
 505:tmk_core/protocol/lufa/lufa.c **** 
 506:tmk_core/protocol/lufa/lufa.c ****             break;
 507:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetReport:
 508:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 509:tmk_core/protocol/lufa/lufa.c ****             {
 510:tmk_core/protocol/lufa/lufa.c **** 
 511:tmk_core/protocol/lufa/lufa.c ****                 // Interface
 512:tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 513:tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 514:tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 515:tmk_core/protocol/lufa/lufa.c ****                 case NKRO_INTERFACE:
 516:tmk_core/protocol/lufa/lufa.c **** #endif
 517:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 518:tmk_core/protocol/lufa/lufa.c **** 
 519:tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 520:tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 521:tmk_core/protocol/lufa/lufa.c ****                           return;
 522:tmk_core/protocol/lufa/lufa.c ****                     }
 523:tmk_core/protocol/lufa/lufa.c ****                     keyboard_led_stats = Endpoint_Read_8();
 524:tmk_core/protocol/lufa/lufa.c **** 
 525:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearOUT();
 526:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 527:tmk_core/protocol/lufa/lufa.c ****                     break;
 528:tmk_core/protocol/lufa/lufa.c ****                 }
 529:tmk_core/protocol/lufa/lufa.c **** 
 530:tmk_core/protocol/lufa/lufa.c ****             }
 531:tmk_core/protocol/lufa/lufa.c **** 
 532:tmk_core/protocol/lufa/lufa.c ****             break;
 533:tmk_core/protocol/lufa/lufa.c **** 
 534:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetProtocol:
 535:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 536:tmk_core/protocol/lufa/lufa.c ****             {
 537:tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 538:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 539:tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 540:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 541:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 542:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 543:tmk_core/protocol/lufa/lufa.c ****                 }
 544:tmk_core/protocol/lufa/lufa.c ****             }
 545:tmk_core/protocol/lufa/lufa.c **** 
 546:tmk_core/protocol/lufa/lufa.c ****             break;
 547:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetProtocol:
 548:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 549:tmk_core/protocol/lufa/lufa.c ****             {
 550:tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 551:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 552:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 553:tmk_core/protocol/lufa/lufa.c **** 
 554:tmk_core/protocol/lufa/lufa.c ****                     keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
 555:tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 556:tmk_core/protocol/lufa/lufa.c ****                 }
 557:tmk_core/protocol/lufa/lufa.c ****             }
 558:tmk_core/protocol/lufa/lufa.c **** 
 559:tmk_core/protocol/lufa/lufa.c ****             break;
 560:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetIdle:
 561:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 562:tmk_core/protocol/lufa/lufa.c ****             {
 563:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 564:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 565:tmk_core/protocol/lufa/lufa.c **** 
 566:tmk_core/protocol/lufa/lufa.c ****                 keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 567:tmk_core/protocol/lufa/lufa.c ****             }
 568:tmk_core/protocol/lufa/lufa.c **** 
 569:tmk_core/protocol/lufa/lufa.c ****             break;
 570:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetIdle:
 571:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 572:tmk_core/protocol/lufa/lufa.c ****             {
 573:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 574:tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 575:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 576:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 577:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 578:tmk_core/protocol/lufa/lufa.c ****             }
 579:tmk_core/protocol/lufa/lufa.c **** 
 580:tmk_core/protocol/lufa/lufa.c ****             break;
 581:tmk_core/protocol/lufa/lufa.c ****     }
 582:tmk_core/protocol/lufa/lufa.c **** 
 583:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 584:tmk_core/protocol/lufa/lufa.c ****     CDC_Device_ProcessControlRequest(&cdc_device);
 585:tmk_core/protocol/lufa/lufa.c **** #endif
 586:tmk_core/protocol/lufa/lufa.c **** }
 587:tmk_core/protocol/lufa/lufa.c **** 
 588:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 589:tmk_core/protocol/lufa/lufa.c ****  * Host driver
 590:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 591:tmk_core/protocol/lufa/lufa.c **** /** \brief Keyboard LEDs
 592:tmk_core/protocol/lufa/lufa.c ****  *
 593:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 594:tmk_core/protocol/lufa/lufa.c ****  */
 595:tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void)
 596:tmk_core/protocol/lufa/lufa.c **** {
  15               		.loc 1 596 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 597:tmk_core/protocol/lufa/lufa.c ****     return keyboard_led_stats;
 598:tmk_core/protocol/lufa/lufa.c **** }
  21               		.loc 1 598 0
  22 0000 8091 0000 		lds r24,keyboard_led_stats
  23 0004 0895      		ret
  24               		.cfi_endproc
  25               	.LFE129:
  27               		.section	.text.send_mouse,"ax",@progbits
  29               	send_mouse:
  30               	.LFB131:
 599:tmk_core/protocol/lufa/lufa.c **** 
 600:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Keyboard
 601:tmk_core/protocol/lufa/lufa.c ****  *
 602:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 603:tmk_core/protocol/lufa/lufa.c ****  */
 604:tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report)
 605:tmk_core/protocol/lufa/lufa.c **** {
 606:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 607:tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 608:tmk_core/protocol/lufa/lufa.c **** 
 609:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 610:tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 611:tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 612:tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_keys(report->mods, report->keys, sizeof(report->keys));
 613:tmk_core/protocol/lufa/lufa.c ****     #elif MODULE_RN42
 614:tmk_core/protocol/lufa/lufa.c ****        bluefruit_serial_send(0xFD);
 615:tmk_core/protocol/lufa/lufa.c ****        bluefruit_serial_send(0x09);
 616:tmk_core/protocol/lufa/lufa.c ****        bluefruit_serial_send(0x01);
 617:tmk_core/protocol/lufa/lufa.c ****        for (uint8_t i = 0; i < KEYBOARD_EPSIZE; i++) {
 618:tmk_core/protocol/lufa/lufa.c ****          bluefruit_serial_send(report->raw[i]);
 619:tmk_core/protocol/lufa/lufa.c ****        }
 620:tmk_core/protocol/lufa/lufa.c ****     #else
 621:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 622:tmk_core/protocol/lufa/lufa.c ****       for (uint8_t i = 0; i < KEYBOARD_EPSIZE; i++) {
 623:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->raw[i]);
 624:tmk_core/protocol/lufa/lufa.c ****       }
 625:tmk_core/protocol/lufa/lufa.c ****     #endif
 626:tmk_core/protocol/lufa/lufa.c ****   }
 627:tmk_core/protocol/lufa/lufa.c **** #endif
 628:tmk_core/protocol/lufa/lufa.c **** 
 629:tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 630:tmk_core/protocol/lufa/lufa.c ****       return;
 631:tmk_core/protocol/lufa/lufa.c ****     }
 632:tmk_core/protocol/lufa/lufa.c **** 
 633:tmk_core/protocol/lufa/lufa.c ****     /* Select the Keyboard Report Endpoint */
 634:tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 635:tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keymap_config.nkro) {
 636:tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 637:tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(NKRO_IN_EPNUM);
 638:tmk_core/protocol/lufa/lufa.c **** 
 639:tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 1ms */
 640:tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
 641:tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 642:tmk_core/protocol/lufa/lufa.c **** 
 643:tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 644:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
 645:tmk_core/protocol/lufa/lufa.c ****     }
 646:tmk_core/protocol/lufa/lufa.c ****     else
 647:tmk_core/protocol/lufa/lufa.c **** #endif
 648:tmk_core/protocol/lufa/lufa.c ****     {
 649:tmk_core/protocol/lufa/lufa.c ****         /* Boot protocol */
 650:tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);
 651:tmk_core/protocol/lufa/lufa.c **** 
 652:tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 10ms */
 653:tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 654:tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 655:tmk_core/protocol/lufa/lufa.c **** 
 656:tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 657:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
 658:tmk_core/protocol/lufa/lufa.c ****     }
 659:tmk_core/protocol/lufa/lufa.c **** 
 660:tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 661:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 662:tmk_core/protocol/lufa/lufa.c **** 
 663:tmk_core/protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 664:tmk_core/protocol/lufa/lufa.c **** }
 665:tmk_core/protocol/lufa/lufa.c ****  
 666:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Mouse
 667:tmk_core/protocol/lufa/lufa.c ****  *
 668:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 669:tmk_core/protocol/lufa/lufa.c ****  */
 670:tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report)
 671:tmk_core/protocol/lufa/lufa.c **** {
  31               		.loc 1 671 0
  32               		.cfi_startproc
  33               	.LVL0:
  34               	/* prologue: function */
  35               	/* frame size = 0 */
  36               	/* stack size = 0 */
  37               	.L__stack_usage = 0
  38 0000 0895      		ret
  39               		.cfi_endproc
  40               	.LFE131:
  42               		.section	.text.sendchar,"ax",@progbits
  43               	.global	sendchar
  45               	sendchar:
  46               	.LFB134:
 672:tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 673:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 674:tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 675:tmk_core/protocol/lufa/lufa.c **** 
 676:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 677:tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 678:tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 679:tmk_core/protocol/lufa/lufa.c ****       // FIXME: mouse buttons
 680:tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_mouse_move(report->x, report->y, report->v, report->h, report->buttons);
 681:tmk_core/protocol/lufa/lufa.c ****     #else
 682:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 683:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 684:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x03);
 685:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->buttons);
 686:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->x);
 687:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->y);
 688:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->v); // should try sending the wheel v here
 689:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->h); // should try sending the wheel h here
 690:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 691:tmk_core/protocol/lufa/lufa.c ****     #endif
 692:tmk_core/protocol/lufa/lufa.c ****   }
 693:tmk_core/protocol/lufa/lufa.c **** #endif
 694:tmk_core/protocol/lufa/lufa.c **** 
 695:tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 696:tmk_core/protocol/lufa/lufa.c ****       return;
 697:tmk_core/protocol/lufa/lufa.c ****     }
 698:tmk_core/protocol/lufa/lufa.c **** 
 699:tmk_core/protocol/lufa/lufa.c ****     /* Select the Mouse Report Endpoint */
 700:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);
 701:tmk_core/protocol/lufa/lufa.c **** 
 702:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 703:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 704:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 705:tmk_core/protocol/lufa/lufa.c **** 
 706:tmk_core/protocol/lufa/lufa.c ****     /* Write Mouse Report Data */
 707:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 708:tmk_core/protocol/lufa/lufa.c **** 
 709:tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 710:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 711:tmk_core/protocol/lufa/lufa.c **** #endif
 712:tmk_core/protocol/lufa/lufa.c **** }
 713:tmk_core/protocol/lufa/lufa.c **** 
 714:tmk_core/protocol/lufa/lufa.c **** /** \brief Send System
 715:tmk_core/protocol/lufa/lufa.c ****  *
 716:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 717:tmk_core/protocol/lufa/lufa.c ****  */
 718:tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data)
 719:tmk_core/protocol/lufa/lufa.c **** {
 720:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 721:tmk_core/protocol/lufa/lufa.c **** 
 722:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 723:tmk_core/protocol/lufa/lufa.c ****         return;
 724:tmk_core/protocol/lufa/lufa.c **** 
 725:tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 726:tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 727:tmk_core/protocol/lufa/lufa.c ****         .usage = data - SYSTEM_POWER_DOWN + 1
 728:tmk_core/protocol/lufa/lufa.c ****     };
 729:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 730:tmk_core/protocol/lufa/lufa.c **** 
 731:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 732:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 733:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 734:tmk_core/protocol/lufa/lufa.c **** 
 735:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 736:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 737:tmk_core/protocol/lufa/lufa.c **** }
 738:tmk_core/protocol/lufa/lufa.c **** 
 739:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Consumer
 740:tmk_core/protocol/lufa/lufa.c ****  *
 741:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 742:tmk_core/protocol/lufa/lufa.c ****  */
 743:tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data)
 744:tmk_core/protocol/lufa/lufa.c **** {
 745:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 746:tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 747:tmk_core/protocol/lufa/lufa.c **** 
 748:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 749:tmk_core/protocol/lufa/lufa.c ****     if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 750:tmk_core/protocol/lufa/lufa.c ****       #ifdef MODULE_ADAFRUIT_BLE
 751:tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_send_consumer_key(data, 0);
 752:tmk_core/protocol/lufa/lufa.c ****       #elif MODULE_RN42
 753:tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 754:tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 755:tmk_core/protocol/lufa/lufa.c ****         last_data = data;
 756:tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2RN42(data);
 757:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 758:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 759:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 760:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap&0xFF);
 761:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap>>8)&0xFF);
 762:tmk_core/protocol/lufa/lufa.c ****       #else
 763:tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 764:tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 765:tmk_core/protocol/lufa/lufa.c ****         last_data = data;
 766:tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2BLUEFRUIT(data);
 767:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 768:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 769:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x02);
 770:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap>>8)&0xFF);
 771:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap&0xFF);
 772:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 773:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 774:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 775:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 776:tmk_core/protocol/lufa/lufa.c ****       #endif
 777:tmk_core/protocol/lufa/lufa.c ****     }
 778:tmk_core/protocol/lufa/lufa.c **** #endif
 779:tmk_core/protocol/lufa/lufa.c **** 
 780:tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 781:tmk_core/protocol/lufa/lufa.c ****       return;
 782:tmk_core/protocol/lufa/lufa.c ****     }
 783:tmk_core/protocol/lufa/lufa.c **** 
 784:tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 785:tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 786:tmk_core/protocol/lufa/lufa.c ****         .usage = data
 787:tmk_core/protocol/lufa/lufa.c ****     };
 788:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 789:tmk_core/protocol/lufa/lufa.c **** 
 790:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 791:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 792:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 793:tmk_core/protocol/lufa/lufa.c **** 
 794:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 795:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 796:tmk_core/protocol/lufa/lufa.c **** }
 797:tmk_core/protocol/lufa/lufa.c **** 
 798:tmk_core/protocol/lufa/lufa.c **** 
 799:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 800:tmk_core/protocol/lufa/lufa.c ****  * sendchar
 801:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 802:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 803:tmk_core/protocol/lufa/lufa.c **** #define SEND_TIMEOUT 5
 804:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Char
 805:tmk_core/protocol/lufa/lufa.c ****  *
 806:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 807:tmk_core/protocol/lufa/lufa.c ****  */
 808:tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 809:tmk_core/protocol/lufa/lufa.c **** {
  47               		.loc 1 809 0
  48               		.cfi_startproc
  49               	.LVL1:
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 0 */
  53               	.L__stack_usage = 0
  54               	.LBB156:
 810:tmk_core/protocol/lufa/lufa.c ****     // Not wait once timeouted.
 811:tmk_core/protocol/lufa/lufa.c ****     // Because sendchar() is called so many times, waiting each call causes big lag.
 812:tmk_core/protocol/lufa/lufa.c ****     static bool timeouted = false;
 813:tmk_core/protocol/lufa/lufa.c **** 
 814:tmk_core/protocol/lufa/lufa.c ****     // prevents Console_Task() from running during sendchar() runs.
 815:tmk_core/protocol/lufa/lufa.c ****     // or char will be lost. These two function is mutually exclusive.
 816:tmk_core/protocol/lufa/lufa.c ****     CONSOLE_FLUSH_SET(false);
  55               		.loc 1 816 0
  56 0000 9FB7      		in r25,__SREG__
  57               	.LVL2:
  58               	.LBB157:
  59               	.LBB158:
  60               		.file 2 "c:\\msys64\\home\\cris almanza\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\util\\atomic
   1:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****    All rights reserved.
   3:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
   4:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
   7:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****    * Redistributions of source code must retain the above copyright
   8:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  10:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****      the documentation and/or other materials provided with the
  13:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****      distribution.
  14:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  15:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****      contributors may be used to endorse or promote products derived
  17:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****      from this software without specific prior written permission.
  18:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  19:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** */
  31:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  32:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** /* $Id$ */
  33:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  34:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  37:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** #include <avr/io.h>
  38:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** #include <avr/interrupt.h>
  39:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  40:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** #if !defined(__DOXYGEN__)
  41:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** /* Internal helper functions. */
  42:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  44:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     sei();
  45:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
  46:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** }
  47:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  48:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  50:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     cli();
  61               		.loc 2 50 0
  62               	/* #APP */
  63               	 ;  50 "c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h" 1
  64 0002 F894      		cli
  65               	 ;  0 "" 2
  66               	.LVL3:
  67               	/* #NOAPP */
  68               	.LBE158:
  69               	.LBE157:
  70               		.loc 1 816 0
  71 0004 1092 0000 		sts console_flush,__zero_reg__
  72               	.LVL4:
  73               	.LBB159:
  74               	.LBB160:
  51:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
  52:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** }
  53:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  54:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  56:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     sei();
  57:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
  58:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     (void)__s;
  59:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** }
  60:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  61:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ void __iCliParam(const uint8_t *__s)
  62:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  63:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     cli();
  64:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
  65:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     (void)__s;
  66:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** }
  67:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  68:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ void __iRestore(const  uint8_t *__s)
  69:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  70:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     SREG = *__s;
  75               		.loc 2 70 0
  76 0008 9FBF      		out __SREG__,r25
  71:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
  77               		.loc 2 71 0
  78               	.LBE160:
  79               	.LBE159:
  80               	.LBE156:
 817:tmk_core/protocol/lufa/lufa.c **** 
 818:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
  81               		.loc 1 818 0
  82 000a 9091 0000 		lds r25,USB_DeviceState
  83               	.LVL5:
  84 000e 9430      		cpi r25,lo8(4)
  85 0010 01F0      		breq .+2
  86 0012 00C0      		rjmp .L15
  87               	.LBB161:
  88               	.LBB162:
  89               		.file 3 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaims all warranties with regard to this
  22:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
  93:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
  94:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
  95:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
  96:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
  97:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  98:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  99:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 100:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 101:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 102:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 103:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 104:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 105:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 106:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 107:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 108:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 109:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 110:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 111:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 112:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 113:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 114:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 115:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 116:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 117:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 119:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 120:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 121:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 122:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 123:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 124:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 125:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 126:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 127:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 128:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 129:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 130:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 131:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 */
 132:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        7
 133:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 134:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        5
 135:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 136:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 137:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 138:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 139:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 140:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 141:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 142:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 143:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 144:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 145:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 146:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 147:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 148:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 149:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 150:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 151:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 152:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 153:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 154:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 155:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 156:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 157:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 158:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 159:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 160:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 161:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 162:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 163:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 164:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 165:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint address with the given endpoint type, bank size and number
 166:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  banks. Once configured, the endpoint may be read from or written to, depending on its direct
 167:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 168:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address    Endpoint address to configure.
 169:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 170:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 171:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 172:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 173:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 174:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 175:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 176:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 177:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 178:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured.
 179:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 180:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \attention When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> 
 181:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *             ascending order, or bank corruption will occur.
 182:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 184:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        refer to the chosen microcontroller model's datasheet to determine the maximum bank si
 185:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 186:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 187:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 188:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 189:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 190:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 191:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 192:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 193:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 194:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 195:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 196:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 197:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 198:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 199:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 200:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 201:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 202:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 203:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 204:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 205:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 206:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 207:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 208:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 209:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 210:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 211:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 212:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoi
 213:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 215:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 216:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 217:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 218:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 219:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 220:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 221:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 222:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 223:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 224:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 225:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 226:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 227:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 228:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 229:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 230:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 231:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 232:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 233:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 234:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 236:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 237:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 238:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 239:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 241:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 242:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 243:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 244:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint so that it can be restored after another endpoint has been
 245:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  manipulated.
 246:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 247:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 248:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 249:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 250:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 251:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 252:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 253:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
  90               		.loc 3 253 0
  91 0014 9091 E900 		lds r25,233
  92 0018 9F70      		andi r25,lo8(15)
  93               	.LBB163:
  94               	.LBB164:
 240:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
  95               		.loc 3 240 0
  96 001a 3091 EC00 		lds r19,236
  97 001e 232F      		mov r18,r19
  98 0020 2170      		andi r18,lo8(1)
  99 0022 30FD      		sbrc r19,0
 100 0024 20E8      		ldi r18,lo8(-128)
 101               	.L5:
 102               	.LBE164:
 103               	.LBE163:
 104               		.loc 3 253 0
 105 0026 922B      		or r25,r18
 106               	.LVL6:
 107               	.LBE162:
 108               	.LBE161:
 109               	.LBB165:
 110               	.LBB166:
 254:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 255:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 256:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 257:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 258:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 259:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint address.
 260:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 261:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint address to be indicated will opera
 262:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 263:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address Endpoint address to select.
 265:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 266:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 267:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
 268:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 269:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 111               		.loc 3 270 0
 112 0028 23E0      		ldi r18,lo8(3)
 113 002a 2093 E900 		sts 233,r18
 114               	.LVL7:
 115               	.LBE166:
 116               	.LBE165:
 117               	.LBB167:
 118               	.LBB168:
 271:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 272:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 273:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 274:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 275:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 276:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 277:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
 278:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 279:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 280:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
 281:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 282:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 283:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 284:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 285:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 286:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 287:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 288:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 290:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 291:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 292:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 293:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 294:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 295:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 296:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 297:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 298:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 299:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 300:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 301:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 302:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 303:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 304:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 306:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 307:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 308:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 309:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 310:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 311:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 312:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 313:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 119               		.loc 3 313 0
 120 002e 2091 EB00 		lds r18,235
 121               	.LBE168:
 122               	.LBE167:
 819:tmk_core/protocol/lufa/lufa.c ****         return -1;
 820:tmk_core/protocol/lufa/lufa.c **** 
 821:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 822:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 823:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 123               		.loc 1 823 0
 124 0032 20FF      		sbrs r18,0
 125 0034 00C0      		rjmp .L10
 126               	.LBB169:
 127               	.LBB170:
 314:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 315:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 316:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 317:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgment via the
 318:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 319:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 320:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 321:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 322:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 323:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 324:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 325:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 326:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 328:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 330:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 331:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 332:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 333:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 334:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 335:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 336:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 337:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 338:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 339:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 340:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 341:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 342:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 343:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 344:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 347:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 348:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 349:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 350:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 351:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 352:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 353:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 354:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 355:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 356:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 357:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 358:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 359:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 361:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 362:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 363:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 364:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 365:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 366:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 367:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 368:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 369:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 370:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 128               		.loc 3 370 0
 129 0036 2091 EE00 		lds r18,238
 130               	.LBE170:
 131               	.LBE169:
 132               		.loc 1 823 0
 133 003a 27FF      		sbrs r18,7
 134 003c 00C0      		rjmp .L10
 824:tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 825:tmk_core/protocol/lufa/lufa.c ****     }
 826:tmk_core/protocol/lufa/lufa.c **** 
 827:tmk_core/protocol/lufa/lufa.c ****     if (timeouted && !Endpoint_IsReadWriteAllowed()) {
 135               		.loc 1 827 0
 136 003e 2091 0000 		lds r18,timeouted.5965
 137 0042 2223      		tst r18
 138 0044 01F0      		breq .L7
 139               	.LBB171:
 140               	.LBB172:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 141               		.loc 3 360 0
 142 0046 2091 E800 		lds r18,232
 143               	.LBE172:
 144               	.LBE171:
 145               		.loc 1 827 0
 146 004a 25FF      		sbrs r18,5
 147 004c 00C0      		rjmp .L10
 148               	.L7:
 828:tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 829:tmk_core/protocol/lufa/lufa.c ****     }
 830:tmk_core/protocol/lufa/lufa.c **** 
 831:tmk_core/protocol/lufa/lufa.c ****     timeouted = false;
 149               		.loc 1 831 0
 150 004e 1092 0000 		sts timeouted.5965,__zero_reg__
 151               	.LVL8:
 832:tmk_core/protocol/lufa/lufa.c **** 
 833:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = SEND_TIMEOUT;
 834:tmk_core/protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 152               		.loc 1 834 0
 153 0052 26E0      		ldi r18,lo8(6)
 154               	.LVL9:
 155               	.L8:
 156               	.LBB173:
 157               	.LBB174:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 158               		.loc 3 360 0
 159 0054 3091 E800 		lds r19,232
 160               	.LBE174:
 161               	.LBE173:
 162               		.loc 1 834 0
 163 0058 35FD      		sbrc r19,5
 164 005a 00C0      		rjmp .L29
 835:tmk_core/protocol/lufa/lufa.c ****         if (USB_DeviceState != DEVICE_STATE_Configured) {
 165               		.loc 1 835 0
 166 005c 3091 0000 		lds r19,USB_DeviceState
 167 0060 3430      		cpi r19,lo8(4)
 168 0062 01F4      		brne .L10
 169               	.LBB175:
 170               	.LBB176:
 371:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 372:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 373:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 374:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 375:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 376:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 377:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 378:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 379:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 380:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 381:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 382:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 383:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 384:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 385:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 386:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 387:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 388:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Address of the endpoint whose interrupt flag should be tested.
 389:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 390:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 391:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 392:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address) ATTR_WARN_UNUSED_RESUL
 393:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address)
 394:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 395:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << (Address & ENDPOINT_EPNUM_MASK))) ? true : fa
 396:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 397:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 398:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 399:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 400:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 401:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 402:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 403:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 404:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 405:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 406:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 408:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 411:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 415:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 416:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 417:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 418:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 419:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 420:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 421:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 422:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 423:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 424:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 425:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 426:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 427:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 428:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 429:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 430:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 431:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 432:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 433:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 434:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 435:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 436:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 438:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 439:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 440:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 441:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 442:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 443:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 445:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 446:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 447:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 448:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 449:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 451:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 453:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 454:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 457:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 458:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 459:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 460:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 463:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 464:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 465:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 466:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 467:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 468:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 469:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 470:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 471:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 472:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 474:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 475:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 476:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 477:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 478:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 479:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 480:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 481:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 482:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 483:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 484:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 485:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 487:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 489:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 490:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 492:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 495:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 496:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 497:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 498:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 499:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 500:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 501:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 502:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 503:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 504:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, \c false otherwise.
 505:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 506:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 507:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 508:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 509:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 510:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 511:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 512:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 513:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 171               		.loc 3 513 0
 172 0064 3091 EB00 		lds r19,235
 173               	.LBE176:
 174               	.LBE175:
 836:tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 837:tmk_core/protocol/lufa/lufa.c ****         }
 838:tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 175               		.loc 1 838 0
 176 0068 35FD      		sbrc r19,5
 177 006a 00C0      		rjmp .L10
 178               	.LVL10:
 179 006c 2150      		subi r18,lo8(-(-1))
 180               	.LVL11:
 839:tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 840:tmk_core/protocol/lufa/lufa.c ****         }
 841:tmk_core/protocol/lufa/lufa.c ****         if (!(timeout--)) {
 181               		.loc 1 841 0
 182 006e 01F4      		brne .L9
 842:tmk_core/protocol/lufa/lufa.c ****             timeouted = true;
 183               		.loc 1 842 0
 184 0070 81E0      		ldi r24,lo8(1)
 185               	.LVL12:
 186 0072 8093 0000 		sts timeouted.5965,r24
 843:tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 187               		.loc 1 843 0
 188 0076 00C0      		rjmp .L10
 189               	.LVL13:
 190               	.L9:
 191               	.LBB177:
 192               	.LBB178:
 193               		.file 4 "c:\\msys64\\home\\cris almanza\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\util\\delay.
   1:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id$ */
  34:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 194               		.loc 4 187 0
 195 0078 EFE9      		ldi r30,lo8(3999)
 196 007a FFE0      		ldi r31,hi8(3999)
 197 007c 3197      	1:	sbiw r30,1
 198 007e 01F4      		brne 1b
 199 0080 00C0      		rjmp .
 200 0082 0000      		nop
 201 0084 00C0      		rjmp .L8
 202               	.LVL14:
 203               	.L29:
 204               	.LBE178:
 205               	.LBE177:
 206               	.LBB179:
 207               	.LBB180:
 514:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 516:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 517:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 518:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 519:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 521:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 523:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 524:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 526:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 528:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 529:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 531:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 532:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 533:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 534:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 535:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 536:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 537:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 538:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 539:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 540:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 541:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 542:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 543:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 544:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 545:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 546:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 547:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 548:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 549:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 550:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 551:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 552:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 553:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 554:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 208               		.loc 3 554 0
 209 0086 8093 F100 		sts 241,r24
 210               	.LBE180:
 211               	.LBE179:
 212               	.LBB181:
 213               	.LBB182:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214               		.loc 3 360 0
 215 008a 8091 E800 		lds r24,232
 216               	.LVL15:
 217               	.LBE182:
 218               	.LBE181:
 844:tmk_core/protocol/lufa/lufa.c ****         }
 845:tmk_core/protocol/lufa/lufa.c ****         _delay_ms(1);
 846:tmk_core/protocol/lufa/lufa.c ****     }
 847:tmk_core/protocol/lufa/lufa.c **** 
 848:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(c);
 849:tmk_core/protocol/lufa/lufa.c **** 
 850:tmk_core/protocol/lufa/lufa.c ****     // send when bank is full
 851:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) {
 219               		.loc 1 851 0
 220 008e 85FD      		sbrc r24,5
 221 0090 00C0      		rjmp .L12
 222               	.L13:
 223               	.LBB183:
 224               	.LBB184:
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 225               		.loc 3 407 0 discriminator 1
 226 0092 8091 E800 		lds r24,232
 227               	.LBE184:
 228               	.LBE183:
 852:tmk_core/protocol/lufa/lufa.c ****         while (!(Endpoint_IsINReady()));
 229               		.loc 1 852 0 discriminator 1
 230 0096 80FF      		sbrs r24,0
 231 0098 00C0      		rjmp .L13
 232               	.LBB185:
 233               	.LBB186:
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 234               		.loc 3 456 0
 235 009a 8091 E800 		lds r24,232
 236 009e 8E77      		andi r24,lo8(126)
 237 00a0 8093 E800 		sts 232,r24
 238               	.LVL16:
 239 00a4 00C0      		rjmp .L14
 240               	.LVL17:
 241               	.L12:
 242               	.LBE186:
 243               	.LBE185:
 244               	.LBB187:
 853:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 854:tmk_core/protocol/lufa/lufa.c ****     } else {
 855:tmk_core/protocol/lufa/lufa.c ****         CONSOLE_FLUSH_SET(true);
 245               		.loc 1 855 0
 246 00a6 8FB7      		in r24,__SREG__
 247               	.LVL18:
 248               	.LBB188:
 249               	.LBB189:
  50:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 250               		.loc 2 50 0
 251               	/* #APP */
 252               	 ;  50 "c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h" 1
 253 00a8 F894      		cli
 254               	 ;  0 "" 2
 255               	.LVL19:
 256               	/* #NOAPP */
 257               	.LBE189:
 258               	.LBE188:
 259               		.loc 1 855 0
 260 00aa 21E0      		ldi r18,lo8(1)
 261               	.LVL20:
 262 00ac 2093 0000 		sts console_flush,r18
 263               	.LVL21:
 264               	.LBB190:
 265               	.LBB191:
  70:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 266               		.loc 2 70 0
 267 00b0 8FBF      		out __SREG__,r24
 268               		.loc 2 71 0
 269               	.LVL22:
 270               	.L14:
 271               	.LBE191:
 272               	.LBE190:
 273               	.LBE187:
 274               	.LBB192:
 275               	.LBB193:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 276               		.loc 3 270 0
 277 00b2 9F70      		andi r25,lo8(15)
 278               	.LVL23:
 279 00b4 9093 E900 		sts 233,r25
 280               	.LBE193:
 281               	.LBE192:
 856:tmk_core/protocol/lufa/lufa.c ****     }
 857:tmk_core/protocol/lufa/lufa.c **** 
 858:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 859:tmk_core/protocol/lufa/lufa.c ****     return 0;
 282               		.loc 1 859 0
 283 00b8 80E0      		ldi r24,0
 284 00ba 0895      		ret
 285               	.LVL24:
 286               	.L10:
 287               	.LBB194:
 288               	.LBB195:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 289               		.loc 3 270 0
 290 00bc 9F70      		andi r25,lo8(15)
 291               	.LVL25:
 292 00be 9093 E900 		sts 233,r25
 293               	.LVL26:
 294               	.L15:
 295               	.LBE195:
 296               	.LBE194:
 819:tmk_core/protocol/lufa/lufa.c **** 
 297               		.loc 1 819 0
 298 00c2 8FEF      		ldi r24,lo8(-1)
 860:tmk_core/protocol/lufa/lufa.c **** ERROR_EXIT:
 861:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 862:tmk_core/protocol/lufa/lufa.c ****     return -1;
 863:tmk_core/protocol/lufa/lufa.c **** }
 299               		.loc 1 863 0
 300 00c4 0895      		ret
 301               		.cfi_endproc
 302               	.LFE134:
 304               		.section	.text.send_consumer,"ax",@progbits
 306               	send_consumer:
 307               	.LFB133:
 744:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 308               		.loc 1 744 0
 309               		.cfi_startproc
 310               	.LVL27:
 311 0000 0F93      		push r16
 312               	.LCFI0:
 313               		.cfi_def_cfa_offset 3
 314               		.cfi_offset 16, -2
 315 0002 1F93      		push r17
 316               	.LCFI1:
 317               		.cfi_def_cfa_offset 4
 318               		.cfi_offset 17, -3
 319 0004 CF93      		push r28
 320               	.LCFI2:
 321               		.cfi_def_cfa_offset 5
 322               		.cfi_offset 28, -4
 323 0006 DF93      		push r29
 324               	.LCFI3:
 325               		.cfi_def_cfa_offset 6
 326               		.cfi_offset 29, -5
 327 0008 00D0      		rcall .
 328 000a 1F92      		push __zero_reg__
 329               	.LCFI4:
 330               		.cfi_def_cfa_offset 9
 331 000c CDB7      		in r28,__SP_L__
 332 000e DEB7      		in r29,__SP_H__
 333               	.LCFI5:
 334               		.cfi_def_cfa_register 28
 335               	/* prologue: function */
 336               	/* frame size = 3 */
 337               	/* stack size = 7 */
 338               	.L__stack_usage = 7
 339 0010 8C01      		movw r16,r24
 340               	.LVL28:
 746:tmk_core/protocol/lufa/lufa.c **** 
 341               		.loc 1 746 0
 342 0012 0E94 0000 		call where_to_send
 343               	.LVL29:
 780:tmk_core/protocol/lufa/lufa.c ****       return;
 344               		.loc 1 780 0
 345 0016 8230      		cpi r24,lo8(2)
 346 0018 01F0      		breq .L31
 780:tmk_core/protocol/lufa/lufa.c ****       return;
 347               		.loc 1 780 0 is_stmt 0 discriminator 1
 348 001a 8430      		cpi r24,lo8(4)
 349 001c 01F4      		brne .L30
 350               	.L31:
 784:tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 351               		.loc 1 784 0 is_stmt 1
 352 001e 83E0      		ldi r24,lo8(3)
 353               	.LVL30:
 354 0020 8983      		std Y+1,r24
 355 0022 1B83      		std Y+3,r17
 356 0024 0A83      		std Y+2,r16
 357               	.LVL31:
 358               	.LBB196:
 359               	.LBB197:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 360               		.loc 3 270 0
 361 0026 82E0      		ldi r24,lo8(2)
 362 0028 8093 E900 		sts 233,r24
 363               	.LVL32:
 364 002c 8FEF      		ldi r24,lo8(-1)
 365               	.LVL33:
 366               	.L33:
 367               	.LBE197:
 368               	.LBE196:
 369               	.LBB198:
 370               	.LBB199:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 371               		.loc 3 360 0
 372 002e 9091 E800 		lds r25,232
 373 0032 8150      		subi r24,lo8(-(-1))
 374               	.LVL34:
 375               	.LBE199:
 376               	.LBE198:
 791:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 377               		.loc 1 791 0
 378 0034 95FD      		sbrc r25,5
 379 0036 00C0      		rjmp .L34
 380               	.LVL35:
 381               	.LBB200:
 382               	.LBB201:
 188:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 189:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #else
 190:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint16_t __ticks;
 191:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	if (__tmp < 1.0)
 193:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = 1;
 194:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else if (__tmp > 65535)
 195:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	{
 196:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		while(__ticks)
 199:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		{
 200:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			// wait 1/10 ms
 201:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			__ticks --;
 203:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		}
 204:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		return;
 205:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	}
 206:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else
 207:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t)__tmp;
 208:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	_delay_loop_2(__ticks);
 209:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 210:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** }
 211:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 212:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 213:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 214:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 215:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 217:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 218:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 220:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 222:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    will not be informed about this case.
 225:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 226:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflow results in
 229:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0us.
 230:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 231:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __us
 234:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 235:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 236:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 240:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 241:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 242:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 243:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 244:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 246:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 248:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 249:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 252:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 253:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 254:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 255:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_us(double __us)
 256:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 257:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 258:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 261:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 262:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 265:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 268:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 271:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 272:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 273:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 275:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 276:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 383               		.loc 4 276 0
 384 0038 95ED      		ldi r25,lo8(-43)
 385 003a 9A95      	1:	dec r25
 386 003c 01F4      		brne 1b
 387 003e 0000      		nop
 388               	.LVL36:
 389               	.LBE201:
 390               	.LBE200:
 791:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 391               		.loc 1 791 0
 392 0040 8111      		cpse r24,__zero_reg__
 393 0042 00C0      		rjmp .L33
 394               	.LVL37:
 395               	.L34:
 396               	.LBB202:
 397               	.LBB203:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 398               		.loc 3 360 0
 399 0044 8091 E800 		lds r24,232
 400               	.LBE203:
 401               	.LBE202:
 792:tmk_core/protocol/lufa/lufa.c **** 
 402               		.loc 1 792 0
 403 0048 85FF      		sbrs r24,5
 404 004a 00C0      		rjmp .L30
 794:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 405               		.loc 1 794 0
 406 004c 40E0      		ldi r20,0
 407 004e 50E0      		ldi r21,0
 408 0050 63E0      		ldi r22,lo8(3)
 409 0052 70E0      		ldi r23,0
 410 0054 CE01      		movw r24,r28
 411 0056 0196      		adiw r24,1
 412 0058 0E94 0000 		call Endpoint_Write_Stream_LE
 413               	.LVL38:
 414               	.LBB204:
 415               	.LBB205:
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 416               		.loc 3 456 0
 417 005c 8091 E800 		lds r24,232
 418 0060 8E77      		andi r24,lo8(126)
 419 0062 8093 E800 		sts 232,r24
 420               	.LVL39:
 421               	.L30:
 422               	/* epilogue start */
 423               	.LBE205:
 424               	.LBE204:
 796:tmk_core/protocol/lufa/lufa.c **** 
 425               		.loc 1 796 0
 426 0066 0F90      		pop __tmp_reg__
 427 0068 0F90      		pop __tmp_reg__
 428 006a 0F90      		pop __tmp_reg__
 429 006c DF91      		pop r29
 430 006e CF91      		pop r28
 431 0070 1F91      		pop r17
 432 0072 0F91      		pop r16
 433               	.LVL40:
 434 0074 0895      		ret
 435               		.cfi_endproc
 436               	.LFE133:
 438               		.section	.text.send_system,"ax",@progbits
 440               	send_system:
 441               	.LFB132:
 719:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 442               		.loc 1 719 0
 443               		.cfi_startproc
 444               	.LVL41:
 445 0000 CF93      		push r28
 446               	.LCFI6:
 447               		.cfi_def_cfa_offset 3
 448               		.cfi_offset 28, -2
 449 0002 DF93      		push r29
 450               	.LCFI7:
 451               		.cfi_def_cfa_offset 4
 452               		.cfi_offset 29, -3
 453 0004 00D0      		rcall .
 454 0006 1F92      		push __zero_reg__
 455               	.LCFI8:
 456               		.cfi_def_cfa_offset 7
 457 0008 CDB7      		in r28,__SP_L__
 458 000a DEB7      		in r29,__SP_H__
 459               	.LCFI9:
 460               		.cfi_def_cfa_register 28
 461               	/* prologue: function */
 462               	/* frame size = 3 */
 463               	/* stack size = 5 */
 464               	.L__stack_usage = 5
 465               	.LVL42:
 722:tmk_core/protocol/lufa/lufa.c ****         return;
 466               		.loc 1 722 0
 467 000c 2091 0000 		lds r18,USB_DeviceState
 468 0010 2430      		cpi r18,lo8(4)
 469 0012 01F4      		brne .L46
 725:tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 470               		.loc 1 725 0
 471 0014 22E0      		ldi r18,lo8(2)
 472 0016 2983      		std Y+1,r18
 727:tmk_core/protocol/lufa/lufa.c ****     };
 473               		.loc 1 727 0
 474 0018 8058      		subi r24,-128
 475 001a 9109      		sbc r25,__zero_reg__
 476               	.LVL43:
 725:tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 477               		.loc 1 725 0
 478 001c 9B83      		std Y+3,r25
 479 001e 8A83      		std Y+2,r24
 480               	.LVL44:
 481               	.LBB206:
 482               	.LBB207:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 483               		.loc 3 270 0
 484 0020 2093 E900 		sts 233,r18
 485               	.LVL45:
 486 0024 8FEF      		ldi r24,lo8(-1)
 487               	.LVL46:
 488               	.L48:
 489               	.LBE207:
 490               	.LBE206:
 491               	.LBB208:
 492               	.LBB209:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493               		.loc 3 360 0
 494 0026 9091 E800 		lds r25,232
 495 002a 8150      		subi r24,lo8(-(-1))
 496               	.LVL47:
 497               	.LBE209:
 498               	.LBE208:
 732:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 499               		.loc 1 732 0
 500 002c 95FD      		sbrc r25,5
 501 002e 00C0      		rjmp .L49
 502               	.LVL48:
 503               	.LBB210:
 504               	.LBB211:
 505               		.loc 4 276 0
 506 0030 95ED      		ldi r25,lo8(-43)
 507 0032 9A95      	1:	dec r25
 508 0034 01F4      		brne 1b
 509 0036 0000      		nop
 510               	.LVL49:
 511               	.LBE211:
 512               	.LBE210:
 732:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 513               		.loc 1 732 0
 514 0038 8111      		cpse r24,__zero_reg__
 515 003a 00C0      		rjmp .L48
 516               	.LVL50:
 517               	.L49:
 518               	.LBB212:
 519               	.LBB213:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 520               		.loc 3 360 0
 521 003c 8091 E800 		lds r24,232
 522               	.LBE213:
 523               	.LBE212:
 733:tmk_core/protocol/lufa/lufa.c **** 
 524               		.loc 1 733 0
 525 0040 85FF      		sbrs r24,5
 526 0042 00C0      		rjmp .L46
 735:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 527               		.loc 1 735 0
 528 0044 40E0      		ldi r20,0
 529 0046 50E0      		ldi r21,0
 530 0048 63E0      		ldi r22,lo8(3)
 531 004a 70E0      		ldi r23,0
 532 004c CE01      		movw r24,r28
 533 004e 0196      		adiw r24,1
 534 0050 0E94 0000 		call Endpoint_Write_Stream_LE
 535               	.LVL51:
 536               	.LBB214:
 537               	.LBB215:
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 538               		.loc 3 456 0
 539 0054 8091 E800 		lds r24,232
 540 0058 8E77      		andi r24,lo8(126)
 541 005a 8093 E800 		sts 232,r24
 542               	.LVL52:
 543               	.L46:
 544               	/* epilogue start */
 545               	.LBE215:
 546               	.LBE214:
 737:tmk_core/protocol/lufa/lufa.c **** 
 547               		.loc 1 737 0
 548 005e 0F90      		pop __tmp_reg__
 549 0060 0F90      		pop __tmp_reg__
 550 0062 0F90      		pop __tmp_reg__
 551 0064 DF91      		pop r29
 552 0066 CF91      		pop r28
 553 0068 0895      		ret
 554               		.cfi_endproc
 555               	.LFE132:
 557               		.section	.text.send_keyboard,"ax",@progbits
 559               	send_keyboard:
 560               	.LFB130:
 605:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 561               		.loc 1 605 0
 562               		.cfi_startproc
 563               	.LVL53:
 564 0000 CF93      		push r28
 565               	.LCFI10:
 566               		.cfi_def_cfa_offset 3
 567               		.cfi_offset 28, -2
 568 0002 DF93      		push r29
 569               	.LCFI11:
 570               		.cfi_def_cfa_offset 4
 571               		.cfi_offset 29, -3
 572               	/* prologue: function */
 573               	/* frame size = 0 */
 574               	/* stack size = 2 */
 575               	.L__stack_usage = 2
 576 0004 EC01      		movw r28,r24
 577               	.LVL54:
 607:tmk_core/protocol/lufa/lufa.c **** 
 578               		.loc 1 607 0
 579 0006 0E94 0000 		call where_to_send
 580               	.LVL55:
 629:tmk_core/protocol/lufa/lufa.c ****       return;
 581               		.loc 1 629 0
 582 000a 8230      		cpi r24,lo8(2)
 583 000c 01F0      		breq .L59
 629:tmk_core/protocol/lufa/lufa.c ****       return;
 584               		.loc 1 629 0 is_stmt 0 discriminator 1
 585 000e 8430      		cpi r24,lo8(4)
 586 0010 01F4      		brne .L58
 587               	.L59:
 588               	.LVL56:
 589               	.LBB216:
 590               	.LBB217:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 591               		.loc 3 270 0 is_stmt 1
 592 0012 81E0      		ldi r24,lo8(1)
 593               	.LVL57:
 594 0014 8093 E900 		sts 233,r24
 595               	.LVL58:
 596 0018 9FEF      		ldi r25,lo8(-1)
 597               	.LVL59:
 598               	.L61:
 599               	.LBE217:
 600               	.LBE216:
 601               	.LBB218:
 602               	.LBB219:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 603               		.loc 3 360 0
 604 001a 8091 E800 		lds r24,232
 605 001e 9150      		subi r25,lo8(-(-1))
 606               	.LVL60:
 607               	.LBE219:
 608               	.LBE218:
 653:tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 609               		.loc 1 653 0
 610 0020 85FD      		sbrc r24,5
 611 0022 00C0      		rjmp .L62
 612               	.LVL61:
 613               	.LBB220:
 614               	.LBB221:
 615               		.loc 4 276 0
 616 0024 85ED      		ldi r24,lo8(-43)
 617 0026 8A95      	1:	dec r24
 618 0028 01F4      		brne 1b
 619 002a 0000      		nop
 620               	.LVL62:
 621               	.LBE221:
 622               	.LBE220:
 653:tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 623               		.loc 1 653 0
 624 002c 9111      		cpse r25,__zero_reg__
 625 002e 00C0      		rjmp .L61
 626               	.LVL63:
 627               	.L62:
 628               	.LBB222:
 629               	.LBB223:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 630               		.loc 3 360 0
 631 0030 8091 E800 		lds r24,232
 632               	.LBE223:
 633               	.LBE222:
 654:tmk_core/protocol/lufa/lufa.c **** 
 634               		.loc 1 654 0
 635 0034 85FF      		sbrs r24,5
 636 0036 00C0      		rjmp .L58
 657:tmk_core/protocol/lufa/lufa.c ****     }
 637               		.loc 1 657 0
 638 0038 40E0      		ldi r20,0
 639 003a 50E0      		ldi r21,0
 640 003c 68E0      		ldi r22,lo8(8)
 641 003e 70E0      		ldi r23,0
 642 0040 CE01      		movw r24,r28
 643 0042 0E94 0000 		call Endpoint_Write_Stream_LE
 644               	.LVL64:
 645               	.LBB224:
 646               	.LBB225:
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 647               		.loc 3 456 0
 648 0046 9091 E800 		lds r25,232
 649 004a 9E77      		andi r25,lo8(126)
 650 004c 9093 E800 		sts 232,r25
 651               	.LBE225:
 652               	.LBE224:
 663:tmk_core/protocol/lufa/lufa.c **** }
 653               		.loc 1 663 0
 654 0050 98E0      		ldi r25,lo8(8)
 655 0052 FE01      		movw r30,r28
 656 0054 A0E0      		ldi r26,lo8(keyboard_report_sent)
 657 0056 B0E0      		ldi r27,hi8(keyboard_report_sent)
 658               		0:
 659 0058 0190      		ld r0,Z+
 660 005a 0D92      		st X+,r0
 661 005c 9A95      		dec r25
 662 005e 01F4      		brne 0b
 663               	.LVL65:
 664               	.L58:
 665               	/* epilogue start */
 664:tmk_core/protocol/lufa/lufa.c ****  
 666               		.loc 1 664 0
 667 0060 DF91      		pop r29
 668 0062 CF91      		pop r28
 669               	.LVL66:
 670 0064 0895      		ret
 671               		.cfi_endproc
 672               	.LFE130:
 674               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 675               	.global	EVENT_USB_Device_Connect
 677               	EVENT_USB_Device_Connect:
 678               	.LFB121:
 306:tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 679               		.loc 1 306 0
 680               		.cfi_startproc
 681               	/* prologue: function */
 682               	/* frame size = 0 */
 683               	/* stack size = 0 */
 684               	.L__stack_usage = 0
 307:tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 685               		.loc 1 307 0
 686 0000 80E0      		ldi r24,lo8(__c.5877)
 687 0002 90E0      		ldi r25,hi8(__c.5877)
 688 0004 0E94 0000 		call xputs
 689               	.LVL67:
 309:tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 690               		.loc 1 309 0
 691 0008 8091 0000 		lds r24,USB_IsInitialized
 692 000c 8111      		cpse r24,__zero_reg__
 693 000e 00C0      		rjmp .L77
 310:tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 694               		.loc 1 310 0
 695 0010 0E94 0000 		call USB_Disable
 696               	.LVL68:
 311:tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 697               		.loc 1 311 0
 698 0014 0E94 0000 		call USB_Init
 699               	.LVL69:
 700               	.LBB226:
 701               	.LBB227:
 702               	.LBB228:
 703               		.file 5 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h"
   1:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaims all warranties with regard to this
  22:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
  89:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
  91:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
 704               		.loc 5 113 0
 705 0018 8091 E200 		lds r24,226
 706 001c 8460      		ori r24,lo8(4)
 707 001e 8093 E200 		sts 226,r24
 708               	.LVL70:
 709               	.L77:
 710 0022 0895      		ret
 711               	.LBE228:
 712               	.LBE227:
 713               	.LBE226:
 714               		.cfi_endproc
 715               	.LFE121:
 717               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 718               	.global	EVENT_USB_Device_Disconnect
 720               	EVENT_USB_Device_Disconnect:
 721               	.LFB122:
 321:tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 722               		.loc 1 321 0
 723               		.cfi_startproc
 724               	/* prologue: function */
 725               	/* frame size = 0 */
 726               	/* stack size = 0 */
 727               	.L__stack_usage = 0
 322:tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 728               		.loc 1 322 0
 729 0000 80E0      		ldi r24,lo8(__c.5882)
 730 0002 90E0      		ldi r25,hi8(__c.5882)
 731 0004 0E94 0000 		call xputs
 732               	.LVL71:
 324:tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 733               		.loc 1 324 0
 734 0008 1092 0000 		sts USB_IsInitialized,__zero_reg__
 735 000c 0895      		ret
 736               		.cfi_endproc
 737               	.LFE122:
 739               		.section	.text.EVENT_USB_Device_Reset,"ax",@progbits
 740               	.global	EVENT_USB_Device_Reset
 742               	EVENT_USB_Device_Reset:
 743               	.LFB123:
 339:tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 744               		.loc 1 339 0
 745               		.cfi_startproc
 746               	/* prologue: function */
 747               	/* frame size = 0 */
 748               	/* stack size = 0 */
 749               	.L__stack_usage = 0
 340:tmk_core/protocol/lufa/lufa.c **** }
 750               		.loc 1 340 0
 751 0000 80E0      		ldi r24,lo8(__c.5887)
 752 0002 90E0      		ldi r25,hi8(__c.5887)
 753 0004 0C94 0000 		jmp xputs
 754               	.LVL72:
 755               		.cfi_endproc
 756               	.LFE123:
 758               		.section	.text.EVENT_USB_Device_Suspend,"ax",@progbits
 759               	.global	EVENT_USB_Device_Suspend
 761               	EVENT_USB_Device_Suspend:
 762               	.LFB124:
 348:tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 763               		.loc 1 348 0
 764               		.cfi_startproc
 765               	/* prologue: function */
 766               	/* frame size = 0 */
 767               	/* stack size = 0 */
 768               	.L__stack_usage = 0
 349:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 769               		.loc 1 349 0
 770 0000 80E0      		ldi r24,lo8(__c.5891)
 771 0002 90E0      		ldi r25,hi8(__c.5891)
 772 0004 0C94 0000 		jmp xputs
 773               	.LVL73:
 774               		.cfi_endproc
 775               	.LFE124:
 777               		.section	.text.EVENT_USB_Device_WakeUp,"ax",@progbits
 778               	.global	EVENT_USB_Device_WakeUp
 780               	EVENT_USB_Device_WakeUp:
 781               	.LFB125:
 360:tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 782               		.loc 1 360 0
 783               		.cfi_startproc
 784               	/* prologue: function */
 785               	/* frame size = 0 */
 786               	/* stack size = 0 */
 787               	.L__stack_usage = 0
 361:tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 788               		.loc 1 361 0
 789 0000 80E0      		ldi r24,lo8(__c.5895)
 790 0002 90E0      		ldi r25,hi8(__c.5895)
 791 0004 0E94 0000 		call xputs
 792               	.LVL74:
 362:tmk_core/protocol/lufa/lufa.c **** 
 793               		.loc 1 362 0
 794 0008 0C94 0000 		jmp suspend_wakeup_init
 795               	.LVL75:
 796               		.cfi_endproc
 797               	.LFE125:
 799               		.section	.text.EVENT_USB_Device_StartOfFrame,"ax",@progbits
 800               	.global	EVENT_USB_Device_StartOfFrame
 802               	EVENT_USB_Device_StartOfFrame:
 803               	.LFB126:
 387:tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 804               		.loc 1 387 0
 805               		.cfi_startproc
 806               	/* prologue: function */
 807               	/* frame size = 0 */
 808               	/* stack size = 0 */
 809               	.L__stack_usage = 0
 389:tmk_core/protocol/lufa/lufa.c ****     count = 0;
 810               		.loc 1 389 0
 811 0000 2091 0000 		lds r18,count.5901
 812 0004 2F5F      		subi r18,lo8(-(1))
 813 0006 822F      		mov r24,r18
 814 0008 62E3      		ldi r22,lo8(50)
 815 000a 0E94 0000 		call __udivmodqi4
 816 000e 9923      		tst r25
 817 0010 01F0      		breq .L84
 818 0012 2093 0000 		sts count.5901,r18
 819 0016 0895      		ret
 820               	.L84:
 390:tmk_core/protocol/lufa/lufa.c **** 
 821               		.loc 1 390 0
 822 0018 1092 0000 		sts count.5901,__zero_reg__
 392:tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 823               		.loc 1 392 0
 824 001c 8091 0000 		lds r24,console_flush
 825 0020 8823      		tst r24
 826 0022 01F0      		breq .L83
 827               	.LBB253:
 828               	.LBB254:
 240:tmk_core/protocol/lufa/lufa.c ****         return;
 829               		.loc 1 240 0
 830 0024 8091 0000 		lds r24,USB_DeviceState
 831 0028 8430      		cpi r24,lo8(4)
 832 002a 01F4      		brne .L87
 833               	.LBB255:
 834               	.LBB256:
 253:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 835               		.loc 3 253 0
 836 002c 8091 E900 		lds r24,233
 837 0030 8F70      		andi r24,lo8(15)
 838               	.LBB257:
 839               	.LBB258:
 240:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 840               		.loc 3 240 0
 841 0032 2091 EC00 		lds r18,236
 842 0036 922F      		mov r25,r18
 843 0038 9170      		andi r25,lo8(1)
 844 003a 20FD      		sbrc r18,0
 845 003c 90E8      		ldi r25,lo8(-128)
 846               	.L88:
 847               	.LBE258:
 848               	.LBE257:
 253:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 849               		.loc 3 253 0
 850 003e 892B      		or r24,r25
 851               	.LVL76:
 852               	.LBE256:
 853               	.LBE255:
 854               	.LBB259:
 855               	.LBB260:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 856               		.loc 3 270 0
 857 0040 93E0      		ldi r25,lo8(3)
 858 0042 9093 E900 		sts 233,r25
 859               	.LBE260:
 860               	.LBE259:
 861               	.LBB261:
 862               	.LBB262:
 313:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 863               		.loc 3 313 0
 864 0046 9091 EB00 		lds r25,235
 865               	.LBE262:
 866               	.LBE261:
 272:tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 867               		.loc 1 272 0
 868 004a 90FF      		sbrs r25,0
 869 004c 00C0      		rjmp .L92
 870               	.LBB263:
 871               	.LBB264:
 370:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 872               		.loc 3 370 0
 873 004e 9091 EE00 		lds r25,238
 874               	.LBE264:
 875               	.LBE263:
 272:tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 876               		.loc 1 272 0
 877 0052 97FF      		sbrs r25,7
 878 0054 00C0      		rjmp .L92
 879               	.L100:
 880               	.LBB265:
 881               	.LBB266:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 882               		.loc 3 360 0
 883 0056 9091 E800 		lds r25,232
 884               	.LBE266:
 885               	.LBE265:
 278:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 886               		.loc 1 278 0
 887 005a 95FF      		sbrs r25,5
 888 005c 00C0      		rjmp .L104
 889               	.LVL77:
 890               	.LBB267:
 891               	.LBB268:
 892               		.loc 3 554 0
 893 005e 1092 F100 		sts 241,__zero_reg__
 894 0062 00C0      		rjmp .L100
 895               	.LVL78:
 896               	.L104:
 897               	.LBE268:
 898               	.LBE267:
 899               	.LBB269:
 900               	.LBB270:
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 901               		.loc 3 407 0
 902 0064 9091 E800 		lds r25,232
 903               	.LBE270:
 904               	.LBE269:
 282:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 905               		.loc 1 282 0
 906 0068 90FF      		sbrs r25,0
 907 006a 00C0      		rjmp .L92
 908               	.LBB271:
 909               	.LBB272:
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 910               		.loc 3 456 0
 911 006c 9091 E800 		lds r25,232
 912 0070 9E77      		andi r25,lo8(126)
 913 0072 9093 E800 		sts 232,r25
 914               	.L92:
 915               	.LVL79:
 916               	.LBE272:
 917               	.LBE271:
 918               	.LBB273:
 919               	.LBB274:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 920               		.loc 3 270 0
 921 0076 8F70      		andi r24,lo8(15)
 922               	.LVL80:
 923 0078 8093 E900 		sts 233,r24
 924               	.LVL81:
 925               	.L87:
 926               	.LBE274:
 927               	.LBE273:
 928               	.LBE254:
 929               	.LBE253:
 394:tmk_core/protocol/lufa/lufa.c **** }
 930               		.loc 1 394 0
 931 007c 1092 0000 		sts console_flush,__zero_reg__
 932               	.L83:
 933 0080 0895      		ret
 934               		.cfi_endproc
 935               	.LFE126:
 937               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 938               	.global	EVENT_USB_Device_ConfigurationChanged
 940               	EVENT_USB_Device_ConfigurationChanged:
 941               	.LFB127:
 407:tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 942               		.loc 1 407 0
 943               		.cfi_startproc
 944               	/* prologue: function */
 945               	/* frame size = 0 */
 946               	/* stack size = 0 */
 947               	.L__stack_usage = 0
 948               	.LVL82:
 949               	.LBB275:
 950               	.LBB276:
 210:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 951               		.loc 3 210 0
 952 0000 42E0      		ldi r20,lo8(2)
 953 0002 61EC      		ldi r22,lo8(-63)
 954 0004 81E0      		ldi r24,lo8(1)
 955 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 956               	.LVL83:
 957               	.LBE276:
 958               	.LBE275:
 959               	.LBB277:
 960               	.LBB278:
 961 000a 42E0      		ldi r20,lo8(2)
 962 000c 61EC      		ldi r22,lo8(-63)
 963 000e 82E0      		ldi r24,lo8(2)
 964 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 965               	.LVL84:
 966               	.LBE278:
 967               	.LBE277:
 968               	.LBB279:
 969               	.LBB280:
 970 0014 42E2      		ldi r20,lo8(34)
 971 0016 61EC      		ldi r22,lo8(-63)
 972 0018 83E0      		ldi r24,lo8(3)
 973 001a 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 974               	.LVL85:
 975               	.LBE280:
 976               	.LBE279:
 977               		.cfi_endproc
 978               	.LFE127:
 980               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 981               	.global	EVENT_USB_Device_ControlRequest
 983               	EVENT_USB_Device_ControlRequest:
 984               	.LFB128:
 480:tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 985               		.loc 1 480 0
 986               		.cfi_startproc
 987               	/* prologue: function */
 988               	/* frame size = 0 */
 989               	/* stack size = 0 */
 990               	.L__stack_usage = 0
 991               	.LVL86:
 485:tmk_core/protocol/lufa/lufa.c ****     {
 992               		.loc 1 485 0
 993 0000 8091 0000 		lds r24,USB_ControlRequest+1
 994 0004 8330      		cpi r24,lo8(3)
 995 0006 01F4      		brne .+2
 996 0008 00C0      		rjmp .L108
 997 000a 00F4      		brsh .L109
 998 000c 8130      		cpi r24,lo8(1)
 999 000e 01F0      		breq .L110
 1000 0010 8230      		cpi r24,lo8(2)
 1001 0012 01F4      		brne .+2
 1002 0014 00C0      		rjmp .L111
 1003 0016 0895      		ret
 1004               	.L109:
 1005 0018 8A30      		cpi r24,lo8(10)
 1006 001a 01F4      		brne .+2
 1007 001c 00C0      		rjmp .L112
 1008 001e 8B30      		cpi r24,lo8(11)
 1009 0020 01F4      		brne .+2
 1010 0022 00C0      		rjmp .L113
 1011 0024 8930      		cpi r24,lo8(9)
 1012 0026 01F0      		breq .+2
 1013 0028 00C0      		rjmp .L106
 1014 002a 00C0      		rjmp .L135
 1015               	.L110:
 488:tmk_core/protocol/lufa/lufa.c ****             {
 1016               		.loc 1 488 0
 1017 002c 8091 0000 		lds r24,USB_ControlRequest
 1018 0030 813A      		cpi r24,lo8(-95)
 1019 0032 01F0      		breq .+2
 1020 0034 00C0      		rjmp .L106
 1021               	.LBB281:
 1022               	.LBB282:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1023               		.loc 3 444 0
 1024 0036 8091 E800 		lds r24,232
 1025 003a 877F      		andi r24,lo8(-9)
 1026 003c 8093 E800 		sts 232,r24
 1027               	.LBE282:
 1028               	.LBE281:
 493:tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 1029               		.loc 1 493 0
 1030 0040 8091 0000 		lds r24,USB_ControlRequest+4
 1031 0044 9091 0000 		lds r25,USB_ControlRequest+4+1
 1032 0048 892B      		or r24,r25
 1033 004a 01F4      		brne .L132
 497:tmk_core/protocol/lufa/lufa.c ****                     break;
 1034               		.loc 1 497 0
 1035 004c 68E0      		ldi r22,lo8(8)
 496:tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 1036               		.loc 1 496 0
 1037 004e 80E0      		ldi r24,lo8(keyboard_report_sent)
 1038 0050 90E0      		ldi r25,hi8(keyboard_report_sent)
 1039 0052 00C0      		rjmp .L116
 1040               	.L132:
 482:tmk_core/protocol/lufa/lufa.c **** 
 1041               		.loc 1 482 0
 1042 0054 60E0      		ldi r22,0
 481:tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 1043               		.loc 1 481 0
 1044 0056 80E0      		ldi r24,0
 1045 0058 90E0      		ldi r25,0
 1046               	.L116:
 1047               	.LVL87:
 502:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 1048               		.loc 1 502 0
 1049 005a 70E0      		ldi r23,0
 1050 005c 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 1051               	.LVL88:
 1052               	.LBB283:
 1053               	.LBB284:
 471:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1054               		.loc 3 471 0
 1055 0060 8091 E800 		lds r24,232
 1056 0064 8B77      		andi r24,lo8(123)
 1057 0066 8093 E800 		sts 232,r24
 1058 006a 0895      		ret
 1059               	.LVL89:
 1060               	.L135:
 1061               	.LBE284:
 1062               	.LBE283:
 508:tmk_core/protocol/lufa/lufa.c ****             {
 1063               		.loc 1 508 0
 1064 006c 8091 0000 		lds r24,USB_ControlRequest
 1065 0070 8132      		cpi r24,lo8(33)
 1066 0072 01F0      		breq .+2
 1067 0074 00C0      		rjmp .L106
 512:tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 1068               		.loc 1 512 0
 1069 0076 8091 0000 		lds r24,USB_ControlRequest+4
 1070 007a 9091 0000 		lds r25,USB_ControlRequest+4+1
 1071 007e 892B      		or r24,r25
 1072 0080 01F0      		breq .+2
 1073 0082 00C0      		rjmp .L106
 1074               	.LBB285:
 1075               	.LBB286:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1076               		.loc 3 444 0
 1077 0084 8091 E800 		lds r24,232
 1078 0088 877F      		andi r24,lo8(-9)
 1079 008a 8093 E800 		sts 232,r24
 1080               	.L120:
 1081               	.LBE286:
 1082               	.LBE285:
 1083               	.LBB287:
 1084               	.LBB288:
 419:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1085               		.loc 3 419 0
 1086 008e 8091 E800 		lds r24,232
 1087               	.LBE288:
 1088               	.LBE287:
 519:tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 1089               		.loc 1 519 0
 1090 0092 82FD      		sbrc r24,2
 1091 0094 00C0      		rjmp .L136
 520:tmk_core/protocol/lufa/lufa.c ****                           return;
 1092               		.loc 1 520 0
 1093 0096 8091 0000 		lds r24,USB_DeviceState
 1094 009a 8111      		cpse r24,__zero_reg__
 1095 009c 00C0      		rjmp .L120
 1096 009e 00C0      		rjmp .L106
 1097               	.L136:
 1098               	.LBB289:
 1099               	.LBB290:
 542:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1100               		.loc 3 542 0
 1101 00a0 8091 F100 		lds r24,241
 1102               	.LBE290:
 1103               	.LBE289:
 523:tmk_core/protocol/lufa/lufa.c **** 
 1104               		.loc 1 523 0
 1105 00a4 8093 0000 		sts keyboard_led_stats,r24
 1106               	.LBB291:
 1107               	.LBB292:
 471:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1108               		.loc 3 471 0
 1109 00a8 8091 E800 		lds r24,232
 1110 00ac 8B77      		andi r24,lo8(123)
 1111 00ae 00C0      		rjmp .L133
 1112               	.L108:
 1113               	.LBE292:
 1114               	.LBE291:
 535:tmk_core/protocol/lufa/lufa.c ****             {
 1115               		.loc 1 535 0
 1116 00b0 8091 0000 		lds r24,USB_ControlRequest
 1117 00b4 813A      		cpi r24,lo8(-95)
 1118 00b6 01F0      		breq .+2
 1119 00b8 00C0      		rjmp .L106
 537:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 1120               		.loc 1 537 0
 1121 00ba 8091 0000 		lds r24,USB_ControlRequest+4
 1122 00be 9091 0000 		lds r25,USB_ControlRequest+4+1
 1123 00c2 892B      		or r24,r25
 1124 00c4 01F0      		breq .+2
 1125 00c6 00C0      		rjmp .L106
 1126               	.LBB293:
 1127               	.LBB294:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1128               		.loc 3 444 0
 1129 00c8 8091 E800 		lds r24,232
 1130 00cc 877F      		andi r24,lo8(-9)
 1131 00ce 8093 E800 		sts 232,r24
 1132               	.L122:
 1133               	.LBE294:
 1134               	.LBE293:
 1135               	.LBB295:
 1136               	.LBB296:
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1137               		.loc 3 407 0 discriminator 1
 1138 00d2 8091 E800 		lds r24,232
 1139               	.LBE296:
 1140               	.LBE295:
 539:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 1141               		.loc 1 539 0 discriminator 1
 1142 00d6 80FF      		sbrs r24,0
 1143 00d8 00C0      		rjmp .L122
 540:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 1144               		.loc 1 540 0
 1145 00da 8091 0000 		lds r24,keyboard_protocol
 1146               	.LVL90:
 1147 00de 00C0      		rjmp .L134
 1148               	.LVL91:
 1149               	.L113:
 548:tmk_core/protocol/lufa/lufa.c ****             {
 1150               		.loc 1 548 0
 1151 00e0 8091 0000 		lds r24,USB_ControlRequest
 1152 00e4 8132      		cpi r24,lo8(33)
 1153 00e6 01F4      		brne .L106
 550:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 1154               		.loc 1 550 0
 1155 00e8 8091 0000 		lds r24,USB_ControlRequest+4
 1156 00ec 9091 0000 		lds r25,USB_ControlRequest+4+1
 1157 00f0 892B      		or r24,r25
 1158 00f2 01F4      		brne .L106
 1159               	.LBB297:
 1160               	.LBB298:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1161               		.loc 3 444 0
 1162 00f4 8091 E800 		lds r24,232
 1163 00f8 877F      		andi r24,lo8(-9)
 1164 00fa 8093 E800 		sts 232,r24
 1165               	.LBE298:
 1166               	.LBE297:
 552:tmk_core/protocol/lufa/lufa.c **** 
 1167               		.loc 1 552 0
 1168 00fe 0E94 0000 		call Endpoint_ClearStatusStage
 1169               	.LVL92:
 554:tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 1170               		.loc 1 554 0
 1171 0102 8091 0000 		lds r24,USB_ControlRequest+2
 1172 0106 8093 0000 		sts keyboard_protocol,r24
 555:tmk_core/protocol/lufa/lufa.c ****                 }
 1173               		.loc 1 555 0
 1174 010a 0C94 0000 		jmp clear_keyboard
 1175               	.LVL93:
 1176               	.L112:
 561:tmk_core/protocol/lufa/lufa.c ****             {
 1177               		.loc 1 561 0
 1178 010e 8091 0000 		lds r24,USB_ControlRequest
 1179 0112 8132      		cpi r24,lo8(33)
 1180 0114 01F4      		brne .L106
 1181               	.LBB299:
 1182               	.LBB300:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1183               		.loc 3 444 0
 1184 0116 8091 E800 		lds r24,232
 1185 011a 877F      		andi r24,lo8(-9)
 1186 011c 8093 E800 		sts 232,r24
 1187               	.LBE300:
 1188               	.LBE299:
 564:tmk_core/protocol/lufa/lufa.c **** 
 1189               		.loc 1 564 0
 1190 0120 0E94 0000 		call Endpoint_ClearStatusStage
 1191               	.LVL94:
 566:tmk_core/protocol/lufa/lufa.c ****             }
 1192               		.loc 1 566 0
 1193 0124 8091 0000 		lds r24,USB_ControlRequest+3
 1194 0128 8093 0000 		sts keyboard_idle,r24
 1195 012c 0895      		ret
 1196               	.L111:
 571:tmk_core/protocol/lufa/lufa.c ****             {
 1197               		.loc 1 571 0
 1198 012e 8091 0000 		lds r24,USB_ControlRequest
 1199 0132 813A      		cpi r24,lo8(-95)
 1200 0134 01F4      		brne .L106
 1201               	.LBB301:
 1202               	.LBB302:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1203               		.loc 3 444 0
 1204 0136 8091 E800 		lds r24,232
 1205 013a 877F      		andi r24,lo8(-9)
 1206 013c 8093 E800 		sts 232,r24
 1207               	.L123:
 1208               	.LBE302:
 1209               	.LBE301:
 1210               	.LBB303:
 1211               	.LBB304:
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1212               		.loc 3 407 0 discriminator 1
 1213 0140 8091 E800 		lds r24,232
 1214               	.LBE304:
 1215               	.LBE303:
 574:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 1216               		.loc 1 574 0 discriminator 1
 1217 0144 80FF      		sbrs r24,0
 1218 0146 00C0      		rjmp .L123
 575:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 1219               		.loc 1 575 0
 1220 0148 8091 0000 		lds r24,keyboard_idle
 1221               	.L134:
 1222               	.LVL95:
 1223               	.LBB305:
 1224               	.LBB306:
 1225               		.loc 3 554 0
 1226 014c 8093 F100 		sts 241,r24
 1227               	.LBE306:
 1228               	.LBE305:
 1229               	.LBB307:
 1230               	.LBB308:
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1231               		.loc 3 456 0
 1232 0150 8091 E800 		lds r24,232
 1233               	.LVL96:
 1234 0154 8E77      		andi r24,lo8(126)
 1235               	.LVL97:
 1236               	.L133:
 1237 0156 8093 E800 		sts 232,r24
 1238               	.LBE308:
 1239               	.LBE307:
 577:tmk_core/protocol/lufa/lufa.c ****             }
 1240               		.loc 1 577 0
 1241 015a 0C94 0000 		jmp Endpoint_ClearStatusStage
 1242               	.LVL98:
 1243               	.L106:
 1244 015e 0895      		ret
 1245               		.cfi_endproc
 1246               	.LFE128:
 1248               		.section	.text.startup.main,"ax",@progbits
 1249               		.weak	main
 1251               	main:
 1252               	.LFB137:
 864:tmk_core/protocol/lufa/lufa.c **** #else
 865:tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 866:tmk_core/protocol/lufa/lufa.c **** {
 867:tmk_core/protocol/lufa/lufa.c ****     return 0;
 868:tmk_core/protocol/lufa/lufa.c **** }
 869:tmk_core/protocol/lufa/lufa.c **** #endif
 870:tmk_core/protocol/lufa/lufa.c **** 
 871:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 872:tmk_core/protocol/lufa/lufa.c ****  * MIDI
 873:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 874:tmk_core/protocol/lufa/lufa.c **** 
 875:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 876:tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_MIDI_Device_t USB_MIDI_Interface =
 877:tmk_core/protocol/lufa/lufa.c **** {
 878:tmk_core/protocol/lufa/lufa.c ****   .Config =
 879:tmk_core/protocol/lufa/lufa.c ****   {
 880:tmk_core/protocol/lufa/lufa.c ****     .StreamingInterfaceNumber = AS_INTERFACE,
 881:tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint           =
 882:tmk_core/protocol/lufa/lufa.c ****     {
 883:tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_IN_EPADDR,
 884:tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 885:tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 886:tmk_core/protocol/lufa/lufa.c ****     },
 887:tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint          =
 888:tmk_core/protocol/lufa/lufa.c ****     {
 889:tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_OUT_EPADDR,
 890:tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 891:tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 892:tmk_core/protocol/lufa/lufa.c ****     },
 893:tmk_core/protocol/lufa/lufa.c ****   },
 894:tmk_core/protocol/lufa/lufa.c **** };
 895:tmk_core/protocol/lufa/lufa.c **** 
 896:tmk_core/protocol/lufa/lufa.c **** void send_midi_packet(MIDI_EventPacket_t* event) {
 897:tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_SendEventPacket(&USB_MIDI_Interface, event);
 898:tmk_core/protocol/lufa/lufa.c **** }
 899:tmk_core/protocol/lufa/lufa.c **** 
 900:tmk_core/protocol/lufa/lufa.c **** bool recv_midi_packet(MIDI_EventPacket_t* const event) {
 901:tmk_core/protocol/lufa/lufa.c ****   return MIDI_Device_ReceiveEventPacket(&USB_MIDI_Interface, event);
 902:tmk_core/protocol/lufa/lufa.c **** }
 903:tmk_core/protocol/lufa/lufa.c **** 
 904:tmk_core/protocol/lufa/lufa.c **** #endif
 905:tmk_core/protocol/lufa/lufa.c **** 
 906:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 907:tmk_core/protocol/lufa/lufa.c ****  * VIRTUAL SERIAL
 908:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 909:tmk_core/protocol/lufa/lufa.c **** 
 910:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 911:tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Init
 912:tmk_core/protocol/lufa/lufa.c ****  *
 913:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 914:tmk_core/protocol/lufa/lufa.c ****  */
 915:tmk_core/protocol/lufa/lufa.c **** void virtser_init(void)
 916:tmk_core/protocol/lufa/lufa.c **** {
 917:tmk_core/protocol/lufa/lufa.c ****   cdc_device.State.ControlLineStates.DeviceToHost = CDC_CONTROL_LINE_IN_DSR ;
 918:tmk_core/protocol/lufa/lufa.c ****   CDC_Device_SendControlLineStateChange(&cdc_device);
 919:tmk_core/protocol/lufa/lufa.c **** }
 920:tmk_core/protocol/lufa/lufa.c **** 
 921:tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Receive
 922:tmk_core/protocol/lufa/lufa.c ****  *
 923:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 924:tmk_core/protocol/lufa/lufa.c ****  */
 925:tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c) __attribute__ ((weak));
 926:tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c)
 927:tmk_core/protocol/lufa/lufa.c **** {
 928:tmk_core/protocol/lufa/lufa.c ****   // Ignore by default
 929:tmk_core/protocol/lufa/lufa.c **** }
 930:tmk_core/protocol/lufa/lufa.c **** 
 931:tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Task
 932:tmk_core/protocol/lufa/lufa.c ****  *
 933:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 934:tmk_core/protocol/lufa/lufa.c ****  */
 935:tmk_core/protocol/lufa/lufa.c **** void virtser_task(void)
 936:tmk_core/protocol/lufa/lufa.c **** {
 937:tmk_core/protocol/lufa/lufa.c ****   uint16_t count = CDC_Device_BytesReceived(&cdc_device);
 938:tmk_core/protocol/lufa/lufa.c ****   uint8_t ch;
 939:tmk_core/protocol/lufa/lufa.c ****   if (count)
 940:tmk_core/protocol/lufa/lufa.c ****   {
 941:tmk_core/protocol/lufa/lufa.c ****     ch = CDC_Device_ReceiveByte(&cdc_device);
 942:tmk_core/protocol/lufa/lufa.c ****     virtser_recv(ch);
 943:tmk_core/protocol/lufa/lufa.c ****   }
 944:tmk_core/protocol/lufa/lufa.c **** }
 945:tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Send
 946:tmk_core/protocol/lufa/lufa.c ****  *
 947:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 948:tmk_core/protocol/lufa/lufa.c ****  */
 949:tmk_core/protocol/lufa/lufa.c **** void virtser_send(const uint8_t byte)
 950:tmk_core/protocol/lufa/lufa.c **** {
 951:tmk_core/protocol/lufa/lufa.c ****   uint8_t timeout = 255;
 952:tmk_core/protocol/lufa/lufa.c ****   uint8_t ep = Endpoint_GetCurrentEndpoint();
 953:tmk_core/protocol/lufa/lufa.c **** 
 954:tmk_core/protocol/lufa/lufa.c ****   if (cdc_device.State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR)
 955:tmk_core/protocol/lufa/lufa.c ****   {
 956:tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 957:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(cdc_device.Config.DataINEndpoint.Address);
 958:tmk_core/protocol/lufa/lufa.c **** 
 959:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 960:tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 961:tmk_core/protocol/lufa/lufa.c ****         return;
 962:tmk_core/protocol/lufa/lufa.c ****     }
 963:tmk_core/protocol/lufa/lufa.c **** 
 964:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 965:tmk_core/protocol/lufa/lufa.c **** 
 966:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(byte);
 967:tmk_core/protocol/lufa/lufa.c ****     CDC_Device_Flush(&cdc_device);
 968:tmk_core/protocol/lufa/lufa.c **** 
 969:tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 970:tmk_core/protocol/lufa/lufa.c ****       Endpoint_ClearIN();
 971:tmk_core/protocol/lufa/lufa.c ****     }
 972:tmk_core/protocol/lufa/lufa.c **** 
 973:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 974:tmk_core/protocol/lufa/lufa.c ****   }
 975:tmk_core/protocol/lufa/lufa.c **** }
 976:tmk_core/protocol/lufa/lufa.c **** #endif
 977:tmk_core/protocol/lufa/lufa.c **** 
 978:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 979:tmk_core/protocol/lufa/lufa.c ****  * main
 980:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 981:tmk_core/protocol/lufa/lufa.c **** /** \brief Setup MCU
 982:tmk_core/protocol/lufa/lufa.c ****  *
 983:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 984:tmk_core/protocol/lufa/lufa.c ****  */
 985:tmk_core/protocol/lufa/lufa.c **** static void setup_mcu(void)
 986:tmk_core/protocol/lufa/lufa.c **** {
 987:tmk_core/protocol/lufa/lufa.c ****     /* Disable watchdog if enabled by bootloader/fuses */
 988:tmk_core/protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
 989:tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 990:tmk_core/protocol/lufa/lufa.c **** 
 991:tmk_core/protocol/lufa/lufa.c ****     /* Disable clock division */
 992:tmk_core/protocol/lufa/lufa.c ****     // clock_prescale_set(clock_div_1);
 993:tmk_core/protocol/lufa/lufa.c **** 
 994:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (1 << CLKPCE);
 995:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 996:tmk_core/protocol/lufa/lufa.c **** }
 997:tmk_core/protocol/lufa/lufa.c **** 
 998:tmk_core/protocol/lufa/lufa.c **** /** \brief Setup USB
 999:tmk_core/protocol/lufa/lufa.c ****  *
1000:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
1001:tmk_core/protocol/lufa/lufa.c ****  */
1002:tmk_core/protocol/lufa/lufa.c **** static void setup_usb(void)
1003:tmk_core/protocol/lufa/lufa.c **** {
1004:tmk_core/protocol/lufa/lufa.c ****     // Leonardo needs. Without this USB device is not recognized.
1005:tmk_core/protocol/lufa/lufa.c ****     USB_Disable();
1006:tmk_core/protocol/lufa/lufa.c **** 
1007:tmk_core/protocol/lufa/lufa.c ****     USB_Init();
1008:tmk_core/protocol/lufa/lufa.c **** 
1009:tmk_core/protocol/lufa/lufa.c ****     // for Console_Task
1010:tmk_core/protocol/lufa/lufa.c ****     USB_Device_EnableSOFEvents();
1011:tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
1012:tmk_core/protocol/lufa/lufa.c **** }
1013:tmk_core/protocol/lufa/lufa.c **** 
1014:tmk_core/protocol/lufa/lufa.c **** /** \brief Main
1015:tmk_core/protocol/lufa/lufa.c ****  *
1016:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
1017:tmk_core/protocol/lufa/lufa.c ****  */
1018:tmk_core/protocol/lufa/lufa.c **** int main(void)  __attribute__ ((weak));
1019:tmk_core/protocol/lufa/lufa.c **** int main(void)
1020:tmk_core/protocol/lufa/lufa.c **** {
 1253               		.loc 1 1020 0
 1254               		.cfi_startproc
 1255               	/* prologue: function */
 1256               	/* frame size = 0 */
 1257               	/* stack size = 0 */
 1258               	.L__stack_usage = 0
 1259               	.LBB320:
 1260               	.LBB321:
 988:tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 1261               		.loc 1 988 0
 1262 0000 84B7      		in r24,0x34
 1263 0002 877F      		andi r24,lo8(-9)
 1264 0004 84BF      		out 0x34,r24
 1265               	.LBB322:
 1266               	.LBB323:
 1267               		.file 6 "c:\\msys64\\home\\cris almanza\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\avr\\wdt.h"
   1:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    All rights reserved.
   4:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
   5:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
   8:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    * Redistributions of source code must retain the above copyright
   9:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  11:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      the documentation and/or other materials provided with the
  14:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      distribution.
  15:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  16:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      contributors may be used to endorse or promote products derived
  18:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      from this software without specific prior written permission.
  19:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  20:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  32:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /* $Id$ */
  33:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  34:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /*
  35:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****  */
  37:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  38:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #ifndef _AVR_WDT_H_
  39:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define _AVR_WDT_H_
  40:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  41:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #include <avr/io.h>
  42:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #include <stdint.h>
  43:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  44:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /** \file */
  45:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  48:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     This header file declares the interface to some inline macros
  49:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     to prevent the watchdog timer configuration from being
  51:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     accidentally altered by a crashing application, a special timed
  52:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     sequence is required in order to change it.  The macros within
  53:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     this header file handle the required sequence automatically
  54:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     the manipulation.
  56:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  57:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \note Depending on the fuse configuration of the particular
  58:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     device, further restrictions might apply, in particular it might
  59:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     be disallowed to turn off the watchdog timer.
  60:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  61:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     timer remains active even after a system reset (except a power-on
  64:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     the following:
  68:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  69:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \code
  70:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     #include <stdint.h>
  71:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     #include <avr/wdt.h>
  72:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  73:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  75:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     void get_mcusr(void) \
  76:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       __attribute__((naked)) \
  77:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       __attribute__((section(".init3")));
  78:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     void get_mcusr(void)
  79:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     {
  80:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       mcusr_mirror = MCUSR;
  81:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       MCUSR = 0;
  82:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       wdt_disable();
  83:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     }
  84:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \endcode
  85:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  86:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     clearing the watchdog reset flag before disabling the
  89:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     watchdog is required, according to the datasheet.
  90:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
  91:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  92:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /**
  93:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \ingroup avr_watchdog
  94:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    a call to this instruction is required before the timer expires,
  96:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
  98:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  99:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 101:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #ifndef __DOXYGEN__
 102:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 103:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(WDP3)
 104:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 106:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** # define _WD_PS3_MASK       0x00
 107:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif
 108:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 109:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(WDTCSR)
 110:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #elif defined(WDTCR)
 112:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 114:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif
 116:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 117:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(WDTOE)
 118:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 120:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif
 122:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 123:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif	/* !__DOXYGEN__ */
 124:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 125:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 126:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /**
 127:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \ingroup avr_watchdog
 128:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    through \c WDP3 bits).
 133:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 134:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
 136:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 137:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 138:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(__AVR_XMEGA__)
 139:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 140:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined (WDT_CTRLA) && !defined(RAMPD)
 141:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 142:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_enable(timeout) \
 143:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 144:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp; \
 145:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 146:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"wdr"									"\n\t" \
 147:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]"		"\n\t" \
 148:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"lds %[tmp], %[wdt_reg]"				"\n\t" \
 149:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"sbr %[tmp], %[wdt_enable_timeout]"		"\n\t" \
 150:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"sts %[wdt_reg], %[tmp]"				"\n\t" \
 151:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"1:lds %[tmp], %[wdt_status_reg]"		"\n\t" \
 152:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"sbrc %[tmp], %[wdt_syncbusy_bit]"		"\n\t" \
 153:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"rjmp 1b"								"\n\t" \
 154:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	: [tmp]					"=r" (temp) \
 155:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	: [ccp_reg]				"I"  (_SFR_IO_ADDR(CCP)), \
 156:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	  [ioreg_cen_mask]		"r"  ((uint8_t)CCP_IOREG_gc), \
 157:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	  [wdt_reg]				"n"  (_SFR_MEM_ADDR(WDT_CTRLA)), \
 158:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	  [wdt_enable_timeout]	"M"  (timeout), \
 159:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	  [wdt_status_reg]		"n"  (_SFR_MEM_ADDR(WDT_STATUS)), \
 160:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	  [wdt_syncbusy_bit]	"I"  (WDT_SYNCBUSY_bm) \
 161:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 162:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** } while(0)
 163:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 164:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_disable() \
 165:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 166:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp; \
 167:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ (  \
 168:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"wdr"								"\n\t" \
 169:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 170:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"lds %[tmp], %[wdt_reg]"			"\n\t" \
 171:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"cbr %[tmp], %[timeout_mask]"       "\n\t" \
 172:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"sts %[wdt_reg], %[tmp]"			"\n\t" \
 173:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [tmp]            "=r" (temp) \
 174:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [ccp_reg]        "I" (_SFR_IO_ADDR(CCP)),       \
 175:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ioreg_cen_mask] "r" ((uint8_t)CCP_IOREG_gc),   \
 176:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_reg]        "n" (_SFR_MEM_ADDR(WDT_CTRLA)),\
 177:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [timeout_mask]   "I" (WDT_PERIOD_gm) \
 178:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 179:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** } while(0)
 180:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 181:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else // defined (WDT_CTRLA) && !defined(RAMPD)
 182:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 183:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /*
 184:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    wdt_enable(timeout) for xmega devices
 185:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 186:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    registers to the CCP register
 187:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ** At the same time,
 188:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 189:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 190:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    3) set timeout (timeout)
 191:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 192:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 193:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    sync is finished).
 194:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
 195:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_enable(timeout) \
 196:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 197:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp; \
 198:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ (         \
 199:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 200:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 201:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 202:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 203:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 204:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 205:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "rjmp 1b"                               "\n\t" \
 206:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 207:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [tmp]                "=r" (temp) \
 208:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 209:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 210:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 211:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 212:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 213:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 214:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 215:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r0" \
 216:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 217:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** } while(0)
 218:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 219:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_disable() \
 220:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ (  \
 221:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 222:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 223:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 224:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 225:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 226:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : \
 227:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 228:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 229:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 230:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 231:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 232:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r0" \
 233:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** );
 234:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 235:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif // defined (WDT_CTRLA) && !defined(RAMPD)
 236:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 237:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #elif defined(__AVR_TINY__)
 238:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 239:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_enable(value) \
 240:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 241:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 242:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "cli" "\n\t"  \
 243:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "wdr" "\n\t"  \
 244:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 245:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 246:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 247:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : /* no outputs */  \
 248:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 249:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 250:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 251:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 252:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 253:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r16" \
 254:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** )
 255:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 256:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_disable() \
 257:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 258:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp_wd; \
 259:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 260:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 261:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "cli" "\n\t"  \
 262:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "wdr" "\n\t"  \
 263:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 264:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 265:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 266:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 267:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 268:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : /*no output */ \
 269:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 270:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 271:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 272:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 273:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 274:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r16" \
 275:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 276:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }while(0)
 277:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 278:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #elif defined(CCP)
 279:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 280:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 281:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 282:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_enable (const uint8_t value)
 283:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 284:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 285:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 286:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 287:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 288:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 289:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 290:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 291:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 292:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 293:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 294:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 295:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 296:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 297:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 298:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 299:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 300:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 301:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 302:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 303:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 304:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 305:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 306:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 307:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 308:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 309:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 310:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 311:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 312:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 313:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 314:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 315:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 316:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 317:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 318:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 319:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 320:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 321:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 322:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 323:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 324:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 325:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 326:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 327:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 328:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 329:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 330:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 331:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 332:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 334:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 335:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 336:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 337:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 338:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 339:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****  	{
 340:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 341:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 342:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 343:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 344:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 345:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 346:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 347:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 348:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 349:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 350:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 351:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 352:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 353:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 354:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 355:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 356:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }
 357:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 358:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 359:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 360:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_disable (void)
 361:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 362:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 363:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 364:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 365:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 366:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 367:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 368:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 369:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 370:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 371:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 372:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 373:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 374:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 375:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 376:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 377:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 378:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 379:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 380:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 381:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 382:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 383:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 384:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 385:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 386:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 387:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 388:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 389:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 390:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 391:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 392:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 393:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 394:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 395:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 396:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 397:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 398:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 399:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 400:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 401:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 402:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 403:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 404:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 405:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 406:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 407:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 408:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 409:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 410:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 411:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 412:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 413:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 414:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 415:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 416:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 417:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 418:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 419:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 420:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 421:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 422:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 423:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 424:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 425:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 426:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 427:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 428:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 429:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 431:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 432:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 433:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 434:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 435:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 436:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 437:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 438:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 439:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 440:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 441:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 442:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 443:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 444:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 445:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 446:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }
 447:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 448:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 449:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 450:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 451:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 452:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_enable (const uint8_t value)
 453:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 454:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 455:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 456:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 457:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 458:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 459:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 460:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %0, %1" "\n\t"
 461:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 462:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %0, %2" "\n \t"
 463:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /* no outputs */
 464:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 465:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 466:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 467:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 468:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 469:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		);
 470:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 471:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 472:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 473:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 474:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 475:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 476:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 477:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %0, %1" "\n\t"
 478:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 479:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %0, %2" "\n \t"
 480:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /* no outputs */
 481:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 482:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 483:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 484:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 485:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 486:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		);
 487:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 488:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }
 489:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 490:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 491:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 492:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_disable (void)
 493:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 494:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 495:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 496:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t register temp_reg;
 497:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 498:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 499:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli"                        "\n\t"
 500:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr"                        "\n\t"
 501:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 502:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 503:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 504:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 505:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 506:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 507:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 508:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 509:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 510:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		);
 511:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 512:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 513:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 514:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t register temp_reg;
 515:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 1268               		.loc 6 515 0
 1269               	/* #APP */
 1270               	 ;  515 "c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h" 1
 1271 0006 0FB6      		in __tmp_reg__,__SREG__
 1272 0008 F894      		cli
 1273 000a A895      		wdr
 1274 000c 8091 6000 		lds r24,96
 1275 0010 8861      		ori r24,24
 1276 0012 8093 6000 		sts 96,r24
 1277 0016 1092 6000 		sts 96,__zero_reg__
 1278 001a 0FBE      		out __SREG__,__tmp_reg__
 1279               		
 1280               	 ;  0 "" 2
 1281               	.LVL99:
 1282               	/* #NOAPP */
 1283               	.LBE323:
 1284               	.LBE322:
 994:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 1285               		.loc 1 994 0
 1286 001c 80E8      		ldi r24,lo8(-128)
 1287 001e 8093 6100 		sts 97,r24
 995:tmk_core/protocol/lufa/lufa.c **** }
 1288               		.loc 1 995 0
 1289 0022 1092 6100 		sts 97,__zero_reg__
 1290               	.LBE321:
 1291               	.LBE320:
1021:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1022:tmk_core/protocol/lufa/lufa.c ****     setup_midi();
1023:tmk_core/protocol/lufa/lufa.c **** #endif
1024:tmk_core/protocol/lufa/lufa.c **** 
1025:tmk_core/protocol/lufa/lufa.c ****     setup_mcu();
1026:tmk_core/protocol/lufa/lufa.c ****     keyboard_setup();
 1292               		.loc 1 1026 0
 1293 0026 0E94 0000 		call keyboard_setup
 1294               	.LVL100:
 1295               	.LBB324:
 1296               	.LBB325:
1005:tmk_core/protocol/lufa/lufa.c **** 
 1297               		.loc 1 1005 0
 1298 002a 0E94 0000 		call USB_Disable
 1299               	.LVL101:
1007:tmk_core/protocol/lufa/lufa.c **** 
 1300               		.loc 1 1007 0
 1301 002e 0E94 0000 		call USB_Init
 1302               	.LVL102:
 1303               	.LBB326:
 1304               	.LBB327:
 1305               	.LBB328:
 1306               		.loc 5 113 0
 1307 0032 8091 E200 		lds r24,226
 1308 0036 8460      		ori r24,lo8(4)
 1309 0038 8093 E200 		sts 226,r24
 1310               	.LBE328:
 1311               	.LBE327:
 1312               	.LBE326:
1011:tmk_core/protocol/lufa/lufa.c **** }
 1313               		.loc 1 1011 0
 1314 003c 80E0      		ldi r24,lo8(gs(sendchar))
 1315 003e 90E0      		ldi r25,hi8(gs(sendchar))
 1316 0040 0E94 0000 		call print_set_sendchar
 1317               	.LVL103:
 1318               	.LBE325:
 1319               	.LBE324:
1027:tmk_core/protocol/lufa/lufa.c ****     setup_usb();
1028:tmk_core/protocol/lufa/lufa.c ****     sei();
 1320               		.loc 1 1028 0
 1321               	/* #APP */
 1322               	 ;  1028 "tmk_core/protocol/lufa/lufa.c" 1
 1323 0044 7894      		sei
 1324               	 ;  0 "" 2
1029:tmk_core/protocol/lufa/lufa.c **** 
1030:tmk_core/protocol/lufa/lufa.c **** #if defined(MODULE_ADAFRUIT_EZKEY) || defined(MODULE_RN42)
1031:tmk_core/protocol/lufa/lufa.c ****     serial_init();
1032:tmk_core/protocol/lufa/lufa.c **** #endif
1033:tmk_core/protocol/lufa/lufa.c **** 
1034:tmk_core/protocol/lufa/lufa.c ****     /* wait for USB startup & debug output */
1035:tmk_core/protocol/lufa/lufa.c **** 
1036:tmk_core/protocol/lufa/lufa.c **** #ifdef WAIT_FOR_USB
1037:tmk_core/protocol/lufa/lufa.c ****     while (USB_DeviceState != DEVICE_STATE_Configured) {
1038:tmk_core/protocol/lufa/lufa.c ****     #if defined(INTERRUPT_CONTROL_ENDPOINT)
1039:tmk_core/protocol/lufa/lufa.c ****             ;
1040:tmk_core/protocol/lufa/lufa.c ****     #else
1041:tmk_core/protocol/lufa/lufa.c ****             USB_USBTask();
1042:tmk_core/protocol/lufa/lufa.c ****     #endif
1043:tmk_core/protocol/lufa/lufa.c ****     }
1044:tmk_core/protocol/lufa/lufa.c ****     print("USB configured.\n");
1045:tmk_core/protocol/lufa/lufa.c **** #else
1046:tmk_core/protocol/lufa/lufa.c ****     USB_USBTask();
 1325               		.loc 1 1046 0
 1326               	/* #NOAPP */
 1327 0046 0E94 0000 		call USB_USBTask
 1328               	.LVL104:
1047:tmk_core/protocol/lufa/lufa.c **** #endif
1048:tmk_core/protocol/lufa/lufa.c ****     /* init modules */
1049:tmk_core/protocol/lufa/lufa.c ****     keyboard_init();
 1329               		.loc 1 1049 0
 1330 004a 0E94 0000 		call keyboard_init
 1331               	.LVL105:
1050:tmk_core/protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 1332               		.loc 1 1050 0
 1333 004e 80E0      		ldi r24,lo8(lufa_driver)
 1334 0050 90E0      		ldi r25,hi8(lufa_driver)
 1335 0052 0E94 0000 		call host_set_driver
 1336               	.LVL106:
1051:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
1052:tmk_core/protocol/lufa/lufa.c ****     sleep_led_init();
1053:tmk_core/protocol/lufa/lufa.c **** #endif
1054:tmk_core/protocol/lufa/lufa.c **** 
1055:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1056:tmk_core/protocol/lufa/lufa.c ****     virtser_init();
1057:tmk_core/protocol/lufa/lufa.c **** #endif
1058:tmk_core/protocol/lufa/lufa.c **** 
1059:tmk_core/protocol/lufa/lufa.c ****     print("Keyboard start.\n");
 1337               		.loc 1 1059 0
 1338 0056 80E0      		ldi r24,lo8(__c.5996)
 1339 0058 90E0      		ldi r25,hi8(__c.5996)
 1340 005a 0E94 0000 		call xputs
 1341               	.LVL107:
 1342               	.L138:
1060:tmk_core/protocol/lufa/lufa.c ****     while (1) {
1061:tmk_core/protocol/lufa/lufa.c ****         #if !defined(NO_USB_STARTUP_CHECK)
1062:tmk_core/protocol/lufa/lufa.c ****         while (USB_DeviceState == DEVICE_STATE_Suspended) {
 1343               		.loc 1 1062 0
 1344 005e 8091 0000 		lds r24,USB_DeviceState
 1345 0062 8530      		cpi r24,lo8(5)
 1346 0064 01F4      		brne .L146
1063:tmk_core/protocol/lufa/lufa.c ****             print("[s]");
 1347               		.loc 1 1063 0
 1348 0066 80E0      		ldi r24,lo8(__c.5998)
 1349 0068 90E0      		ldi r25,hi8(__c.5998)
 1350 006a 0E94 0000 		call xputs
 1351               	.LVL108:
1064:tmk_core/protocol/lufa/lufa.c ****             suspend_power_down();
 1352               		.loc 1 1064 0
 1353 006e 0E94 0000 		call suspend_power_down
 1354               	.LVL109:
1065:tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 1355               		.loc 1 1065 0
 1356 0072 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 1357 0076 8823      		tst r24
 1358 0078 01F0      		breq .L138
 1359               		.loc 1 1065 0 is_stmt 0 discriminator 1
 1360 007a 0E94 0000 		call suspend_wakeup_condition
 1361               	.LVL110:
 1362 007e 8823      		tst r24
 1363 0080 01F0      		breq .L138
1066:tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1364               		.loc 1 1066 0 is_stmt 1
 1365 0082 0E94 0000 		call USB_Device_SendRemoteWakeup
 1366               	.LVL111:
 1367 0086 00C0      		rjmp .L138
 1368               	.L146:
1067:tmk_core/protocol/lufa/lufa.c ****             }
1068:tmk_core/protocol/lufa/lufa.c ****         }
1069:tmk_core/protocol/lufa/lufa.c ****         #endif
1070:tmk_core/protocol/lufa/lufa.c **** 
1071:tmk_core/protocol/lufa/lufa.c ****         keyboard_task();
 1369               		.loc 1 1071 0
 1370 0088 0E94 0000 		call keyboard_task
 1371               	.LVL112:
1072:tmk_core/protocol/lufa/lufa.c **** 
1073:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1074:tmk_core/protocol/lufa/lufa.c ****         MIDI_Device_USBTask(&USB_MIDI_Interface);
1075:tmk_core/protocol/lufa/lufa.c **** #endif
1076:tmk_core/protocol/lufa/lufa.c **** 
1077:tmk_core/protocol/lufa/lufa.c **** #if defined(RGBLIGHT_ANIMATIONS) & defined(RGBLIGHT_ENABLE)
1078:tmk_core/protocol/lufa/lufa.c ****         rgblight_task();
 1372               		.loc 1 1078 0
 1373 008c 0E94 0000 		call rgblight_task
 1374               	.LVL113:
1079:tmk_core/protocol/lufa/lufa.c **** #endif
1080:tmk_core/protocol/lufa/lufa.c **** 
1081:tmk_core/protocol/lufa/lufa.c **** #ifdef MODULE_ADAFRUIT_BLE
1082:tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_task();
1083:tmk_core/protocol/lufa/lufa.c **** #endif
1084:tmk_core/protocol/lufa/lufa.c **** 
1085:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1086:tmk_core/protocol/lufa/lufa.c ****         virtser_task();
1087:tmk_core/protocol/lufa/lufa.c ****         CDC_Device_USBTask(&cdc_device);
1088:tmk_core/protocol/lufa/lufa.c **** #endif
1089:tmk_core/protocol/lufa/lufa.c **** 
1090:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
1091:tmk_core/protocol/lufa/lufa.c ****         raw_hid_task();
1092:tmk_core/protocol/lufa/lufa.c **** #endif
1093:tmk_core/protocol/lufa/lufa.c **** 
1094:tmk_core/protocol/lufa/lufa.c **** #if !defined(INTERRUPT_CONTROL_ENDPOINT)
1095:tmk_core/protocol/lufa/lufa.c ****         USB_USBTask();
1096:tmk_core/protocol/lufa/lufa.c **** #endif
1097:tmk_core/protocol/lufa/lufa.c **** 
1098:tmk_core/protocol/lufa/lufa.c ****     }
 1375               		.loc 1 1098 0
 1376 0090 00C0      		rjmp .L138
 1377               		.cfi_endproc
 1378               	.LFE137:
 1380               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
 1381               	.global	CALLBACK_USB_GetDescriptor
 1383               	CALLBACK_USB_GetDescriptor:
 1384               	.LFB138:
1099:tmk_core/protocol/lufa/lufa.c **** }
1100:tmk_core/protocol/lufa/lufa.c **** 
1101:tmk_core/protocol/lufa/lufa.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
1102:tmk_core/protocol/lufa/lufa.c ****                                     const uint16_t wIndex,
1103:tmk_core/protocol/lufa/lufa.c ****                                     const void** const DescriptorAddress)
1104:tmk_core/protocol/lufa/lufa.c **** {
 1385               		.loc 1 1104 0
 1386               		.cfi_startproc
 1387               	.LVL114:
 1388               	/* prologue: function */
 1389               	/* frame size = 0 */
 1390               	/* stack size = 0 */
 1391               	.L__stack_usage = 0
1105:tmk_core/protocol/lufa/lufa.c ****   return get_usb_descriptor(wValue, wIndex, DescriptorAddress);
 1392               		.loc 1 1105 0
 1393 0000 0C94 0000 		jmp get_usb_descriptor
 1394               	.LVL115:
 1395               		.cfi_endproc
 1396               	.LFE138:
 1398               		.section	.progmem.data.__c.5998,"a",@progbits
 1401               	__c.5998:
 1402 0000 5B73 5D00 		.string	"[s]"
 1403               		.section	.progmem.data.__c.5996,"a",@progbits
 1406               	__c.5996:
 1407 0000 4B65 7962 		.string	"Keyboard start.\n"
 1407      6F61 7264 
 1407      2073 7461 
 1407      7274 2E0A 
 1407      00
 1408               		.section	.bss.timeouted.5965,"aw",@nobits
 1411               	timeouted.5965:
 1412 0000 00        		.zero	1
 1413               		.section	.bss.count.5901,"aw",@nobits
 1416               	count.5901:
 1417 0000 00        		.zero	1
 1418               		.section	.progmem.data.__c.5895,"a",@progbits
 1421               	__c.5895:
 1422 0000 5B57 5D00 		.string	"[W]"
 1423               		.section	.progmem.data.__c.5891,"a",@progbits
 1426               	__c.5891:
 1427 0000 5B53 5D00 		.string	"[S]"
 1428               		.section	.progmem.data.__c.5887,"a",@progbits
 1431               	__c.5887:
 1432 0000 5B52 5D00 		.string	"[R]"
 1433               		.section	.progmem.data.__c.5882,"a",@progbits
 1436               	__c.5882:
 1437 0000 5B44 5D00 		.string	"[D]"
 1438               		.section	.progmem.data.__c.5877,"a",@progbits
 1441               	__c.5877:
 1442 0000 5B43 5D00 		.string	"[C]"
 1443               		.section	.bss.console_flush,"aw",@nobits
 1446               	console_flush:
 1447 0000 00        		.zero	1
 1448               	.global	lufa_driver
 1449               		.section	.data.lufa_driver,"aw",@progbits
 1452               	lufa_driver:
 1453 0000 0000      		.word	gs(keyboard_leds)
 1454 0002 0000      		.word	gs(send_keyboard)
 1455 0004 0000      		.word	gs(send_mouse)
 1456 0006 0000      		.word	gs(send_system)
 1457 0008 0000      		.word	gs(send_consumer)
 1458               		.section	.bss.keyboard_report_sent,"aw",@nobits
 1461               	keyboard_report_sent:
 1462 0000 0000 0000 		.zero	8
 1462      0000 0000 
 1463               		.section	.bss.keyboard_led_stats,"aw",@nobits
 1466               	keyboard_led_stats:
 1467 0000 00        		.zero	1
 1468               	.global	keyboard_protocol
 1469               		.section	.data.keyboard_protocol,"aw",@progbits
 1472               	keyboard_protocol:
 1473 0000 01        		.byte	1
 1474               	.global	keyboard_idle
 1475               		.section	.bss.keyboard_idle,"aw",@nobits
 1478               	keyboard_idle:
 1479 0000 00        		.zero	1
 1480               		.text
 1481               	.Letext0:
 1482               		.file 7 "c:\\msys64\\home\\cris almanza\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdint.h"
 1483               		.file 8 "tmk_core/common/report.h"
 1484               		.file 9 "tmk_core/common/host_driver.h"
 1485               		.file 10 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1486               		.file 11 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1487               		.file 12 "lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 1488               		.file 13 "tmk_core/protocol/lufa/lufa.h"
 1489               		.file 14 "tmk_core/protocol/lufa/outputselect.h"
 1490               		.file 15 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
 1491               		.file 16 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1492               		.file 17 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 1493               		.file 18 "tmk_core/common/action_util.h"
 1494               		.file 19 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 1495               		.file 20 "tmk_core/common/suspend.h"
 1496               		.file 21 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 1497               		.file 22 "tmk_core/common/action.h"
 1498               		.file 23 "tmk_core/common/avr/xprintf.h"
 1499               		.file 24 "tmk_core/common/print.h"
 1500               		.file 25 "tmk_core/common/keyboard.h"
 1501               		.file 26 "tmk_core/common/host.h"
 1502               		.file 27 "quantum/rgblight.h"
 1503               		.file 28 "tmk_core/protocol/usb_descriptor.h"
DEFINED SYMBOLS
                            *ABS*:00000000 lufa.c
C:\msys64\tmp\ccht6YWZ.s:2      *ABS*:0000003e __SP_H__
C:\msys64\tmp\ccht6YWZ.s:3      *ABS*:0000003d __SP_L__
C:\msys64\tmp\ccht6YWZ.s:4      *ABS*:0000003f __SREG__
C:\msys64\tmp\ccht6YWZ.s:5      *ABS*:00000000 __tmp_reg__
C:\msys64\tmp\ccht6YWZ.s:6      *ABS*:00000001 __zero_reg__
C:\msys64\tmp\ccht6YWZ.s:12     .text.keyboard_leds:00000000 keyboard_leds
C:\msys64\tmp\ccht6YWZ.s:1466   .bss.keyboard_led_stats:00000000 keyboard_led_stats
C:\msys64\tmp\ccht6YWZ.s:29     .text.send_mouse:00000000 send_mouse
C:\msys64\tmp\ccht6YWZ.s:45     .text.sendchar:00000000 sendchar
C:\msys64\tmp\ccht6YWZ.s:1446   .bss.console_flush:00000000 console_flush
C:\msys64\tmp\ccht6YWZ.s:1411   .bss.timeouted.5965:00000000 timeouted.5965
C:\msys64\tmp\ccht6YWZ.s:306    .text.send_consumer:00000000 send_consumer
C:\msys64\tmp\ccht6YWZ.s:440    .text.send_system:00000000 send_system
C:\msys64\tmp\ccht6YWZ.s:559    .text.send_keyboard:00000000 send_keyboard
C:\msys64\tmp\ccht6YWZ.s:1461   .bss.keyboard_report_sent:00000000 keyboard_report_sent
C:\msys64\tmp\ccht6YWZ.s:677    .text.EVENT_USB_Device_Connect:00000000 EVENT_USB_Device_Connect
C:\msys64\tmp\ccht6YWZ.s:1441   .progmem.data.__c.5877:00000000 __c.5877
C:\msys64\tmp\ccht6YWZ.s:720    .text.EVENT_USB_Device_Disconnect:00000000 EVENT_USB_Device_Disconnect
C:\msys64\tmp\ccht6YWZ.s:1436   .progmem.data.__c.5882:00000000 __c.5882
C:\msys64\tmp\ccht6YWZ.s:742    .text.EVENT_USB_Device_Reset:00000000 EVENT_USB_Device_Reset
C:\msys64\tmp\ccht6YWZ.s:1431   .progmem.data.__c.5887:00000000 __c.5887
C:\msys64\tmp\ccht6YWZ.s:761    .text.EVENT_USB_Device_Suspend:00000000 EVENT_USB_Device_Suspend
C:\msys64\tmp\ccht6YWZ.s:1426   .progmem.data.__c.5891:00000000 __c.5891
C:\msys64\tmp\ccht6YWZ.s:780    .text.EVENT_USB_Device_WakeUp:00000000 EVENT_USB_Device_WakeUp
C:\msys64\tmp\ccht6YWZ.s:1421   .progmem.data.__c.5895:00000000 __c.5895
C:\msys64\tmp\ccht6YWZ.s:802    .text.EVENT_USB_Device_StartOfFrame:00000000 EVENT_USB_Device_StartOfFrame
C:\msys64\tmp\ccht6YWZ.s:1416   .bss.count.5901:00000000 count.5901
C:\msys64\tmp\ccht6YWZ.s:940    .text.EVENT_USB_Device_ConfigurationChanged:00000000 EVENT_USB_Device_ConfigurationChanged
C:\msys64\tmp\ccht6YWZ.s:983    .text.EVENT_USB_Device_ControlRequest:00000000 EVENT_USB_Device_ControlRequest
C:\msys64\tmp\ccht6YWZ.s:1472   .data.keyboard_protocol:00000000 keyboard_protocol
C:\msys64\tmp\ccht6YWZ.s:1478   .bss.keyboard_idle:00000000 keyboard_idle
C:\msys64\tmp\ccht6YWZ.s:1251   .text.startup.main:00000000 main
C:\msys64\tmp\ccht6YWZ.s:1452   .data.lufa_driver:00000000 lufa_driver
C:\msys64\tmp\ccht6YWZ.s:1406   .progmem.data.__c.5996:00000000 __c.5996
C:\msys64\tmp\ccht6YWZ.s:1401   .progmem.data.__c.5998:00000000 __c.5998
C:\msys64\tmp\ccht6YWZ.s:1383   .text.CALLBACK_USB_GetDescriptor:00000000 CALLBACK_USB_GetDescriptor

UNDEFINED SYMBOLS
USB_DeviceState
where_to_send
Endpoint_Write_Stream_LE
xputs
USB_IsInitialized
USB_Disable
USB_Init
suspend_wakeup_init
__udivmodqi4
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
Endpoint_ClearStatusStage
clear_keyboard
keyboard_setup
print_set_sendchar
USB_USBTask
keyboard_init
host_set_driver
suspend_power_down
USB_Device_RemoteWakeupEnabled
suspend_wakeup_condition
USB_Device_SendRemoteWakeup
keyboard_task
rgblight_task
get_usb_descriptor
__do_copy_data
__do_clear_bss
