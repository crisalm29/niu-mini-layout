   1               		.file	"rgblight.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.sethsv,"ax",@progbits
  11               	.global	sethsv
  13               	sethsv:
  14               	.LFB7:
  15               		.file 1 "quantum/rgblight.c"
   1:quantum/rgblight.c **** /* Copyright 2016-2017 Yang Liu
   2:quantum/rgblight.c ****  *
   3:quantum/rgblight.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/rgblight.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/rgblight.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/rgblight.c ****  * (at your option) any later version.
   7:quantum/rgblight.c ****  *
   8:quantum/rgblight.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/rgblight.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/rgblight.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/rgblight.c ****  * GNU General Public License for more details.
  12:quantum/rgblight.c ****  *
  13:quantum/rgblight.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/rgblight.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/rgblight.c ****  */
  16:quantum/rgblight.c **** #include <math.h>
  17:quantum/rgblight.c **** #ifdef __AVR__
  18:quantum/rgblight.c ****   #include <avr/eeprom.h>
  19:quantum/rgblight.c ****   #include <avr/interrupt.h>
  20:quantum/rgblight.c **** #endif
  21:quantum/rgblight.c **** #include "wait.h"
  22:quantum/rgblight.c **** #include "progmem.h"
  23:quantum/rgblight.c **** #include "timer.h"
  24:quantum/rgblight.c **** #include "rgblight.h"
  25:quantum/rgblight.c **** #include "debug.h"
  26:quantum/rgblight.c **** #include "led_tables.h"
  27:quantum/rgblight.c **** 
  28:quantum/rgblight.c **** #ifndef RGBLIGHT_LIMIT_VAL
  29:quantum/rgblight.c **** #define RGBLIGHT_LIMIT_VAL 255
  30:quantum/rgblight.c **** #endif
  31:quantum/rgblight.c **** 
  32:quantum/rgblight.c **** #define MIN(a,b) (((a)<(b))?(a):(b))
  33:quantum/rgblight.c **** #define MAX(a,b) (((a)>(b))?(a):(b))
  34:quantum/rgblight.c **** 
  35:quantum/rgblight.c **** __attribute__ ((weak))
  36:quantum/rgblight.c **** const uint8_t RGBLED_BREATHING_INTERVALS[] PROGMEM = {30, 20, 10, 5};
  37:quantum/rgblight.c **** __attribute__ ((weak))
  38:quantum/rgblight.c **** const uint8_t RGBLED_RAINBOW_MOOD_INTERVALS[] PROGMEM = {120, 60, 30};
  39:quantum/rgblight.c **** __attribute__ ((weak))
  40:quantum/rgblight.c **** const uint8_t RGBLED_RAINBOW_SWIRL_INTERVALS[] PROGMEM = {100, 50, 20};
  41:quantum/rgblight.c **** __attribute__ ((weak))
  42:quantum/rgblight.c **** const uint8_t RGBLED_SNAKE_INTERVALS[] PROGMEM = {100, 50, 20};
  43:quantum/rgblight.c **** __attribute__ ((weak))
  44:quantum/rgblight.c **** const uint8_t RGBLED_KNIGHT_INTERVALS[] PROGMEM = {127, 63, 31};
  45:quantum/rgblight.c **** __attribute__ ((weak))
  46:quantum/rgblight.c **** const uint16_t RGBLED_GRADIENT_RANGES[] PROGMEM = {360, 240, 180, 120, 90};
  47:quantum/rgblight.c **** __attribute__ ((weak))
  48:quantum/rgblight.c **** const uint16_t RGBLED_RGBTEST_INTERVALS[] PROGMEM = {1024};
  49:quantum/rgblight.c **** 
  50:quantum/rgblight.c **** rgblight_config_t rgblight_config;
  51:quantum/rgblight.c **** 
  52:quantum/rgblight.c **** LED_TYPE led[RGBLED_NUM];
  53:quantum/rgblight.c **** bool rgblight_timer_enabled = false;
  54:quantum/rgblight.c **** 
  55:quantum/rgblight.c **** void sethsv(uint16_t hue, uint8_t sat, uint8_t val, LED_TYPE *led1) {
  16               		.loc 1 55 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 EF92      		push r14
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 14, -2
  23 0002 FF92      		push r15
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 15, -3
  27 0004 0F93      		push r16
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 16, -4
  31 0006 1F93      		push r17
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 17, -5
  35 0008 CF93      		push r28
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 28, -6
  39 000a DF93      		push r29
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 29, -7
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 6 */
  46               	.L__stack_usage = 6
  47 000c E901      		movw r28,r18
  48               	.LVL1:
  56:quantum/rgblight.c ****   uint8_t r = 0, g = 0, b = 0, base, color;
  57:quantum/rgblight.c **** 
  58:quantum/rgblight.c ****   if (val > RGBLIGHT_LIMIT_VAL) {
  59:quantum/rgblight.c ****       val=RGBLIGHT_LIMIT_VAL; // limit the val
  60:quantum/rgblight.c ****   }
  61:quantum/rgblight.c **** 
  62:quantum/rgblight.c ****   if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
  49               		.loc 1 62 0
  50 000e 6623      		tst r22
  51 0010 01F4      		brne .+2
  52 0012 00C0      		rjmp .L10
  63:quantum/rgblight.c ****     r = val;
  64:quantum/rgblight.c ****     g = val;
  65:quantum/rgblight.c ****     b = val;
  66:quantum/rgblight.c ****   } else {
  67:quantum/rgblight.c ****     base = ((255 - sat) * val) >> 8;
  53               		.loc 1 67 0
  54 0014 242F      		mov r18,r20
  55               	.LVL2:
  56 0016 30E0      		ldi r19,0
  57 0018 EFEF      		ldi r30,lo8(-1)
  58 001a F0E0      		ldi r31,0
  59 001c E61B      		sub r30,r22
  60 001e F109      		sbc r31,__zero_reg__
  61 0020 B901      		movw r22,r18
  62               	.LVL3:
  63 0022 E69F      		mul r30,r22
  64 0024 9001      		movw r18,r0
  65 0026 E79F      		mul r30,r23
  66 0028 300D      		add r19,r0
  67 002a F69F      		mul r31,r22
  68 002c 300D      		add r19,r0
  69 002e 1124      		clr r1
  70 0030 232F      		mov r18,r19
  71               	.LVL4:
  68:quantum/rgblight.c ****     color = (val - base) * (hue % 60) / 60;
  72               		.loc 1 68 0
  73 0032 8B01      		movw r16,r22
  74 0034 031B      		sub r16,r19
  75 0036 1109      		sbc r17,__zero_reg__
  76 0038 5CE3      		ldi r21,lo8(60)
  77 003a E52E      		mov r14,r21
  78 003c F12C      		mov r15,__zero_reg__
  79 003e B701      		movw r22,r14
  80 0040 0E94 0000 		call __udivmodhi4
  81               	.LVL5:
  82 0044 FB01      		movw r30,r22
  83 0046 BC01      		movw r22,r24
  84 0048 069F      		mul r16,r22
  85 004a C001      		movw r24,r0
  86 004c 079F      		mul r16,r23
  87 004e 900D      		add r25,r0
  88 0050 169F      		mul r17,r22
  89 0052 900D      		add r25,r0
  90 0054 1124      		clr r1
  91 0056 B701      		movw r22,r14
  92 0058 0E94 0000 		call __udivmodhi4
  93               	.LVL6:
  69:quantum/rgblight.c **** 
  70:quantum/rgblight.c ****     switch (hue / 60) {
  94               		.loc 1 70 0
  95 005c E230      		cpi r30,2
  96 005e F105      		cpc r31,__zero_reg__
  97 0060 01F0      		breq .L3
  98 0062 00F4      		brsh .L4
  99 0064 3097      		sbiw r30,0
 100 0066 01F0      		breq .L5
 101 0068 3197      		sbiw r30,1
 102 006a 01F4      		brne .L11
 103               	.LVL7:
  71:quantum/rgblight.c ****       case 0:
  72:quantum/rgblight.c ****         r = val;
  73:quantum/rgblight.c ****         g = base + color;
  74:quantum/rgblight.c ****         b = base;
  75:quantum/rgblight.c ****         break;
  76:quantum/rgblight.c ****       case 1:
  77:quantum/rgblight.c ****         r = val - color;
  78:quantum/rgblight.c ****         g = val;
  79:quantum/rgblight.c ****         b = base;
 104               		.loc 1 79 0
 105 006c 832F      		mov r24,r19
  78:quantum/rgblight.c ****         b = base;
 106               		.loc 1 78 0
 107 006e 242F      		mov r18,r20
  77:quantum/rgblight.c ****         g = val;
 108               		.loc 1 77 0
 109 0070 461B      		sub r20,r22
 110               	.LVL8:
  80:quantum/rgblight.c ****         break;
 111               		.loc 1 80 0
 112 0072 00C0      		rjmp .L2
 113               	.LVL9:
 114               	.L4:
  70:quantum/rgblight.c ****       case 0:
 115               		.loc 1 70 0
 116 0074 E430      		cpi r30,4
 117 0076 F105      		cpc r31,__zero_reg__
 118 0078 01F0      		breq .L7
 119 007a 00F0      		brlo .L8
 120 007c 3597      		sbiw r30,5
 121 007e 01F4      		brne .L11
 122               	.LVL10:
  81:quantum/rgblight.c ****       case 2:
  82:quantum/rgblight.c ****         r = base;
  83:quantum/rgblight.c ****         g = val;
  84:quantum/rgblight.c ****         b = base + color;
  85:quantum/rgblight.c ****         break;
  86:quantum/rgblight.c ****       case 3:
  87:quantum/rgblight.c ****         r = base;
  88:quantum/rgblight.c ****         g = val - color;
  89:quantum/rgblight.c ****         b = val;
  90:quantum/rgblight.c ****         break;
  91:quantum/rgblight.c ****       case 4:
  92:quantum/rgblight.c ****         r = base + color;
  93:quantum/rgblight.c ****         g = base;
  94:quantum/rgblight.c ****         b = val;
  95:quantum/rgblight.c ****         break;
  96:quantum/rgblight.c ****       case 5:
  97:quantum/rgblight.c ****         r = val;
  98:quantum/rgblight.c ****         g = base;
  99:quantum/rgblight.c ****         b = val - color;
 123               		.loc 1 99 0
 124 0080 842F      		mov r24,r20
 125 0082 861B      		sub r24,r22
 126               	.LVL11:
 100:quantum/rgblight.c ****         break;
 127               		.loc 1 100 0
 128 0084 00C0      		rjmp .L2
 129               	.LVL12:
 130               	.L5:
  74:quantum/rgblight.c ****         break;
 131               		.loc 1 74 0
 132 0086 832F      		mov r24,r19
  73:quantum/rgblight.c ****         b = base;
 133               		.loc 1 73 0
 134 0088 262F      		mov r18,r22
 135               	.LVL13:
 136 008a 230F      		add r18,r19
 137               	.LVL14:
  75:quantum/rgblight.c ****       case 1:
 138               		.loc 1 75 0
 139 008c 00C0      		rjmp .L2
 140               	.LVL15:
 141               	.L3:
  84:quantum/rgblight.c ****         break;
 142               		.loc 1 84 0
 143 008e 862F      		mov r24,r22
 144 0090 830F      		add r24,r19
 145               	.LVL16:
  85:quantum/rgblight.c ****       case 3:
 146               		.loc 1 85 0
 147 0092 E42F      		mov r30,r20
 148 0094 00C0      		rjmp .L12
 149               	.LVL17:
 150               	.L8:
  88:quantum/rgblight.c ****         b = val;
 151               		.loc 1 88 0
 152 0096 E42F      		mov r30,r20
 153 0098 E61B      		sub r30,r22
 154               	.LVL18:
  89:quantum/rgblight.c ****         break;
 155               		.loc 1 89 0
 156 009a 842F      		mov r24,r20
 157               	.LVL19:
 158               	.L12:
  87:quantum/rgblight.c ****         g = val - color;
 159               		.loc 1 87 0
 160 009c 432F      		mov r20,r19
 161               	.LVL20:
  88:quantum/rgblight.c ****         b = val;
 162               		.loc 1 88 0
 163 009e 2E2F      		mov r18,r30
  90:quantum/rgblight.c ****       case 4:
 164               		.loc 1 90 0
 165 00a0 00C0      		rjmp .L2
 166               	.LVL21:
 167               	.L7:
  94:quantum/rgblight.c ****         break;
 168               		.loc 1 94 0
 169 00a2 842F      		mov r24,r20
  92:quantum/rgblight.c ****         g = base;
 170               		.loc 1 92 0
 171 00a4 462F      		mov r20,r22
 172               	.LVL22:
 173 00a6 430F      		add r20,r19
 174               	.LVL23:
  95:quantum/rgblight.c ****       case 5:
 175               		.loc 1 95 0
 176 00a8 00C0      		rjmp .L2
 177               	.LVL24:
 178               	.L10:
  65:quantum/rgblight.c ****   } else {
 179               		.loc 1 65 0
 180 00aa 842F      		mov r24,r20
 181               	.LVL25:
  64:quantum/rgblight.c ****     b = val;
 182               		.loc 1 64 0
 183 00ac 242F      		mov r18,r20
 184               	.LVL26:
 185 00ae 00C0      		rjmp .L2
 186               	.LVL27:
 187               	.L11:
  56:quantum/rgblight.c **** 
 188               		.loc 1 56 0
 189 00b0 80E0      		ldi r24,0
 190 00b2 20E0      		ldi r18,0
 191 00b4 40E0      		ldi r20,0
 192               	.LVL28:
 193               	.L2:
 194               	.LBB13:
 101:quantum/rgblight.c ****     }
 102:quantum/rgblight.c ****   }
 103:quantum/rgblight.c ****   r = pgm_read_byte(&CIE1931_CURVE[r]);
 195               		.loc 1 103 0
 196 00b6 E42F      		mov r30,r20
 197 00b8 F0E0      		ldi r31,0
 198 00ba E050      		subi r30,lo8(-(CIE1931_CURVE))
 199 00bc F040      		sbci r31,hi8(-(CIE1931_CURVE))
 200               	/* #APP */
 201               	 ;  103 "quantum/rgblight.c" 1
 202 00be 4491      		lpm r20, Z
 203               		
 204               	 ;  0 "" 2
 205               	.LVL29:
 206               	/* #NOAPP */
 207               	.LBE13:
 208               	.LBB14:
 104:quantum/rgblight.c ****   g = pgm_read_byte(&CIE1931_CURVE[g]);
 209               		.loc 1 104 0
 210 00c0 E22F      		mov r30,r18
 211 00c2 F0E0      		ldi r31,0
 212 00c4 E050      		subi r30,lo8(-(CIE1931_CURVE))
 213 00c6 F040      		sbci r31,hi8(-(CIE1931_CURVE))
 214               	/* #APP */
 215               	 ;  104 "quantum/rgblight.c" 1
 216 00c8 9491      		lpm r25, Z
 217               		
 218               	 ;  0 "" 2
 219               	.LVL30:
 220               	/* #NOAPP */
 221               	.LBE14:
 222               	.LBB15:
 105:quantum/rgblight.c ****   b = pgm_read_byte(&CIE1931_CURVE[b]);
 223               		.loc 1 105 0
 224 00ca E82F      		mov r30,r24
 225 00cc F0E0      		ldi r31,0
 226 00ce E050      		subi r30,lo8(-(CIE1931_CURVE))
 227 00d0 F040      		sbci r31,hi8(-(CIE1931_CURVE))
 228               	/* #APP */
 229               	 ;  105 "quantum/rgblight.c" 1
 230 00d2 E491      		lpm r30, Z
 231               		
 232               	 ;  0 "" 2
 233               	.LVL31:
 234               	/* #NOAPP */
 235               	.LBE15:
 236               	.LBB16:
 237               	.LBB17:
 106:quantum/rgblight.c **** 
 107:quantum/rgblight.c ****   setrgb(r, g, b, led1);
 108:quantum/rgblight.c **** }
 109:quantum/rgblight.c **** 
 110:quantum/rgblight.c **** void setrgb(uint8_t r, uint8_t g, uint8_t b, LED_TYPE *led1) {
 111:quantum/rgblight.c ****   (*led1).r = r;
 238               		.loc 1 111 0
 239 00d4 4983      		std Y+1,r20
 112:quantum/rgblight.c ****   (*led1).g = g;
 240               		.loc 1 112 0
 241 00d6 9883      		st Y,r25
 113:quantum/rgblight.c ****   (*led1).b = b;
 242               		.loc 1 113 0
 243 00d8 EA83      		std Y+2,r30
 244               	/* epilogue start */
 245               	.LBE17:
 246               	.LBE16:
 108:quantum/rgblight.c **** 
 247               		.loc 1 108 0
 248 00da DF91      		pop r29
 249 00dc CF91      		pop r28
 250               	.LVL32:
 251 00de 1F91      		pop r17
 252 00e0 0F91      		pop r16
 253 00e2 FF90      		pop r15
 254 00e4 EF90      		pop r14
 255 00e6 0895      		ret
 256               		.cfi_endproc
 257               	.LFE7:
 259               		.section	.text.setrgb,"ax",@progbits
 260               	.global	setrgb
 262               	setrgb:
 263               	.LFB8:
 110:quantum/rgblight.c ****   (*led1).r = r;
 264               		.loc 1 110 0
 265               		.cfi_startproc
 266               	.LVL33:
 267               	/* prologue: function */
 268               	/* frame size = 0 */
 269               	/* stack size = 0 */
 270               	.L__stack_usage = 0
 271 0000 F901      		movw r30,r18
 111:quantum/rgblight.c ****   (*led1).g = g;
 272               		.loc 1 111 0
 273 0002 8183      		std Z+1,r24
 112:quantum/rgblight.c ****   (*led1).b = b;
 274               		.loc 1 112 0
 275 0004 6083      		st Z,r22
 276               		.loc 1 113 0
 277 0006 4283      		std Z+2,r20
 278 0008 0895      		ret
 279               		.cfi_endproc
 280               	.LFE8:
 282               		.section	.text.eeconfig_read_rgblight,"ax",@progbits
 283               	.global	eeconfig_read_rgblight
 285               	eeconfig_read_rgblight:
 286               	.LFB9:
 114:quantum/rgblight.c **** }
 115:quantum/rgblight.c **** 
 116:quantum/rgblight.c **** 
 117:quantum/rgblight.c **** uint32_t eeconfig_read_rgblight(void) {
 287               		.loc 1 117 0
 288               		.cfi_startproc
 289               	/* prologue: function */
 290               	/* frame size = 0 */
 291               	/* stack size = 0 */
 292               	.L__stack_usage = 0
 118:quantum/rgblight.c ****   #ifdef __AVR__
 119:quantum/rgblight.c ****     return eeprom_read_dword(EECONFIG_RGBLIGHT);
 293               		.loc 1 119 0
 294 0000 88E0      		ldi r24,lo8(8)
 295 0002 90E0      		ldi r25,0
 296 0004 0C94 0000 		jmp eeprom_read_dword
 297               	.LVL34:
 298               		.cfi_endproc
 299               	.LFE9:
 301               		.section	.text.eeconfig_update_rgblight,"ax",@progbits
 302               	.global	eeconfig_update_rgblight
 304               	eeconfig_update_rgblight:
 305               	.LFB10:
 120:quantum/rgblight.c ****   #else
 121:quantum/rgblight.c ****     return 0;
 122:quantum/rgblight.c ****   #endif
 123:quantum/rgblight.c **** }
 124:quantum/rgblight.c **** void eeconfig_update_rgblight(uint32_t val) {
 306               		.loc 1 124 0
 307               		.cfi_startproc
 308               	.LVL35:
 309               	/* prologue: function */
 310               	/* frame size = 0 */
 311               	/* stack size = 0 */
 312               	.L__stack_usage = 0
 313 0000 AB01      		movw r20,r22
 314 0002 BC01      		movw r22,r24
 125:quantum/rgblight.c ****   #ifdef __AVR__
 126:quantum/rgblight.c ****     eeprom_update_dword(EECONFIG_RGBLIGHT, val);
 315               		.loc 1 126 0
 316 0004 88E0      		ldi r24,lo8(8)
 317 0006 90E0      		ldi r25,0
 318 0008 0C94 0000 		jmp eeprom_update_dword
 319               	.LVL36:
 320               		.cfi_endproc
 321               	.LFE10:
 323               		.section	.text.eeconfig_update_rgblight_default,"ax",@progbits
 324               	.global	eeconfig_update_rgblight_default
 326               	eeconfig_update_rgblight_default:
 327               	.LFB11:
 127:quantum/rgblight.c ****   #endif
 128:quantum/rgblight.c **** }
 129:quantum/rgblight.c **** void eeconfig_update_rgblight_default(void) {
 328               		.loc 1 129 0
 329               		.cfi_startproc
 330               	/* prologue: function */
 331               	/* frame size = 0 */
 332               	/* stack size = 0 */
 333               	.L__stack_usage = 0
 130:quantum/rgblight.c ****   //dprintf("eeconfig_update_rgblight_default\n");
 131:quantum/rgblight.c ****   rgblight_config.enable = 1;
 334               		.loc 1 131 0
 335 0000 E0E0      		ldi r30,lo8(rgblight_config)
 336 0002 F0E0      		ldi r31,hi8(rgblight_config)
 132:quantum/rgblight.c ****   rgblight_config.mode = 1;
 133:quantum/rgblight.c ****   rgblight_config.hue = 0;
 337               		.loc 1 133 0
 338 0004 83E0      		ldi r24,lo8(3)
 339 0006 8083      		st Z,r24
 340 0008 1092 0000 		sts rgblight_config+1,__zero_reg__
 134:quantum/rgblight.c ****   rgblight_config.sat = 255;
 341               		.loc 1 134 0
 342 000c 8FEF      		ldi r24,lo8(-1)
 343 000e 8283      		std Z+2,r24
 135:quantum/rgblight.c ****   rgblight_config.val = RGBLIGHT_LIMIT_VAL;
 344               		.loc 1 135 0
 345 0010 8383      		std Z+3,r24
 136:quantum/rgblight.c ****   rgblight_config.speed = 0;
 346               		.loc 1 136 0
 347 0012 1482      		std Z+4,__zero_reg__
 137:quantum/rgblight.c ****   eeconfig_update_rgblight(rgblight_config.raw);
 348               		.loc 1 137 0
 349 0014 6081      		ld r22,Z
 350 0016 7181      		ldd r23,Z+1
 351 0018 8281      		ldd r24,Z+2
 352 001a 9381      		ldd r25,Z+3
 353 001c 0C94 0000 		jmp eeconfig_update_rgblight
 354               	.LVL37:
 355               		.cfi_endproc
 356               	.LFE11:
 358               		.section	.text.eeconfig_debug_rgblight,"ax",@progbits
 359               	.global	eeconfig_debug_rgblight
 361               	eeconfig_debug_rgblight:
 362               	.LFB12:
 138:quantum/rgblight.c **** }
 139:quantum/rgblight.c **** void eeconfig_debug_rgblight(void) {
 363               		.loc 1 139 0
 364               		.cfi_startproc
 365               	/* prologue: function */
 366               	/* frame size = 0 */
 367               	/* stack size = 0 */
 368               	.L__stack_usage = 0
 140:quantum/rgblight.c ****   dprintf("rgblight_config eprom\n");
 369               		.loc 1 140 0
 370 0000 8091 0000 		lds r24,debug_config
 371 0004 80FF      		sbrs r24,0
 372 0006 00C0      		rjmp .L19
 373               		.loc 1 140 0 is_stmt 0 discriminator 1
 374 0008 80E0      		ldi r24,lo8(__c.2141)
 375 000a 90E0      		ldi r25,hi8(__c.2141)
 376 000c 9F93      		push r25
 377               	.LCFI6:
 378               		.cfi_def_cfa_offset 3
 379 000e 8F93      		push r24
 380               	.LCFI7:
 381               		.cfi_def_cfa_offset 4
 382 0010 0E94 0000 		call __xprintf
 383               	.LVL38:
 384 0014 0F90      		pop __tmp_reg__
 385 0016 0F90      		pop __tmp_reg__
 386               	.LCFI8:
 387               		.cfi_def_cfa_offset 2
 388               	.L19:
 141:quantum/rgblight.c ****   dprintf("rgblight_config.enable = %d\n", rgblight_config.enable);
 389               		.loc 1 141 0 is_stmt 1
 390 0018 8091 0000 		lds r24,debug_config
 391 001c 80FF      		sbrs r24,0
 392 001e 00C0      		rjmp .L20
 393               		.loc 1 141 0 is_stmt 0 discriminator 1
 394 0020 8091 0000 		lds r24,rgblight_config
 395 0024 8170      		andi r24,1
 396 0026 1F92      		push __zero_reg__
 397               	.LCFI9:
 398               		.cfi_def_cfa_offset 3
 399 0028 8F93      		push r24
 400               	.LCFI10:
 401               		.cfi_def_cfa_offset 4
 402 002a 80E0      		ldi r24,lo8(__c.2143)
 403 002c 90E0      		ldi r25,hi8(__c.2143)
 404 002e 9F93      		push r25
 405               	.LCFI11:
 406               		.cfi_def_cfa_offset 5
 407 0030 8F93      		push r24
 408               	.LCFI12:
 409               		.cfi_def_cfa_offset 6
 410 0032 0E94 0000 		call __xprintf
 411               	.LVL39:
 412 0036 0F90      		pop __tmp_reg__
 413 0038 0F90      		pop __tmp_reg__
 414 003a 0F90      		pop __tmp_reg__
 415 003c 0F90      		pop __tmp_reg__
 416               	.LCFI13:
 417               		.cfi_def_cfa_offset 2
 418               	.L20:
 142:quantum/rgblight.c ****   dprintf("rghlight_config.mode = %d\n", rgblight_config.mode);
 419               		.loc 1 142 0 is_stmt 1
 420 003e 8091 0000 		lds r24,debug_config
 421 0042 80FF      		sbrs r24,0
 422 0044 00C0      		rjmp .L21
 423               		.loc 1 142 0 is_stmt 0 discriminator 1
 424 0046 8091 0000 		lds r24,rgblight_config
 425 004a 8695      		lsr r24
 426 004c 8F73      		andi r24,lo8(63)
 427 004e 1F92      		push __zero_reg__
 428               	.LCFI14:
 429               		.cfi_def_cfa_offset 3
 430 0050 8F93      		push r24
 431               	.LCFI15:
 432               		.cfi_def_cfa_offset 4
 433 0052 80E0      		ldi r24,lo8(__c.2145)
 434 0054 90E0      		ldi r25,hi8(__c.2145)
 435 0056 9F93      		push r25
 436               	.LCFI16:
 437               		.cfi_def_cfa_offset 5
 438 0058 8F93      		push r24
 439               	.LCFI17:
 440               		.cfi_def_cfa_offset 6
 441 005a 0E94 0000 		call __xprintf
 442               	.LVL40:
 443 005e 0F90      		pop __tmp_reg__
 444 0060 0F90      		pop __tmp_reg__
 445 0062 0F90      		pop __tmp_reg__
 446 0064 0F90      		pop __tmp_reg__
 447               	.LCFI18:
 448               		.cfi_def_cfa_offset 2
 449               	.L21:
 143:quantum/rgblight.c ****   dprintf("rgblight_config.hue = %d\n", rgblight_config.hue);
 450               		.loc 1 143 0 is_stmt 1
 451 0066 8091 0000 		lds r24,debug_config
 452 006a 80FF      		sbrs r24,0
 453 006c 00C0      		rjmp .L22
 454               		.loc 1 143 0 is_stmt 0 discriminator 1
 455 006e 8091 0000 		lds r24,rgblight_config
 456 0072 881F      		rol r24
 457 0074 8827      		clr r24
 458 0076 881F      		rol r24
 459 0078 9091 0000 		lds r25,rgblight_config+1
 460 007c 292F      		mov r18,r25
 461 007e 220F      		lsl r18
 462 0080 822B      		or r24,r18
 463 0082 97FB      		bst r25,7
 464 0084 9927      		clr r25
 465 0086 90F9      		bld r25,0
 466 0088 9F93      		push r25
 467               	.LCFI19:
 468               		.cfi_def_cfa_offset 3
 469 008a 8F93      		push r24
 470               	.LCFI20:
 471               		.cfi_def_cfa_offset 4
 472 008c 80E0      		ldi r24,lo8(__c.2147)
 473 008e 90E0      		ldi r25,hi8(__c.2147)
 474 0090 9F93      		push r25
 475               	.LCFI21:
 476               		.cfi_def_cfa_offset 5
 477 0092 8F93      		push r24
 478               	.LCFI22:
 479               		.cfi_def_cfa_offset 6
 480 0094 0E94 0000 		call __xprintf
 481               	.LVL41:
 482 0098 0F90      		pop __tmp_reg__
 483 009a 0F90      		pop __tmp_reg__
 484 009c 0F90      		pop __tmp_reg__
 485 009e 0F90      		pop __tmp_reg__
 486               	.LCFI23:
 487               		.cfi_def_cfa_offset 2
 488               	.L22:
 144:quantum/rgblight.c ****   dprintf("rgblight_config.sat = %d\n", rgblight_config.sat);
 489               		.loc 1 144 0 is_stmt 1
 490 00a0 8091 0000 		lds r24,debug_config
 491 00a4 80FF      		sbrs r24,0
 492 00a6 00C0      		rjmp .L23
 493               		.loc 1 144 0 is_stmt 0 discriminator 1
 494 00a8 8091 0000 		lds r24,rgblight_config+2
 495 00ac 1F92      		push __zero_reg__
 496               	.LCFI24:
 497               		.cfi_def_cfa_offset 3
 498 00ae 8F93      		push r24
 499               	.LCFI25:
 500               		.cfi_def_cfa_offset 4
 501 00b0 80E0      		ldi r24,lo8(__c.2149)
 502 00b2 90E0      		ldi r25,hi8(__c.2149)
 503 00b4 9F93      		push r25
 504               	.LCFI26:
 505               		.cfi_def_cfa_offset 5
 506 00b6 8F93      		push r24
 507               	.LCFI27:
 508               		.cfi_def_cfa_offset 6
 509 00b8 0E94 0000 		call __xprintf
 510               	.LVL42:
 511 00bc 0F90      		pop __tmp_reg__
 512 00be 0F90      		pop __tmp_reg__
 513 00c0 0F90      		pop __tmp_reg__
 514 00c2 0F90      		pop __tmp_reg__
 515               	.LCFI28:
 516               		.cfi_def_cfa_offset 2
 517               	.L23:
 145:quantum/rgblight.c ****   dprintf("rgblight_config.val = %d\n", rgblight_config.val);
 518               		.loc 1 145 0 is_stmt 1
 519 00c4 8091 0000 		lds r24,debug_config
 520 00c8 80FF      		sbrs r24,0
 521 00ca 00C0      		rjmp .L24
 522               		.loc 1 145 0 is_stmt 0 discriminator 1
 523 00cc 8091 0000 		lds r24,rgblight_config+3
 524 00d0 1F92      		push __zero_reg__
 525               	.LCFI29:
 526               		.cfi_def_cfa_offset 3
 527 00d2 8F93      		push r24
 528               	.LCFI30:
 529               		.cfi_def_cfa_offset 4
 530 00d4 80E0      		ldi r24,lo8(__c.2151)
 531 00d6 90E0      		ldi r25,hi8(__c.2151)
 532 00d8 9F93      		push r25
 533               	.LCFI31:
 534               		.cfi_def_cfa_offset 5
 535 00da 8F93      		push r24
 536               	.LCFI32:
 537               		.cfi_def_cfa_offset 6
 538 00dc 0E94 0000 		call __xprintf
 539               	.LVL43:
 540 00e0 0F90      		pop __tmp_reg__
 541 00e2 0F90      		pop __tmp_reg__
 542 00e4 0F90      		pop __tmp_reg__
 543 00e6 0F90      		pop __tmp_reg__
 544               	.LCFI33:
 545               		.cfi_def_cfa_offset 2
 546               	.L24:
 146:quantum/rgblight.c ****   dprintf("rgblight_config.speed = %d\n", rgblight_config.speed);
 547               		.loc 1 146 0 is_stmt 1
 548 00e8 8091 0000 		lds r24,debug_config
 549 00ec 80FF      		sbrs r24,0
 550 00ee 00C0      		rjmp .L18
 551               		.loc 1 146 0 is_stmt 0 discriminator 1
 552 00f0 8091 0000 		lds r24,rgblight_config+4
 553 00f4 1F92      		push __zero_reg__
 554               	.LCFI34:
 555               		.cfi_def_cfa_offset 3
 556 00f6 8F93      		push r24
 557               	.LCFI35:
 558               		.cfi_def_cfa_offset 4
 559 00f8 80E0      		ldi r24,lo8(__c.2153)
 560 00fa 90E0      		ldi r25,hi8(__c.2153)
 561 00fc 9F93      		push r25
 562               	.LCFI36:
 563               		.cfi_def_cfa_offset 5
 564 00fe 8F93      		push r24
 565               	.LCFI37:
 566               		.cfi_def_cfa_offset 6
 567 0100 0E94 0000 		call __xprintf
 568               	.LVL44:
 569 0104 0F90      		pop __tmp_reg__
 570 0106 0F90      		pop __tmp_reg__
 571 0108 0F90      		pop __tmp_reg__
 572 010a 0F90      		pop __tmp_reg__
 573               	.LCFI38:
 574               		.cfi_def_cfa_offset 2
 575               	.L18:
 576 010c 0895      		ret
 577               		.cfi_endproc
 578               	.LFE12:
 580               		.section	.text.rgblight_get_mode,"ax",@progbits
 581               	.global	rgblight_get_mode
 583               	rgblight_get_mode:
 584               	.LFB19:
 147:quantum/rgblight.c **** }
 148:quantum/rgblight.c **** 
 149:quantum/rgblight.c **** void rgblight_init(void) {
 150:quantum/rgblight.c ****   debug_enable = 1; // Debug ON!
 151:quantum/rgblight.c ****   dprintf("rgblight_init called.\n");
 152:quantum/rgblight.c ****   dprintf("rgblight_init start!\n");
 153:quantum/rgblight.c ****   if (!eeconfig_is_enabled()) {
 154:quantum/rgblight.c ****     dprintf("rgblight_init eeconfig is not enabled.\n");
 155:quantum/rgblight.c ****     eeconfig_init();
 156:quantum/rgblight.c ****     eeconfig_update_rgblight_default();
 157:quantum/rgblight.c ****   }
 158:quantum/rgblight.c ****   rgblight_config.raw = eeconfig_read_rgblight();
 159:quantum/rgblight.c ****   if (!rgblight_config.mode) {
 160:quantum/rgblight.c ****     dprintf("rgblight_init rgblight_config.mode = 0. Write default values to EEPROM.\n");
 161:quantum/rgblight.c ****     eeconfig_update_rgblight_default();
 162:quantum/rgblight.c ****     rgblight_config.raw = eeconfig_read_rgblight();
 163:quantum/rgblight.c ****   }
 164:quantum/rgblight.c ****   eeconfig_debug_rgblight(); // display current eeprom values
 165:quantum/rgblight.c **** 
 166:quantum/rgblight.c ****   #ifdef RGBLIGHT_ANIMATIONS
 167:quantum/rgblight.c ****     rgblight_timer_init(); // setup the timer
 168:quantum/rgblight.c ****   #endif
 169:quantum/rgblight.c **** 
 170:quantum/rgblight.c ****   if (rgblight_config.enable) {
 171:quantum/rgblight.c ****     rgblight_mode_noeeprom(rgblight_config.mode);
 172:quantum/rgblight.c ****   }
 173:quantum/rgblight.c **** }
 174:quantum/rgblight.c **** 
 175:quantum/rgblight.c **** void rgblight_update_dword(uint32_t dword) {
 176:quantum/rgblight.c ****   rgblight_config.raw = dword;
 177:quantum/rgblight.c ****   eeconfig_update_rgblight(rgblight_config.raw);
 178:quantum/rgblight.c ****   if (rgblight_config.enable)
 179:quantum/rgblight.c ****     rgblight_mode(rgblight_config.mode);
 180:quantum/rgblight.c ****   else {
 181:quantum/rgblight.c ****     #ifdef RGBLIGHT_ANIMATIONS
 182:quantum/rgblight.c ****       rgblight_timer_disable();
 183:quantum/rgblight.c ****     #endif
 184:quantum/rgblight.c ****       rgblight_set();
 185:quantum/rgblight.c ****   }
 186:quantum/rgblight.c **** }
 187:quantum/rgblight.c **** 
 188:quantum/rgblight.c **** void rgblight_increase(void) {
 189:quantum/rgblight.c ****   uint8_t mode = 0;
 190:quantum/rgblight.c ****   if (rgblight_config.mode < RGBLIGHT_MODES) {
 191:quantum/rgblight.c ****     mode = rgblight_config.mode + 1;
 192:quantum/rgblight.c ****   }
 193:quantum/rgblight.c ****   rgblight_mode(mode);
 194:quantum/rgblight.c **** }
 195:quantum/rgblight.c **** void rgblight_decrease(void) {
 196:quantum/rgblight.c ****   uint8_t mode = 0;
 197:quantum/rgblight.c ****   // Mode will never be < 1. If it ever is, eeprom needs to be initialized.
 198:quantum/rgblight.c ****   if (rgblight_config.mode > 1) {
 199:quantum/rgblight.c ****     mode = rgblight_config.mode - 1;
 200:quantum/rgblight.c ****   }
 201:quantum/rgblight.c ****   rgblight_mode(mode);
 202:quantum/rgblight.c **** }
 203:quantum/rgblight.c **** void rgblight_step(void) {
 204:quantum/rgblight.c ****   uint8_t mode = 0;
 205:quantum/rgblight.c ****   mode = rgblight_config.mode + 1;
 206:quantum/rgblight.c ****   if (mode > RGBLIGHT_MODES) {
 207:quantum/rgblight.c ****     mode = 1;
 208:quantum/rgblight.c ****   }
 209:quantum/rgblight.c ****   rgblight_mode(mode);
 210:quantum/rgblight.c **** }
 211:quantum/rgblight.c **** void rgblight_step_reverse(void) {
 212:quantum/rgblight.c ****   uint8_t mode = 0;
 213:quantum/rgblight.c ****   mode = rgblight_config.mode - 1;
 214:quantum/rgblight.c ****   if (mode < 1) {
 215:quantum/rgblight.c ****     mode = RGBLIGHT_MODES;
 216:quantum/rgblight.c ****   }
 217:quantum/rgblight.c ****   rgblight_mode(mode);
 218:quantum/rgblight.c **** }
 219:quantum/rgblight.c **** 
 220:quantum/rgblight.c **** uint32_t rgblight_get_mode(void) {
 585               		.loc 1 220 0 is_stmt 1
 586               		.cfi_startproc
 587               	/* prologue: function */
 588               	/* frame size = 0 */
 589               	/* stack size = 0 */
 590               	.L__stack_usage = 0
 221:quantum/rgblight.c ****   if (!rgblight_config.enable) {
 591               		.loc 1 221 0
 592 0000 6091 0000 		lds r22,rgblight_config
 593 0004 60FF      		sbrs r22,0
 594 0006 00C0      		rjmp .L49
 222:quantum/rgblight.c ****     return false;
 223:quantum/rgblight.c ****   }
 224:quantum/rgblight.c **** 
 225:quantum/rgblight.c ****   return rgblight_config.mode;
 595               		.loc 1 225 0
 596 0008 6695      		lsr r22
 597 000a 6F73      		andi r22,lo8(63)
 598 000c 70E0      		ldi r23,0
 599 000e 80E0      		ldi r24,0
 600 0010 90E0      		ldi r25,0
 601 0012 0895      		ret
 602               	.L49:
 222:quantum/rgblight.c ****     return false;
 603               		.loc 1 222 0
 604 0014 60E0      		ldi r22,0
 605 0016 70E0      		ldi r23,0
 606 0018 CB01      		movw r24,r22
 226:quantum/rgblight.c **** }
 607               		.loc 1 226 0
 608 001a 0895      		ret
 609               		.cfi_endproc
 610               	.LFE19:
 612               		.section	.text.increment,"ax",@progbits
 613               	.global	increment
 615               	increment:
 616               	.LFB29:
 227:quantum/rgblight.c **** 
 228:quantum/rgblight.c **** void rgblight_mode_eeprom_helper(uint8_t mode, bool write_to_eeprom) {
 229:quantum/rgblight.c ****   if (!rgblight_config.enable) {
 230:quantum/rgblight.c ****     return;
 231:quantum/rgblight.c ****   }
 232:quantum/rgblight.c ****   if (mode < 1) {
 233:quantum/rgblight.c ****     rgblight_config.mode = 1;
 234:quantum/rgblight.c ****   } else if (mode > RGBLIGHT_MODES) {
 235:quantum/rgblight.c ****     rgblight_config.mode = RGBLIGHT_MODES;
 236:quantum/rgblight.c ****   } else {
 237:quantum/rgblight.c ****     rgblight_config.mode = mode;
 238:quantum/rgblight.c ****   }
 239:quantum/rgblight.c ****   if (write_to_eeprom) {
 240:quantum/rgblight.c ****     eeconfig_update_rgblight(rgblight_config.raw);
 241:quantum/rgblight.c ****     xprintf("rgblight mode [EEPROM]: %u\n", rgblight_config.mode);
 242:quantum/rgblight.c ****   } else {
 243:quantum/rgblight.c ****     xprintf("rgblight mode [NOEEPROM]: %u\n", rgblight_config.mode);
 244:quantum/rgblight.c ****   }
 245:quantum/rgblight.c ****   if (rgblight_config.mode == 1) {
 246:quantum/rgblight.c ****     #ifdef RGBLIGHT_ANIMATIONS
 247:quantum/rgblight.c ****       rgblight_timer_disable();
 248:quantum/rgblight.c ****     #endif
 249:quantum/rgblight.c ****   } else if ((rgblight_config.mode >= 2 && rgblight_config.mode <= 24) ||
 250:quantum/rgblight.c **** 	     rgblight_config.mode == 35 || rgblight_config.mode == 36) {
 251:quantum/rgblight.c ****     // MODE 2-5, breathing
 252:quantum/rgblight.c ****     // MODE 6-8, rainbow mood
 253:quantum/rgblight.c ****     // MODE 9-14, rainbow swirl
 254:quantum/rgblight.c ****     // MODE 15-20, snake
 255:quantum/rgblight.c ****     // MODE 21-23, knight
 256:quantum/rgblight.c ****     // MODE 24, xmas
 257:quantum/rgblight.c ****     // MODE 35  RGB test
 258:quantum/rgblight.c ****     // MODE 36, alterating
 259:quantum/rgblight.c **** 
 260:quantum/rgblight.c ****     #ifdef RGBLIGHT_ANIMATIONS
 261:quantum/rgblight.c ****       rgblight_timer_enable();
 262:quantum/rgblight.c ****     #endif
 263:quantum/rgblight.c ****   } else if (rgblight_config.mode >= 25 && rgblight_config.mode <= 34) {
 264:quantum/rgblight.c ****     // MODE 25-34, static gradient
 265:quantum/rgblight.c **** 
 266:quantum/rgblight.c ****     #ifdef RGBLIGHT_ANIMATIONS
 267:quantum/rgblight.c ****       rgblight_timer_disable();
 268:quantum/rgblight.c ****     #endif
 269:quantum/rgblight.c ****   }
 270:quantum/rgblight.c ****   rgblight_sethsv_noeeprom(rgblight_config.hue, rgblight_config.sat, rgblight_config.val);
 271:quantum/rgblight.c **** }
 272:quantum/rgblight.c **** 
 273:quantum/rgblight.c **** void rgblight_mode(uint8_t mode) {
 274:quantum/rgblight.c ****   rgblight_mode_eeprom_helper(mode, true);
 275:quantum/rgblight.c **** }
 276:quantum/rgblight.c **** 
 277:quantum/rgblight.c **** void rgblight_mode_noeeprom(uint8_t mode) {
 278:quantum/rgblight.c ****   rgblight_mode_eeprom_helper(mode, false);
 279:quantum/rgblight.c **** }
 280:quantum/rgblight.c **** 
 281:quantum/rgblight.c **** 
 282:quantum/rgblight.c **** void rgblight_toggle(void) {
 283:quantum/rgblight.c ****   xprintf("rgblight toggle [EEPROM]: rgblight_config.enable = %u\n", !rgblight_config.enable);
 284:quantum/rgblight.c ****   if (rgblight_config.enable) {
 285:quantum/rgblight.c ****     rgblight_disable();
 286:quantum/rgblight.c ****   }
 287:quantum/rgblight.c ****   else {
 288:quantum/rgblight.c ****     rgblight_enable();
 289:quantum/rgblight.c ****   }
 290:quantum/rgblight.c **** }
 291:quantum/rgblight.c **** 
 292:quantum/rgblight.c **** void rgblight_toggle_noeeprom(void) {
 293:quantum/rgblight.c ****   xprintf("rgblight toggle [NOEEPROM]: rgblight_config.enable = %u\n", !rgblight_config.enable);
 294:quantum/rgblight.c ****   if (rgblight_config.enable) {
 295:quantum/rgblight.c ****     rgblight_disable_noeeprom();
 296:quantum/rgblight.c ****   }
 297:quantum/rgblight.c ****   else {
 298:quantum/rgblight.c ****     rgblight_enable_noeeprom();
 299:quantum/rgblight.c ****   }
 300:quantum/rgblight.c **** }
 301:quantum/rgblight.c **** 
 302:quantum/rgblight.c **** void rgblight_enable(void) {
 303:quantum/rgblight.c ****   rgblight_config.enable = 1;
 304:quantum/rgblight.c ****   // No need to update EEPROM here. rgblight_mode() will do that, actually
 305:quantum/rgblight.c ****   //eeconfig_update_rgblight(rgblight_config.raw);
 306:quantum/rgblight.c ****   xprintf("rgblight enable [EEPROM]: rgblight_config.enable = %u\n", rgblight_config.enable);
 307:quantum/rgblight.c ****   rgblight_mode(rgblight_config.mode);
 308:quantum/rgblight.c **** }
 309:quantum/rgblight.c **** 
 310:quantum/rgblight.c **** void rgblight_enable_noeeprom(void) {
 311:quantum/rgblight.c ****   rgblight_config.enable = 1;
 312:quantum/rgblight.c ****   xprintf("rgblight enable [NOEEPROM]: rgblight_config.enable = %u\n", rgblight_config.enable);
 313:quantum/rgblight.c ****   rgblight_mode_noeeprom(rgblight_config.mode);
 314:quantum/rgblight.c **** }
 315:quantum/rgblight.c **** 
 316:quantum/rgblight.c **** void rgblight_disable(void) {
 317:quantum/rgblight.c ****   rgblight_config.enable = 0;
 318:quantum/rgblight.c ****   eeconfig_update_rgblight(rgblight_config.raw);
 319:quantum/rgblight.c ****   xprintf("rgblight disable [EEPROM]: rgblight_config.enable = %u\n", rgblight_config.enable);
 320:quantum/rgblight.c ****   #ifdef RGBLIGHT_ANIMATIONS
 321:quantum/rgblight.c ****     rgblight_timer_disable();
 322:quantum/rgblight.c ****   #endif
 323:quantum/rgblight.c ****   wait_ms(50);
 324:quantum/rgblight.c ****   rgblight_set();
 325:quantum/rgblight.c **** }
 326:quantum/rgblight.c **** 
 327:quantum/rgblight.c **** void rgblight_disable_noeeprom(void) {
 328:quantum/rgblight.c ****   rgblight_config.enable = 0;
 329:quantum/rgblight.c ****   xprintf("rgblight disable [noEEPROM]: rgblight_config.enable = %u\n", rgblight_config.enable);
 330:quantum/rgblight.c ****   #ifdef RGBLIGHT_ANIMATIONS
 331:quantum/rgblight.c ****     rgblight_timer_disable();
 332:quantum/rgblight.c ****   #endif
 333:quantum/rgblight.c ****   _delay_ms(50);
 334:quantum/rgblight.c ****   rgblight_set();
 335:quantum/rgblight.c **** }
 336:quantum/rgblight.c **** 
 337:quantum/rgblight.c **** 
 338:quantum/rgblight.c **** // Deals with the messy details of incrementing an integer
 339:quantum/rgblight.c **** uint8_t increment( uint8_t value, uint8_t step, uint8_t min, uint8_t max ) {
 617               		.loc 1 339 0
 618               		.cfi_startproc
 619               	.LVL45:
 620               	/* prologue: function */
 621               	/* frame size = 0 */
 622               	/* stack size = 0 */
 623               	.L__stack_usage = 0
 340:quantum/rgblight.c ****     int16_t new_value = value;
 341:quantum/rgblight.c ****     new_value += step;
 624               		.loc 1 341 0
 625 0000 70E0      		ldi r23,0
 342:quantum/rgblight.c ****     return MIN( MAX( new_value, min ), max );
 626               		.loc 1 342 0
 627 0002 50E0      		ldi r21,0
 628 0004 FB01      		movw r30,r22
 629 0006 E80F      		add r30,r24
 630 0008 F11D      		adc r31,__zero_reg__
 631 000a CF01      		movw r24,r30
 632               	.LVL46:
 633 000c E417      		cp r30,r20
 634 000e F507      		cpc r31,r21
 635 0010 04F4      		brge .L51
 636 0012 CA01      		movw r24,r20
 637               	.L51:
 638 0014 30E0      		ldi r19,0
 639 0016 2817      		cp r18,r24
 640 0018 3907      		cpc r19,r25
 641 001a 04F4      		brge .L52
 642 001c C901      		movw r24,r18
 643               	.L52:
 343:quantum/rgblight.c **** }
 644               		.loc 1 343 0
 645 001e 0895      		ret
 646               		.cfi_endproc
 647               	.LFE29:
 649               		.section	.text.decrement,"ax",@progbits
 650               	.global	decrement
 652               	decrement:
 653               	.LFB30:
 344:quantum/rgblight.c **** 
 345:quantum/rgblight.c **** uint8_t decrement( uint8_t value, uint8_t step, uint8_t min, uint8_t max ) {
 654               		.loc 1 345 0
 655               		.cfi_startproc
 656               	.LVL47:
 657               	/* prologue: function */
 658               	/* frame size = 0 */
 659               	/* stack size = 0 */
 660               	.L__stack_usage = 0
 346:quantum/rgblight.c ****     int16_t new_value = value;
 661               		.loc 1 346 0
 662 0000 90E0      		ldi r25,0
 663               	.LVL48:
 347:quantum/rgblight.c ****     new_value -= step;
 348:quantum/rgblight.c ****     return MIN( MAX( new_value, min ), max );
 664               		.loc 1 348 0
 665 0002 50E0      		ldi r21,0
 666 0004 861B      		sub r24,r22
 667 0006 9109      		sbc r25,__zero_reg__
 668               	.LVL49:
 669 0008 8417      		cp r24,r20
 670 000a 9507      		cpc r25,r21
 671 000c 04F4      		brge .L54
 672 000e CA01      		movw r24,r20
 673               	.LVL50:
 674               	.L54:
 675 0010 30E0      		ldi r19,0
 676 0012 2817      		cp r18,r24
 677 0014 3907      		cpc r19,r25
 678 0016 04F4      		brge .L55
 679 0018 C901      		movw r24,r18
 680               	.L55:
 349:quantum/rgblight.c **** }
 681               		.loc 1 349 0
 682 001a 0895      		ret
 683               		.cfi_endproc
 684               	.LFE30:
 686               		.section	.text.rgblight_increase_speed,"ax",@progbits
 687               	.global	rgblight_increase_speed
 689               	rgblight_increase_speed:
 690               	.LFB37:
 350:quantum/rgblight.c **** 
 351:quantum/rgblight.c **** void rgblight_increase_hue(void) {
 352:quantum/rgblight.c ****   uint16_t hue;
 353:quantum/rgblight.c ****   hue = (rgblight_config.hue+RGBLIGHT_HUE_STEP) % 360;
 354:quantum/rgblight.c ****   rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
 355:quantum/rgblight.c **** }
 356:quantum/rgblight.c **** void rgblight_decrease_hue(void) {
 357:quantum/rgblight.c ****   uint16_t hue;
 358:quantum/rgblight.c ****   if (rgblight_config.hue-RGBLIGHT_HUE_STEP < 0) {
 359:quantum/rgblight.c ****     hue = (rgblight_config.hue + 360 - RGBLIGHT_HUE_STEP) % 360;
 360:quantum/rgblight.c ****   } else {
 361:quantum/rgblight.c ****     hue = (rgblight_config.hue - RGBLIGHT_HUE_STEP) % 360;
 362:quantum/rgblight.c ****   }
 363:quantum/rgblight.c ****   rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
 364:quantum/rgblight.c **** }
 365:quantum/rgblight.c **** void rgblight_increase_sat(void) {
 366:quantum/rgblight.c ****   uint8_t sat;
 367:quantum/rgblight.c ****   if (rgblight_config.sat + RGBLIGHT_SAT_STEP > 255) {
 368:quantum/rgblight.c ****     sat = 255;
 369:quantum/rgblight.c ****   } else {
 370:quantum/rgblight.c ****     sat = rgblight_config.sat + RGBLIGHT_SAT_STEP;
 371:quantum/rgblight.c ****   }
 372:quantum/rgblight.c ****   rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
 373:quantum/rgblight.c **** }
 374:quantum/rgblight.c **** void rgblight_decrease_sat(void) {
 375:quantum/rgblight.c ****   uint8_t sat;
 376:quantum/rgblight.c ****   if (rgblight_config.sat - RGBLIGHT_SAT_STEP < 0) {
 377:quantum/rgblight.c ****     sat = 0;
 378:quantum/rgblight.c ****   } else {
 379:quantum/rgblight.c ****     sat = rgblight_config.sat - RGBLIGHT_SAT_STEP;
 380:quantum/rgblight.c ****   }
 381:quantum/rgblight.c ****   rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
 382:quantum/rgblight.c **** }
 383:quantum/rgblight.c **** void rgblight_increase_val(void) {
 384:quantum/rgblight.c ****   uint8_t val;
 385:quantum/rgblight.c ****   if (rgblight_config.val + RGBLIGHT_VAL_STEP > RGBLIGHT_LIMIT_VAL) {
 386:quantum/rgblight.c ****     val = RGBLIGHT_LIMIT_VAL;
 387:quantum/rgblight.c ****   } else {
 388:quantum/rgblight.c ****     val = rgblight_config.val + RGBLIGHT_VAL_STEP;
 389:quantum/rgblight.c ****   }
 390:quantum/rgblight.c ****   rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, val);
 391:quantum/rgblight.c **** }
 392:quantum/rgblight.c **** void rgblight_decrease_val(void) {
 393:quantum/rgblight.c ****   uint8_t val;
 394:quantum/rgblight.c ****   if (rgblight_config.val - RGBLIGHT_VAL_STEP < 0) {
 395:quantum/rgblight.c ****     val = 0;
 396:quantum/rgblight.c ****   } else {
 397:quantum/rgblight.c ****     val = rgblight_config.val - RGBLIGHT_VAL_STEP;
 398:quantum/rgblight.c ****   }
 399:quantum/rgblight.c ****   rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, val);
 400:quantum/rgblight.c **** }
 401:quantum/rgblight.c **** void rgblight_increase_speed(void) {
 691               		.loc 1 401 0
 692               		.cfi_startproc
 693               	/* prologue: function */
 694               	/* frame size = 0 */
 695               	/* stack size = 0 */
 696               	.L__stack_usage = 0
 697               	.LVL51:
 698               	.LBB20:
 699               	.LBB21:
 340:quantum/rgblight.c ****     new_value += step;
 700               		.loc 1 340 0
 701 0000 8091 0000 		lds r24,rgblight_config+4
 702 0004 90E0      		ldi r25,0
 703               	.LVL52:
 342:quantum/rgblight.c **** }
 704               		.loc 1 342 0
 705 0006 0196      		adiw r24,1
 706               	.LVL53:
 707 0008 8430      		cpi r24,4
 708 000a 9105      		cpc r25,__zero_reg__
 709 000c 04F0      		brlt .L58
 710 000e 83E0      		ldi r24,lo8(3)
 711 0010 90E0      		ldi r25,0
 712               	.LVL54:
 713               	.L58:
 714 0012 8093 0000 		sts rgblight_config+4,r24
 715               	.LVL55:
 716               	.LBE21:
 717               	.LBE20:
 402:quantum/rgblight.c ****     rgblight_config.speed = increment( rgblight_config.speed, 1, 0, 3 );
 403:quantum/rgblight.c ****     eeconfig_update_rgblight(rgblight_config.raw);//EECONFIG needs to be increased to support this
 718               		.loc 1 403 0
 719 0016 6091 0000 		lds r22,rgblight_config
 720 001a 7091 0000 		lds r23,rgblight_config+1
 721 001e 8091 0000 		lds r24,rgblight_config+2
 722 0022 9091 0000 		lds r25,rgblight_config+3
 723 0026 0C94 0000 		jmp eeconfig_update_rgblight
 724               	.LVL56:
 725               		.cfi_endproc
 726               	.LFE37:
 728               		.section	.text.rgblight_decrease_speed,"ax",@progbits
 729               	.global	rgblight_decrease_speed
 731               	rgblight_decrease_speed:
 732               	.LFB38:
 404:quantum/rgblight.c **** }
 405:quantum/rgblight.c **** 
 406:quantum/rgblight.c **** void rgblight_decrease_speed(void) {
 733               		.loc 1 406 0
 734               		.cfi_startproc
 735               	/* prologue: function */
 736               	/* frame size = 0 */
 737               	/* stack size = 0 */
 738               	.L__stack_usage = 0
 739               	.LVL57:
 740               	.LBB24:
 741               	.LBB25:
 346:quantum/rgblight.c ****     new_value -= step;
 742               		.loc 1 346 0
 743 0000 8091 0000 		lds r24,rgblight_config+4
 744 0004 90E0      		ldi r25,0
 745               	.LVL58:
 347:quantum/rgblight.c ****     return MIN( MAX( new_value, min ), max );
 746               		.loc 1 347 0
 747 0006 0197      		sbiw r24,1
 748               	.LVL59:
 348:quantum/rgblight.c **** }
 749               		.loc 1 348 0
 750 0008 97FF      		sbrs r25,7
 751 000a 00C0      		rjmp .L60
 752 000c 80E0      		ldi r24,0
 753 000e 90E0      		ldi r25,0
 754               	.LVL60:
 755               	.L60:
 756 0010 8430      		cpi r24,4
 757 0012 9105      		cpc r25,__zero_reg__
 758 0014 04F0      		brlt .L61
 759 0016 83E0      		ldi r24,lo8(3)
 760 0018 90E0      		ldi r25,0
 761               	.L61:
 762 001a 8093 0000 		sts rgblight_config+4,r24
 763               	.LVL61:
 764               	.LBE25:
 765               	.LBE24:
 407:quantum/rgblight.c ****     rgblight_config.speed = decrement( rgblight_config.speed, 1, 0, 3 );
 408:quantum/rgblight.c ****     eeconfig_update_rgblight(rgblight_config.raw);//EECONFIG needs to be increased to support this
 766               		.loc 1 408 0
 767 001e 6091 0000 		lds r22,rgblight_config
 768 0022 7091 0000 		lds r23,rgblight_config+1
 769 0026 8091 0000 		lds r24,rgblight_config+2
 770 002a 9091 0000 		lds r25,rgblight_config+3
 771 002e 0C94 0000 		jmp eeconfig_update_rgblight
 772               	.LVL62:
 773               		.cfi_endproc
 774               	.LFE38:
 776               		.section	.text.rgblight_get_hue,"ax",@progbits
 777               	.global	rgblight_get_hue
 779               	rgblight_get_hue:
 780               	.LFB43:
 409:quantum/rgblight.c **** }
 410:quantum/rgblight.c **** 
 411:quantum/rgblight.c **** void rgblight_sethsv_noeeprom_old(uint16_t hue, uint8_t sat, uint8_t val) {
 412:quantum/rgblight.c ****   if (rgblight_config.enable) {
 413:quantum/rgblight.c ****     LED_TYPE tmp_led;
 414:quantum/rgblight.c ****     sethsv(hue, sat, val, &tmp_led);
 415:quantum/rgblight.c ****     // dprintf("rgblight set hue [MEMORY]: %u,%u,%u\n", inmem_config.hue, inmem_config.sat, inmem_c
 416:quantum/rgblight.c ****     rgblight_setrgb(tmp_led.r, tmp_led.g, tmp_led.b);
 417:quantum/rgblight.c ****   }
 418:quantum/rgblight.c **** }
 419:quantum/rgblight.c **** 
 420:quantum/rgblight.c **** void rgblight_sethsv_eeprom_helper(uint16_t hue, uint8_t sat, uint8_t val, bool write_to_eeprom) {
 421:quantum/rgblight.c ****   if (rgblight_config.enable) {
 422:quantum/rgblight.c ****     if (rgblight_config.mode == 1) {
 423:quantum/rgblight.c ****       // same static color
 424:quantum/rgblight.c ****       LED_TYPE tmp_led;
 425:quantum/rgblight.c ****       sethsv(hue, sat, val, &tmp_led);
 426:quantum/rgblight.c ****       rgblight_setrgb(tmp_led.r, tmp_led.g, tmp_led.b);
 427:quantum/rgblight.c ****     } else {
 428:quantum/rgblight.c ****       // all LEDs in same color
 429:quantum/rgblight.c ****       if (rgblight_config.mode >= 2 && rgblight_config.mode <= 5) {
 430:quantum/rgblight.c ****         // breathing mode, ignore the change of val, use in memory value instead
 431:quantum/rgblight.c ****         val = rgblight_config.val;
 432:quantum/rgblight.c ****       } else if (rgblight_config.mode >= 6 && rgblight_config.mode <= 14) {
 433:quantum/rgblight.c ****         // rainbow mood and rainbow swirl, ignore the change of hue
 434:quantum/rgblight.c ****         hue = rgblight_config.hue;
 435:quantum/rgblight.c ****       } else if (rgblight_config.mode >= 25 && rgblight_config.mode <= 34) {
 436:quantum/rgblight.c ****         // static gradient
 437:quantum/rgblight.c ****         uint16_t _hue;
 438:quantum/rgblight.c ****         int8_t direction = ((rgblight_config.mode - 25) % 2) ? -1 : 1;
 439:quantum/rgblight.c ****         uint16_t range = pgm_read_word(&RGBLED_GRADIENT_RANGES[(rgblight_config.mode - 25) / 2]);
 440:quantum/rgblight.c ****         for (uint8_t i = 0; i < RGBLED_NUM; i++) {
 441:quantum/rgblight.c ****           _hue = (range / RGBLED_NUM * i * direction + hue + 360) % 360;
 442:quantum/rgblight.c ****           dprintf("rgblight rainbow set hsv: %u,%u,%d,%u\n", i, _hue, direction, range);
 443:quantum/rgblight.c ****           sethsv(_hue, sat, val, (LED_TYPE *)&led[i]);
 444:quantum/rgblight.c ****         }
 445:quantum/rgblight.c ****         rgblight_set();
 446:quantum/rgblight.c ****       }
 447:quantum/rgblight.c ****     }
 448:quantum/rgblight.c ****     rgblight_config.hue = hue;
 449:quantum/rgblight.c ****     rgblight_config.sat = sat;
 450:quantum/rgblight.c ****     rgblight_config.val = val;
 451:quantum/rgblight.c ****     if (write_to_eeprom) {
 452:quantum/rgblight.c ****       eeconfig_update_rgblight(rgblight_config.raw);
 453:quantum/rgblight.c ****       xprintf("rgblight set hsv [EEPROM]: %u,%u,%u\n", rgblight_config.hue, rgblight_config.sat, rg
 454:quantum/rgblight.c ****     } else {
 455:quantum/rgblight.c ****       xprintf("rgblight set hsv [NOEEPROM]: %u,%u,%u\n", rgblight_config.hue, rgblight_config.sat, 
 456:quantum/rgblight.c ****     }
 457:quantum/rgblight.c ****   }
 458:quantum/rgblight.c **** }
 459:quantum/rgblight.c **** 
 460:quantum/rgblight.c **** void rgblight_sethsv(uint16_t hue, uint8_t sat, uint8_t val) {
 461:quantum/rgblight.c ****   rgblight_sethsv_eeprom_helper(hue, sat, val, true);
 462:quantum/rgblight.c **** }
 463:quantum/rgblight.c **** 
 464:quantum/rgblight.c **** void rgblight_sethsv_noeeprom(uint16_t hue, uint8_t sat, uint8_t val) {
 465:quantum/rgblight.c ****   rgblight_sethsv_eeprom_helper(hue, sat, val, false);
 466:quantum/rgblight.c **** }
 467:quantum/rgblight.c **** 
 468:quantum/rgblight.c **** uint16_t rgblight_get_hue(void) {
 781               		.loc 1 468 0
 782               		.cfi_startproc
 783               	/* prologue: function */
 784               	/* frame size = 0 */
 785               	/* stack size = 0 */
 786               	.L__stack_usage = 0
 469:quantum/rgblight.c ****   return rgblight_config.hue;
 787               		.loc 1 469 0
 788 0000 8091 0000 		lds r24,rgblight_config
 789 0004 881F      		rol r24
 790 0006 8827      		clr r24
 791 0008 881F      		rol r24
 792 000a 9091 0000 		lds r25,rgblight_config+1
 793 000e 292F      		mov r18,r25
 794 0010 220F      		lsl r18
 795 0012 97FB      		bst r25,7
 796 0014 9927      		clr r25
 797 0016 90F9      		bld r25,0
 470:quantum/rgblight.c **** }
 798               		.loc 1 470 0
 799 0018 822B      		or r24,r18
 800 001a 0895      		ret
 801               		.cfi_endproc
 802               	.LFE43:
 804               		.section	.text.rgblight_get_sat,"ax",@progbits
 805               	.global	rgblight_get_sat
 807               	rgblight_get_sat:
 808               	.LFB44:
 471:quantum/rgblight.c **** 
 472:quantum/rgblight.c **** uint8_t rgblight_get_sat(void) {
 809               		.loc 1 472 0
 810               		.cfi_startproc
 811               	/* prologue: function */
 812               	/* frame size = 0 */
 813               	/* stack size = 0 */
 814               	.L__stack_usage = 0
 473:quantum/rgblight.c ****   return rgblight_config.sat;
 474:quantum/rgblight.c **** }
 815               		.loc 1 474 0
 816 0000 8091 0000 		lds r24,rgblight_config+2
 817 0004 0895      		ret
 818               		.cfi_endproc
 819               	.LFE44:
 821               		.section	.text.rgblight_get_val,"ax",@progbits
 822               	.global	rgblight_get_val
 824               	rgblight_get_val:
 825               	.LFB45:
 475:quantum/rgblight.c **** 
 476:quantum/rgblight.c **** uint8_t rgblight_get_val(void) {
 826               		.loc 1 476 0
 827               		.cfi_startproc
 828               	/* prologue: function */
 829               	/* frame size = 0 */
 830               	/* stack size = 0 */
 831               	.L__stack_usage = 0
 477:quantum/rgblight.c ****   return rgblight_config.val;
 478:quantum/rgblight.c **** }
 832               		.loc 1 478 0
 833 0000 8091 0000 		lds r24,rgblight_config+3
 834 0004 0895      		ret
 835               		.cfi_endproc
 836               	.LFE45:
 838               		.section	.text.rgblight_set,"ax",@progbits
 839               	.global	rgblight_set
 841               	rgblight_set:
 842               	.LFB49:
 479:quantum/rgblight.c **** 
 480:quantum/rgblight.c **** void rgblight_setrgb(uint8_t r, uint8_t g, uint8_t b) {
 481:quantum/rgblight.c ****   if (!rgblight_config.enable) { return; }
 482:quantum/rgblight.c **** 
 483:quantum/rgblight.c ****   for (uint8_t i = 0; i < RGBLED_NUM; i++) {
 484:quantum/rgblight.c ****     led[i].r = r;
 485:quantum/rgblight.c ****     led[i].g = g;
 486:quantum/rgblight.c ****     led[i].b = b;
 487:quantum/rgblight.c ****   }
 488:quantum/rgblight.c ****   rgblight_set();
 489:quantum/rgblight.c **** }
 490:quantum/rgblight.c **** 
 491:quantum/rgblight.c **** void rgblight_setrgb_at(uint8_t r, uint8_t g, uint8_t b, uint8_t index) {
 492:quantum/rgblight.c ****   if (!rgblight_config.enable || index >= RGBLED_NUM) { return; }
 493:quantum/rgblight.c **** 
 494:quantum/rgblight.c ****   led[index].r = r;
 495:quantum/rgblight.c ****   led[index].g = g;
 496:quantum/rgblight.c ****   led[index].b = b;
 497:quantum/rgblight.c ****   rgblight_set();
 498:quantum/rgblight.c **** }
 499:quantum/rgblight.c **** 
 500:quantum/rgblight.c **** void rgblight_sethsv_at(uint16_t hue, uint8_t sat, uint8_t val, uint8_t index) {
 501:quantum/rgblight.c ****   if (!rgblight_config.enable) { return; }
 502:quantum/rgblight.c **** 
 503:quantum/rgblight.c ****   LED_TYPE tmp_led;
 504:quantum/rgblight.c ****   sethsv(hue, sat, val, &tmp_led);
 505:quantum/rgblight.c ****   rgblight_setrgb_at(tmp_led.r, tmp_led.g, tmp_led.b, index);
 506:quantum/rgblight.c **** }
 507:quantum/rgblight.c **** 
 508:quantum/rgblight.c **** #ifndef RGBLIGHT_CUSTOM_DRIVER
 509:quantum/rgblight.c **** void rgblight_set(void) {
 843               		.loc 1 509 0
 844               		.cfi_startproc
 845               	/* prologue: function */
 846               	/* frame size = 0 */
 847               	/* stack size = 0 */
 848               	.L__stack_usage = 0
 510:quantum/rgblight.c ****   if (rgblight_config.enable) {
 849               		.loc 1 510 0
 850 0000 8091 0000 		lds r24,rgblight_config
 851 0004 80FF      		sbrs r24,0
 852 0006 00C0      		rjmp .L68
 853               	.L67:
 511:quantum/rgblight.c ****     #ifdef RGBW
 512:quantum/rgblight.c ****       ws2812_setleds_rgbw(led, RGBLED_NUM);
 513:quantum/rgblight.c ****     #else
 514:quantum/rgblight.c ****       ws2812_setleds(led, RGBLED_NUM);
 854               		.loc 1 514 0
 855 0008 6EE0      		ldi r22,lo8(14)
 856 000a 70E0      		ldi r23,0
 857 000c 80E0      		ldi r24,lo8(led)
 858 000e 90E0      		ldi r25,hi8(led)
 859 0010 0C94 0000 		jmp ws2812_setleds
 860               	.LVL63:
 861               	.L68:
 862 0014 80E0      		ldi r24,0
 863 0016 90E0      		ldi r25,0
 864               	.L66:
 865 0018 FC01      		movw r30,r24
 866 001a E050      		subi r30,lo8(-(led))
 867 001c F040      		sbci r31,hi8(-(led))
 868               	.LBB26:
 515:quantum/rgblight.c ****     #endif
 516:quantum/rgblight.c ****   } else {
 517:quantum/rgblight.c ****     for (uint8_t i = 0; i < RGBLED_NUM; i++) {
 518:quantum/rgblight.c ****       led[i].r = 0;
 869               		.loc 1 518 0 discriminator 3
 870 001e 1182      		std Z+1,__zero_reg__
 519:quantum/rgblight.c ****       led[i].g = 0;
 871               		.loc 1 519 0 discriminator 3
 872 0020 1082      		st Z,__zero_reg__
 520:quantum/rgblight.c ****       led[i].b = 0;
 873               		.loc 1 520 0 discriminator 3
 874 0022 1282      		std Z+2,__zero_reg__
 875               	.LVL64:
 876 0024 0396      		adiw r24,3
 517:quantum/rgblight.c ****       led[i].r = 0;
 877               		.loc 1 517 0 discriminator 3
 878 0026 8A32      		cpi r24,42
 879 0028 9105      		cpc r25,__zero_reg__
 880 002a 01F4      		brne .L66
 881 002c 00C0      		rjmp .L67
 882               	.LBE26:
 883               		.cfi_endproc
 884               	.LFE49:
 886               		.section	.text.rgblight_setrgb,"ax",@progbits
 887               	.global	rgblight_setrgb
 889               	rgblight_setrgb:
 890               	.LFB46:
 480:quantum/rgblight.c ****   if (!rgblight_config.enable) { return; }
 891               		.loc 1 480 0
 892               		.cfi_startproc
 893               	.LVL65:
 894               	/* prologue: function */
 895               	/* frame size = 0 */
 896               	/* stack size = 0 */
 897               	.L__stack_usage = 0
 481:quantum/rgblight.c **** 
 898               		.loc 1 481 0
 899 0000 9091 0000 		lds r25,rgblight_config
 900 0004 90FF      		sbrs r25,0
 901 0006 00C0      		rjmp .L70
 902 0008 20E0      		ldi r18,0
 903 000a 30E0      		ldi r19,0
 904               	.L72:
 905 000c F901      		movw r30,r18
 906 000e E050      		subi r30,lo8(-(led))
 907 0010 F040      		sbci r31,hi8(-(led))
 908               	.LBB27:
 484:quantum/rgblight.c ****     led[i].g = g;
 909               		.loc 1 484 0 discriminator 3
 910 0012 8183      		std Z+1,r24
 485:quantum/rgblight.c ****     led[i].b = b;
 911               		.loc 1 485 0 discriminator 3
 912 0014 6083      		st Z,r22
 486:quantum/rgblight.c ****   }
 913               		.loc 1 486 0 discriminator 3
 914 0016 4283      		std Z+2,r20
 915               	.LVL66:
 916 0018 2D5F      		subi r18,-3
 917 001a 3F4F      		sbci r19,-1
 483:quantum/rgblight.c ****     led[i].r = r;
 918               		.loc 1 483 0 discriminator 3
 919 001c 2A32      		cpi r18,42
 920 001e 3105      		cpc r19,__zero_reg__
 921 0020 01F4      		brne .L72
 922               	.LBE27:
 488:quantum/rgblight.c **** }
 923               		.loc 1 488 0
 924 0022 0C94 0000 		jmp rgblight_set
 925               	.LVL67:
 926               	.L70:
 927 0026 0895      		ret
 928               		.cfi_endproc
 929               	.LFE46:
 931               		.section	.text.rgblight_sethsv_noeeprom_old,"ax",@progbits
 932               	.global	rgblight_sethsv_noeeprom_old
 934               	rgblight_sethsv_noeeprom_old:
 935               	.LFB39:
 411:quantum/rgblight.c ****   if (rgblight_config.enable) {
 936               		.loc 1 411 0
 937               		.cfi_startproc
 938               	.LVL68:
 939 0000 CF93      		push r28
 940               	.LCFI39:
 941               		.cfi_def_cfa_offset 3
 942               		.cfi_offset 28, -2
 943 0002 DF93      		push r29
 944               	.LCFI40:
 945               		.cfi_def_cfa_offset 4
 946               		.cfi_offset 29, -3
 947 0004 00D0      		rcall .
 948 0006 1F92      		push __zero_reg__
 949               	.LCFI41:
 950               		.cfi_def_cfa_offset 7
 951 0008 CDB7      		in r28,__SP_L__
 952 000a DEB7      		in r29,__SP_H__
 953               	.LCFI42:
 954               		.cfi_def_cfa_register 28
 955               	/* prologue: function */
 956               	/* frame size = 3 */
 957               	/* stack size = 5 */
 958               	.L__stack_usage = 5
 412:quantum/rgblight.c ****     LED_TYPE tmp_led;
 959               		.loc 1 412 0
 960 000c 2091 0000 		lds r18,rgblight_config
 961 0010 20FF      		sbrs r18,0
 962 0012 00C0      		rjmp .L74
 963               	.LBB28:
 414:quantum/rgblight.c ****     // dprintf("rgblight set hue [MEMORY]: %u,%u,%u\n", inmem_config.hue, inmem_config.sat, inmem_c
 964               		.loc 1 414 0
 965 0014 9E01      		movw r18,r28
 966 0016 2F5F      		subi r18,-1
 967 0018 3F4F      		sbci r19,-1
 968 001a 0E94 0000 		call sethsv
 969               	.LVL69:
 416:quantum/rgblight.c ****   }
 970               		.loc 1 416 0
 971 001e 4B81      		ldd r20,Y+3
 972 0020 6981      		ldd r22,Y+1
 973 0022 8A81      		ldd r24,Y+2
 974 0024 0E94 0000 		call rgblight_setrgb
 975               	.LVL70:
 976               	.L74:
 977               	/* epilogue start */
 978               	.LBE28:
 418:quantum/rgblight.c **** 
 979               		.loc 1 418 0
 980 0028 0F90      		pop __tmp_reg__
 981 002a 0F90      		pop __tmp_reg__
 982 002c 0F90      		pop __tmp_reg__
 983 002e DF91      		pop r29
 984 0030 CF91      		pop r28
 985 0032 0895      		ret
 986               		.cfi_endproc
 987               	.LFE39:
 989               		.section	.text.rgblight_sethsv_eeprom_helper,"ax",@progbits
 990               	.global	rgblight_sethsv_eeprom_helper
 992               	rgblight_sethsv_eeprom_helper:
 993               	.LFB40:
 420:quantum/rgblight.c ****   if (rgblight_config.enable) {
 994               		.loc 1 420 0
 995               		.cfi_startproc
 996               	.LVL71:
 997 0000 2F92      		push r2
 998               	.LCFI43:
 999               		.cfi_def_cfa_offset 3
 1000               		.cfi_offset 2, -2
 1001 0002 3F92      		push r3
 1002               	.LCFI44:
 1003               		.cfi_def_cfa_offset 4
 1004               		.cfi_offset 3, -3
 1005 0004 4F92      		push r4
 1006               	.LCFI45:
 1007               		.cfi_def_cfa_offset 5
 1008               		.cfi_offset 4, -4
 1009 0006 5F92      		push r5
 1010               	.LCFI46:
 1011               		.cfi_def_cfa_offset 6
 1012               		.cfi_offset 5, -5
 1013 0008 6F92      		push r6
 1014               	.LCFI47:
 1015               		.cfi_def_cfa_offset 7
 1016               		.cfi_offset 6, -6
 1017 000a 7F92      		push r7
 1018               	.LCFI48:
 1019               		.cfi_def_cfa_offset 8
 1020               		.cfi_offset 7, -7
 1021 000c 8F92      		push r8
 1022               	.LCFI49:
 1023               		.cfi_def_cfa_offset 9
 1024               		.cfi_offset 8, -8
 1025 000e 9F92      		push r9
 1026               	.LCFI50:
 1027               		.cfi_def_cfa_offset 10
 1028               		.cfi_offset 9, -9
 1029 0010 AF92      		push r10
 1030               	.LCFI51:
 1031               		.cfi_def_cfa_offset 11
 1032               		.cfi_offset 10, -10
 1033 0012 BF92      		push r11
 1034               	.LCFI52:
 1035               		.cfi_def_cfa_offset 12
 1036               		.cfi_offset 11, -11
 1037 0014 CF92      		push r12
 1038               	.LCFI53:
 1039               		.cfi_def_cfa_offset 13
 1040               		.cfi_offset 12, -12
 1041 0016 DF92      		push r13
 1042               	.LCFI54:
 1043               		.cfi_def_cfa_offset 14
 1044               		.cfi_offset 13, -13
 1045 0018 EF92      		push r14
 1046               	.LCFI55:
 1047               		.cfi_def_cfa_offset 15
 1048               		.cfi_offset 14, -14
 1049 001a FF92      		push r15
 1050               	.LCFI56:
 1051               		.cfi_def_cfa_offset 16
 1052               		.cfi_offset 15, -15
 1053 001c 0F93      		push r16
 1054               	.LCFI57:
 1055               		.cfi_def_cfa_offset 17
 1056               		.cfi_offset 16, -16
 1057 001e 1F93      		push r17
 1058               	.LCFI58:
 1059               		.cfi_def_cfa_offset 18
 1060               		.cfi_offset 17, -17
 1061 0020 CF93      		push r28
 1062               	.LCFI59:
 1063               		.cfi_def_cfa_offset 19
 1064               		.cfi_offset 28, -18
 1065 0022 DF93      		push r29
 1066               	.LCFI60:
 1067               		.cfi_def_cfa_offset 20
 1068               		.cfi_offset 29, -19
 1069 0024 CDB7      		in r28,__SP_L__
 1070 0026 DEB7      		in r29,__SP_H__
 1071               	.LCFI61:
 1072               		.cfi_def_cfa_register 28
 1073 0028 2797      		sbiw r28,7
 1074               	.LCFI62:
 1075               		.cfi_def_cfa_offset 27
 1076 002a 0FB6      		in __tmp_reg__,__SREG__
 1077 002c F894      		cli
 1078 002e DEBF      		out __SP_H__,r29
 1079 0030 0FBE      		out __SREG__,__tmp_reg__
 1080 0032 CDBF      		out __SP_L__,r28
 1081               	/* prologue: function */
 1082               	/* frame size = 7 */
 1083               	/* stack size = 25 */
 1084               	.L__stack_usage = 25
 1085 0034 8C01      		movw r16,r24
 1086 0036 262E      		mov r2,r22
 1087 0038 342E      		mov r3,r20
 1088 003a 2D83      		std Y+5,r18
 421:quantum/rgblight.c ****     if (rgblight_config.mode == 1) {
 1089               		.loc 1 421 0
 1090 003c 8091 0000 		lds r24,rgblight_config
 1091               	.LVL72:
 1092 0040 80FF      		sbrs r24,0
 1093 0042 00C0      		rjmp .L79
 422:quantum/rgblight.c ****       // same static color
 1094               		.loc 1 422 0
 1095 0044 982F      		mov r25,r24
 1096 0046 9E77      		andi r25,lo8(126)
 1097 0048 9230      		cpi r25,lo8(2)
 1098 004a 01F4      		brne .L81
 1099               	.LBB29:
 425:quantum/rgblight.c ****       rgblight_setrgb(tmp_led.r, tmp_led.g, tmp_led.b);
 1100               		.loc 1 425 0
 1101 004c 9E01      		movw r18,r28
 1102               	.LVL73:
 1103 004e 2F5F      		subi r18,-1
 1104 0050 3F4F      		sbci r19,-1
 1105 0052 C801      		movw r24,r16
 1106 0054 0E94 0000 		call sethsv
 1107               	.LVL74:
 426:quantum/rgblight.c ****     } else {
 1108               		.loc 1 426 0
 1109 0058 4B81      		ldd r20,Y+3
 1110 005a 6981      		ldd r22,Y+1
 1111 005c 8A81      		ldd r24,Y+2
 1112 005e 0E94 0000 		call rgblight_setrgb
 1113               	.LVL75:
 1114               	.LBE29:
 1115 0062 00C0      		rjmp .L82
 1116               	.LVL76:
 1117               	.L81:
 429:quantum/rgblight.c ****         // breathing mode, ignore the change of val, use in memory value instead
 1118               		.loc 1 429 0
 1119 0064 E82F      		mov r30,r24
 1120 0066 E695      		lsr r30
 1121 0068 EF73      		andi r30,lo8(63)
 1122 006a 9EE3      		ldi r25,lo8(62)
 1123 006c 9E0F      		add r25,r30
 1124 006e 9F73      		andi r25,lo8(63)
 1125 0070 9430      		cpi r25,lo8(4)
 1126 0072 00F4      		brsh .L83
 431:quantum/rgblight.c ****       } else if (rgblight_config.mode >= 6 && rgblight_config.mode <= 14) {
 1127               		.loc 1 431 0
 1128 0074 3090 0000 		lds r3,rgblight_config+3
 1129               	.LVL77:
 1130 0078 00C0      		rjmp .L82
 1131               	.L83:
 432:quantum/rgblight.c ****         // rainbow mood and rainbow swirl, ignore the change of hue
 1132               		.loc 1 432 0
 1133 007a 9AE3      		ldi r25,lo8(58)
 1134 007c 9E0F      		add r25,r30
 1135 007e 9F73      		andi r25,lo8(63)
 1136 0080 9930      		cpi r25,lo8(9)
 1137 0082 00F4      		brsh .L84
 434:quantum/rgblight.c ****       } else if (rgblight_config.mode >= 25 && rgblight_config.mode <= 34) {
 1138               		.loc 1 434 0
 1139 0084 881F      		rol r24
 1140 0086 8827      		clr r24
 1141 0088 881F      		rol r24
 1142 008a 9091 0000 		lds r25,rgblight_config+1
 1143 008e 292F      		mov r18,r25
 1144               	.LVL78:
 1145 0090 220F      		lsl r18
 1146 0092 022F      		mov r16,r18
 1147               	.LVL79:
 1148 0094 082B      		or r16,r24
 1149 0096 97FB      		bst r25,7
 1150 0098 1127      		clr r17
 1151 009a 10F9      		bld r17,0
 1152               	.LVL80:
 1153 009c 00C0      		rjmp .L82
 1154               	.LVL81:
 1155               	.L84:
 435:quantum/rgblight.c ****         // static gradient
 1156               		.loc 1 435 0
 1157 009e 87E2      		ldi r24,lo8(39)
 1158 00a0 8E0F      		add r24,r30
 1159 00a2 8F73      		andi r24,lo8(63)
 1160 00a4 8A30      		cpi r24,lo8(10)
 1161 00a6 00F0      		brlo .+2
 1162 00a8 00C0      		rjmp .L82
 1163               	.LBB30:
 438:quantum/rgblight.c ****         uint16_t range = pgm_read_word(&RGBLED_GRADIENT_RANGES[(rgblight_config.mode - 25) / 2]);
 1164               		.loc 1 438 0
 1165 00aa F0E0      		ldi r31,0
 1166 00ac 7997      		sbiw r30,25
 1167 00ae E0FD      		sbrc r30,0
 1168 00b0 00C0      		rjmp .L89
 1169 00b2 21E0      		ldi r18,lo8(1)
 1170               	.LVL82:
 1171 00b4 2C83      		std Y+4,r18
 1172 00b6 00C0      		rjmp .L85
 1173               	.LVL83:
 1174               	.L89:
 1175 00b8 3FEF      		ldi r19,lo8(-1)
 1176 00ba 3C83      		std Y+4,r19
 1177               	.LVL84:
 1178               	.L85:
 1179               	.LBB31:
 439:quantum/rgblight.c ****         for (uint8_t i = 0; i < RGBLED_NUM; i++) {
 1180               		.loc 1 439 0 discriminator 4
 1181 00bc EE7F      		andi r30,254
 1182 00be E050      		subi r30,lo8(-(RGBLED_GRADIENT_RANGES))
 1183 00c0 F040      		sbci r31,hi8(-(RGBLED_GRADIENT_RANGES))
 1184               	.LVL85:
 1185               	/* #APP */
 1186               	 ;  439 "quantum/rgblight.c" 1
 1187 00c2 8590      		lpm r8, Z+
 1188 00c4 9490      		lpm r9, Z
 1189               		
 1190               	 ;  0 "" 2
 1191               	.LVL86:
 1192               	/* #NOAPP */
 1193               	.LBE31:
 1194               	.LBB32:
 441:quantum/rgblight.c ****           dprintf("rgblight rainbow set hsv: %u,%u,%d,%u\n", i, _hue, direction, range);
 1195               		.loc 1 441 0 discriminator 4
 1196 00c6 8C81      		ldd r24,Y+4
 1197 00c8 682E      		mov r6,r24
 1198 00ca 880F      		lsl r24
 1199 00cc 7708      		sbc r7,r7
 1200 00ce C401      		movw r24,r8
 1201 00d0 6EE0      		ldi r22,lo8(14)
 1202 00d2 70E0      		ldi r23,0
 1203 00d4 0E94 0000 		call __udivmodhi4
 1204 00d8 669E      		mul r6,r22
 1205 00da 2001      		movw r4,r0
 1206 00dc 679E      		mul r6,r23
 1207 00de 500C      		add r5,r0
 1208 00e0 769E      		mul r7,r22
 1209 00e2 500C      		add r5,r0
 1210 00e4 1124      		clr r1
 1211 00e6 5801      		movw r10,r16
 1212 00e8 98E9      		ldi r25,-104
 1213 00ea A91A      		sub r10,r25
 1214 00ec 9EEF      		ldi r25,-2
 1215 00ee B90A      		sbc r11,r25
 1216 00f0 80E0      		ldi r24,lo8(led)
 1217 00f2 C82E      		mov r12,r24
 1218 00f4 80E0      		ldi r24,hi8(led)
 1219 00f6 D82E      		mov r13,r24
 1220 00f8 E12C      		mov r14,__zero_reg__
 1221 00fa F12C      		mov r15,__zero_reg__
 1222               	.LVL87:
 1223               	.L87:
 441:quantum/rgblight.c ****           dprintf("rgblight rainbow set hsv: %u,%u,%d,%u\n", i, _hue, direction, range);
 1224               		.loc 1 441 0 is_stmt 0
 1225 00fc C501      		movw r24,r10
 1226 00fe 68E6      		ldi r22,lo8(104)
 1227 0100 71E0      		ldi r23,lo8(1)
 1228 0102 0E94 0000 		call __udivmodhi4
 1229               	.LVL88:
 442:quantum/rgblight.c ****           sethsv(_hue, sat, val, (LED_TYPE *)&led[i]);
 1230               		.loc 1 442 0 is_stmt 1
 1231 0106 2091 0000 		lds r18,debug_config
 1232 010a 20FF      		sbrs r18,0
 1233 010c 00C0      		rjmp .L86
 442:quantum/rgblight.c ****           sethsv(_hue, sat, val, (LED_TYPE *)&led[i]);
 1234               		.loc 1 442 0 is_stmt 0 discriminator 1
 1235 010e 9F92      		push r9
 1236 0110 8F92      		push r8
 1237 0112 7F92      		push r7
 1238 0114 AC81      		ldd r26,Y+4
 1239 0116 AF93      		push r26
 1240 0118 9F93      		push r25
 1241 011a 8F93      		push r24
 1242 011c FF92      		push r15
 1243 011e EF92      		push r14
 1244 0120 A0E0      		ldi r26,lo8(__c.2296)
 1245 0122 B0E0      		ldi r27,hi8(__c.2296)
 1246 0124 BF93      		push r27
 1247 0126 AF93      		push r26
 1248 0128 8E83      		std Y+6,r24
 1249 012a 9F83      		std Y+7,r25
 1250 012c 0E94 0000 		call __xprintf
 1251               	.LVL89:
 1252 0130 0FB6      		in __tmp_reg__,__SREG__
 1253 0132 F894      		cli
 1254 0134 DEBF      		out __SP_H__,r29
 1255 0136 0FBE      		out __SREG__,__tmp_reg__
 1256 0138 CDBF      		out __SP_L__,r28
 1257 013a 9F81      		ldd r25,Y+7
 1258 013c 8E81      		ldd r24,Y+6
 1259               	.L86:
 443:quantum/rgblight.c ****         }
 1260               		.loc 1 443 0 is_stmt 1 discriminator 2
 1261 013e 9601      		movw r18,r12
 1262 0140 432D      		mov r20,r3
 1263 0142 622D      		mov r22,r2
 1264 0144 0E94 0000 		call sethsv
 1265               	.LVL90:
 1266 0148 BFEF      		ldi r27,-1
 1267 014a EB1A      		sub r14,r27
 1268 014c FB0A      		sbc r15,r27
 1269               	.LVL91:
 1270 014e A40C      		add r10,r4
 1271 0150 B51C      		adc r11,r5
 1272 0152 23E0      		ldi r18,3
 1273 0154 C20E      		add r12,r18
 1274 0156 D11C      		adc r13,__zero_reg__
 440:quantum/rgblight.c ****           _hue = (range / RGBLED_NUM * i * direction + hue + 360) % 360;
 1275               		.loc 1 440 0 discriminator 2
 1276 0158 3EE0      		ldi r19,14
 1277 015a E316      		cp r14,r19
 1278 015c F104      		cpc r15,__zero_reg__
 1279 015e 01F4      		brne .L87
 1280               	.LBE32:
 445:quantum/rgblight.c ****       }
 1281               		.loc 1 445 0
 1282 0160 0E94 0000 		call rgblight_set
 1283               	.LVL92:
 1284               	.L82:
 1285               	.LBE30:
 448:quantum/rgblight.c ****     rgblight_config.sat = sat;
 1286               		.loc 1 448 0
 1287 0164 8091 0000 		lds r24,rgblight_config
 1288 0168 00FB      		bst r16,0
 1289 016a 87F9      		bld r24,7
 1290 016c 8093 0000 		sts rgblight_config,r24
 1291 0170 8091 0000 		lds r24,rgblight_config+1
 1292 0174 8078      		andi r24,lo8(-128)
 1293 0176 902F      		mov r25,r16
 1294 0178 9695      		lsr r25
 1295 017a 892B      		or r24,r25
 1296 017c 10FB      		bst r17,0
 1297 017e 87F9      		bld r24,7
 1298 0180 8093 0000 		sts rgblight_config+1,r24
 449:quantum/rgblight.c ****     rgblight_config.val = val;
 1299               		.loc 1 449 0
 1300 0184 2092 0000 		sts rgblight_config+2,r2
 450:quantum/rgblight.c ****     if (write_to_eeprom) {
 1301               		.loc 1 450 0
 1302 0188 3092 0000 		sts rgblight_config+3,r3
 451:quantum/rgblight.c ****       eeconfig_update_rgblight(rgblight_config.raw);
 1303               		.loc 1 451 0
 1304 018c 8D81      		ldd r24,Y+5
 1305 018e 8823      		tst r24
 1306 0190 01F0      		breq .L88
 452:quantum/rgblight.c ****       xprintf("rgblight set hsv [EEPROM]: %u,%u,%u\n", rgblight_config.hue, rgblight_config.sat, rg
 1307               		.loc 1 452 0
 1308 0192 6091 0000 		lds r22,rgblight_config
 1309 0196 7091 0000 		lds r23,rgblight_config+1
 1310 019a 8091 0000 		lds r24,rgblight_config+2
 1311 019e 9091 0000 		lds r25,rgblight_config+3
 1312 01a2 0E94 0000 		call eeconfig_update_rgblight
 1313               	.LVL93:
 453:quantum/rgblight.c ****     } else {
 1314               		.loc 1 453 0
 1315 01a6 8091 0000 		lds r24,rgblight_config+3
 1316 01aa 1F92      		push __zero_reg__
 1317 01ac 8F93      		push r24
 1318 01ae 8091 0000 		lds r24,rgblight_config+2
 1319 01b2 1F92      		push __zero_reg__
 1320 01b4 8F93      		push r24
 1321 01b6 8091 0000 		lds r24,rgblight_config
 1322 01ba 881F      		rol r24
 1323 01bc 8827      		clr r24
 1324 01be 881F      		rol r24
 1325 01c0 9091 0000 		lds r25,rgblight_config+1
 1326 01c4 292F      		mov r18,r25
 1327 01c6 220F      		lsl r18
 1328 01c8 822B      		or r24,r18
 1329 01ca 97FB      		bst r25,7
 1330 01cc 9927      		clr r25
 1331 01ce 90F9      		bld r25,0
 1332 01d0 9F93      		push r25
 1333 01d2 8F93      		push r24
 1334 01d4 80E0      		ldi r24,lo8(__c.2301)
 1335 01d6 90E0      		ldi r25,hi8(__c.2301)
 1336 01d8 00C0      		rjmp .L98
 1337               	.L88:
 455:quantum/rgblight.c ****     }
 1338               		.loc 1 455 0
 1339 01da 1F92      		push __zero_reg__
 1340 01dc 3F92      		push r3
 1341 01de 1F92      		push __zero_reg__
 1342 01e0 2F92      		push r2
 1343 01e2 1170      		andi r17,1
 1344               	.LVL94:
 1345 01e4 1F93      		push r17
 1346 01e6 0F93      		push r16
 1347 01e8 80E0      		ldi r24,lo8(__c.2303)
 1348 01ea 90E0      		ldi r25,hi8(__c.2303)
 1349               	.L98:
 1350 01ec 9F93      		push r25
 1351 01ee 8F93      		push r24
 1352 01f0 0E94 0000 		call __xprintf
 1353               	.LVL95:
 1354 01f4 0FB6      		in __tmp_reg__,__SREG__
 1355 01f6 F894      		cli
 1356 01f8 DEBF      		out __SP_H__,r29
 1357 01fa 0FBE      		out __SREG__,__tmp_reg__
 1358 01fc CDBF      		out __SP_L__,r28
 1359               	.L79:
 1360               	/* epilogue start */
 458:quantum/rgblight.c **** 
 1361               		.loc 1 458 0
 1362 01fe 2796      		adiw r28,7
 1363 0200 0FB6      		in __tmp_reg__,__SREG__
 1364 0202 F894      		cli
 1365 0204 DEBF      		out __SP_H__,r29
 1366 0206 0FBE      		out __SREG__,__tmp_reg__
 1367 0208 CDBF      		out __SP_L__,r28
 1368 020a DF91      		pop r29
 1369 020c CF91      		pop r28
 1370 020e 1F91      		pop r17
 1371 0210 0F91      		pop r16
 1372 0212 FF90      		pop r15
 1373 0214 EF90      		pop r14
 1374 0216 DF90      		pop r13
 1375 0218 CF90      		pop r12
 1376 021a BF90      		pop r11
 1377 021c AF90      		pop r10
 1378 021e 9F90      		pop r9
 1379 0220 8F90      		pop r8
 1380 0222 7F90      		pop r7
 1381 0224 6F90      		pop r6
 1382 0226 5F90      		pop r5
 1383 0228 4F90      		pop r4
 1384 022a 3F90      		pop r3
 1385               	.LVL96:
 1386 022c 2F90      		pop r2
 1387               	.LVL97:
 1388 022e 0895      		ret
 1389               		.cfi_endproc
 1390               	.LFE40:
 1392               		.section	.text.rgblight_sethsv,"ax",@progbits
 1393               	.global	rgblight_sethsv
 1395               	rgblight_sethsv:
 1396               	.LFB41:
 460:quantum/rgblight.c ****   rgblight_sethsv_eeprom_helper(hue, sat, val, true);
 1397               		.loc 1 460 0
 1398               		.cfi_startproc
 1399               	.LVL98:
 1400               	/* prologue: function */
 1401               	/* frame size = 0 */
 1402               	/* stack size = 0 */
 1403               	.L__stack_usage = 0
 461:quantum/rgblight.c **** }
 1404               		.loc 1 461 0
 1405 0000 21E0      		ldi r18,lo8(1)
 1406 0002 0C94 0000 		jmp rgblight_sethsv_eeprom_helper
 1407               	.LVL99:
 1408               		.cfi_endproc
 1409               	.LFE41:
 1411               		.section	.text.rgblight_increase_hue,"ax",@progbits
 1412               	.global	rgblight_increase_hue
 1414               	rgblight_increase_hue:
 1415               	.LFB31:
 351:quantum/rgblight.c ****   uint16_t hue;
 1416               		.loc 1 351 0
 1417               		.cfi_startproc
 1418               	/* prologue: function */
 1419               	/* frame size = 0 */
 1420               	/* stack size = 0 */
 1421               	.L__stack_usage = 0
 1422               	.LVL100:
 354:quantum/rgblight.c **** }
 1423               		.loc 1 354 0
 1424 0000 E0E0      		ldi r30,lo8(rgblight_config)
 1425 0002 F0E0      		ldi r31,hi8(rgblight_config)
 1426               	.LVL101:
 353:quantum/rgblight.c ****   rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
 1427               		.loc 1 353 0
 1428 0004 2081      		ld r18,Z
 1429 0006 221F      		rol r18
 1430 0008 2227      		clr r18
 1431 000a 221F      		rol r18
 1432 000c 3091 0000 		lds r19,rgblight_config+1
 1433 0010 432F      		mov r20,r19
 1434 0012 440F      		lsl r20
 1435 0014 842F      		mov r24,r20
 1436 0016 822B      		or r24,r18
 1437 0018 37FB      		bst r19,7
 1438 001a 9927      		clr r25
 1439 001c 90F9      		bld r25,0
 1440 001e 0896      		adiw r24,8
 1441 0020 68E6      		ldi r22,lo8(104)
 1442 0022 71E0      		ldi r23,lo8(1)
 1443 0024 0E94 0000 		call __divmodhi4
 354:quantum/rgblight.c **** }
 1444               		.loc 1 354 0
 1445 0028 4381      		ldd r20,Z+3
 1446 002a 6281      		ldd r22,Z+2
 1447 002c 0C94 0000 		jmp rgblight_sethsv
 1448               	.LVL102:
 1449               		.cfi_endproc
 1450               	.LFE31:
 1452               		.section	.text.rgblight_decrease_hue,"ax",@progbits
 1453               	.global	rgblight_decrease_hue
 1455               	rgblight_decrease_hue:
 1456               	.LFB32:
 356:quantum/rgblight.c ****   uint16_t hue;
 1457               		.loc 1 356 0
 1458               		.cfi_startproc
 1459               	/* prologue: function */
 1460               	/* frame size = 0 */
 1461               	/* stack size = 0 */
 1462               	.L__stack_usage = 0
 358:quantum/rgblight.c ****     hue = (rgblight_config.hue + 360 - RGBLIGHT_HUE_STEP) % 360;
 1463               		.loc 1 358 0
 1464 0000 2091 0000 		lds r18,rgblight_config
 1465 0004 221F      		rol r18
 1466 0006 2227      		clr r18
 1467 0008 221F      		rol r18
 1468 000a 3091 0000 		lds r19,rgblight_config+1
 1469 000e 432F      		mov r20,r19
 1470 0010 440F      		lsl r20
 1471 0012 842F      		mov r24,r20
 1472 0014 822B      		or r24,r18
 1473 0016 37FB      		bst r19,7
 1474 0018 9927      		clr r25
 1475 001a 90F9      		bld r25,0
 1476 001c 8830      		cpi r24,8
 1477 001e 9105      		cpc r25,__zero_reg__
 1478 0020 04F4      		brge .L102
 359:quantum/rgblight.c ****   } else {
 1479               		.loc 1 359 0
 1480 0022 805A      		subi r24,-96
 1481 0024 9E4F      		sbci r25,-2
 1482 0026 00C0      		rjmp .L104
 1483               	.L102:
 361:quantum/rgblight.c ****   }
 1484               		.loc 1 361 0
 1485 0028 0897      		sbiw r24,8
 1486               	.L104:
 1487 002a 68E6      		ldi r22,lo8(104)
 1488 002c 71E0      		ldi r23,lo8(1)
 1489 002e 0E94 0000 		call __divmodhi4
 1490               	.LVL103:
 363:quantum/rgblight.c **** }
 1491               		.loc 1 363 0
 1492 0032 4091 0000 		lds r20,rgblight_config+3
 1493 0036 6091 0000 		lds r22,rgblight_config+2
 1494 003a 0C94 0000 		jmp rgblight_sethsv
 1495               	.LVL104:
 1496               		.cfi_endproc
 1497               	.LFE32:
 1499               		.section	.text.rgblight_increase_sat,"ax",@progbits
 1500               	.global	rgblight_increase_sat
 1502               	rgblight_increase_sat:
 1503               	.LFB33:
 365:quantum/rgblight.c ****   uint8_t sat;
 1504               		.loc 1 365 0
 1505               		.cfi_startproc
 1506               	/* prologue: function */
 1507               	/* frame size = 0 */
 1508               	/* stack size = 0 */
 1509               	.L__stack_usage = 0
 367:quantum/rgblight.c ****     sat = 255;
 1510               		.loc 1 367 0
 1511 0000 6091 0000 		lds r22,rgblight_config+2
 1512 0004 862F      		mov r24,r22
 1513 0006 90E0      		ldi r25,0
 1514 0008 883F      		cpi r24,-8
 1515 000a 9105      		cpc r25,__zero_reg__
 1516 000c 04F4      		brge .L107
 370:quantum/rgblight.c ****   }
 1517               		.loc 1 370 0
 1518 000e 685F      		subi r22,lo8(-(8))
 1519               	.LVL105:
 1520 0010 00C0      		rjmp .L106
 1521               	.LVL106:
 1522               	.L107:
 368:quantum/rgblight.c ****   } else {
 1523               		.loc 1 368 0
 1524 0012 6FEF      		ldi r22,lo8(-1)
 1525               	.L106:
 1526               	.LVL107:
 372:quantum/rgblight.c **** }
 1527               		.loc 1 372 0
 1528 0014 8091 0000 		lds r24,rgblight_config
 1529 0018 881F      		rol r24
 1530 001a 8827      		clr r24
 1531 001c 881F      		rol r24
 1532 001e 9091 0000 		lds r25,rgblight_config+1
 1533 0022 292F      		mov r18,r25
 1534 0024 220F      		lsl r18
 1535 0026 97FB      		bst r25,7
 1536 0028 9927      		clr r25
 1537 002a 90F9      		bld r25,0
 1538 002c 4091 0000 		lds r20,rgblight_config+3
 1539 0030 822B      		or r24,r18
 1540 0032 0C94 0000 		jmp rgblight_sethsv
 1541               	.LVL108:
 1542               		.cfi_endproc
 1543               	.LFE33:
 1545               		.section	.text.rgblight_decrease_sat,"ax",@progbits
 1546               	.global	rgblight_decrease_sat
 1548               	rgblight_decrease_sat:
 1549               	.LFB34:
 374:quantum/rgblight.c ****   uint8_t sat;
 1550               		.loc 1 374 0
 1551               		.cfi_startproc
 1552               	/* prologue: function */
 1553               	/* frame size = 0 */
 1554               	/* stack size = 0 */
 1555               	.L__stack_usage = 0
 376:quantum/rgblight.c ****     sat = 0;
 1556               		.loc 1 376 0
 1557 0000 6091 0000 		lds r22,rgblight_config+2
 1558 0004 862F      		mov r24,r22
 1559 0006 90E0      		ldi r25,0
 1560 0008 0897      		sbiw r24,8
 1561 000a 04F0      		brlt .L110
 379:quantum/rgblight.c ****   }
 1562               		.loc 1 379 0
 1563 000c 6850      		subi r22,lo8(-(-8))
 1564               	.LVL109:
 1565 000e 00C0      		rjmp .L109
 1566               	.LVL110:
 1567               	.L110:
 377:quantum/rgblight.c ****   } else {
 1568               		.loc 1 377 0
 1569 0010 60E0      		ldi r22,0
 1570               	.L109:
 1571               	.LVL111:
 381:quantum/rgblight.c **** }
 1572               		.loc 1 381 0
 1573 0012 8091 0000 		lds r24,rgblight_config
 1574 0016 881F      		rol r24
 1575 0018 8827      		clr r24
 1576 001a 881F      		rol r24
 1577 001c 9091 0000 		lds r25,rgblight_config+1
 1578 0020 292F      		mov r18,r25
 1579 0022 220F      		lsl r18
 1580 0024 97FB      		bst r25,7
 1581 0026 9927      		clr r25
 1582 0028 90F9      		bld r25,0
 1583 002a 4091 0000 		lds r20,rgblight_config+3
 1584 002e 822B      		or r24,r18
 1585 0030 0C94 0000 		jmp rgblight_sethsv
 1586               	.LVL112:
 1587               		.cfi_endproc
 1588               	.LFE34:
 1590               		.section	.text.rgblight_increase_val,"ax",@progbits
 1591               	.global	rgblight_increase_val
 1593               	rgblight_increase_val:
 1594               	.LFB35:
 383:quantum/rgblight.c ****   uint8_t val;
 1595               		.loc 1 383 0
 1596               		.cfi_startproc
 1597               	/* prologue: function */
 1598               	/* frame size = 0 */
 1599               	/* stack size = 0 */
 1600               	.L__stack_usage = 0
 385:quantum/rgblight.c ****     val = RGBLIGHT_LIMIT_VAL;
 1601               		.loc 1 385 0
 1602 0000 4091 0000 		lds r20,rgblight_config+3
 1603 0004 842F      		mov r24,r20
 1604 0006 90E0      		ldi r25,0
 1605 0008 883F      		cpi r24,-8
 1606 000a 9105      		cpc r25,__zero_reg__
 1607 000c 04F4      		brge .L113
 388:quantum/rgblight.c ****   }
 1608               		.loc 1 388 0
 1609 000e 485F      		subi r20,lo8(-(8))
 1610               	.LVL113:
 1611 0010 00C0      		rjmp .L112
 1612               	.LVL114:
 1613               	.L113:
 386:quantum/rgblight.c ****   } else {
 1614               		.loc 1 386 0
 1615 0012 4FEF      		ldi r20,lo8(-1)
 1616               	.L112:
 1617               	.LVL115:
 390:quantum/rgblight.c **** }
 1618               		.loc 1 390 0
 1619 0014 8091 0000 		lds r24,rgblight_config
 1620 0018 881F      		rol r24
 1621 001a 8827      		clr r24
 1622 001c 881F      		rol r24
 1623 001e 9091 0000 		lds r25,rgblight_config+1
 1624 0022 292F      		mov r18,r25
 1625 0024 220F      		lsl r18
 1626 0026 97FB      		bst r25,7
 1627 0028 9927      		clr r25
 1628 002a 90F9      		bld r25,0
 1629 002c 6091 0000 		lds r22,rgblight_config+2
 1630 0030 822B      		or r24,r18
 1631 0032 0C94 0000 		jmp rgblight_sethsv
 1632               	.LVL116:
 1633               		.cfi_endproc
 1634               	.LFE35:
 1636               		.section	.text.rgblight_decrease_val,"ax",@progbits
 1637               	.global	rgblight_decrease_val
 1639               	rgblight_decrease_val:
 1640               	.LFB36:
 392:quantum/rgblight.c ****   uint8_t val;
 1641               		.loc 1 392 0
 1642               		.cfi_startproc
 1643               	/* prologue: function */
 1644               	/* frame size = 0 */
 1645               	/* stack size = 0 */
 1646               	.L__stack_usage = 0
 394:quantum/rgblight.c ****     val = 0;
 1647               		.loc 1 394 0
 1648 0000 4091 0000 		lds r20,rgblight_config+3
 1649 0004 842F      		mov r24,r20
 1650 0006 90E0      		ldi r25,0
 1651 0008 0897      		sbiw r24,8
 1652 000a 04F0      		brlt .L116
 397:quantum/rgblight.c ****   }
 1653               		.loc 1 397 0
 1654 000c 4850      		subi r20,lo8(-(-8))
 1655               	.LVL117:
 1656 000e 00C0      		rjmp .L115
 1657               	.LVL118:
 1658               	.L116:
 395:quantum/rgblight.c ****   } else {
 1659               		.loc 1 395 0
 1660 0010 40E0      		ldi r20,0
 1661               	.L115:
 1662               	.LVL119:
 399:quantum/rgblight.c **** }
 1663               		.loc 1 399 0
 1664 0012 8091 0000 		lds r24,rgblight_config
 1665 0016 881F      		rol r24
 1666 0018 8827      		clr r24
 1667 001a 881F      		rol r24
 1668 001c 9091 0000 		lds r25,rgblight_config+1
 1669 0020 292F      		mov r18,r25
 1670 0022 220F      		lsl r18
 1671 0024 97FB      		bst r25,7
 1672 0026 9927      		clr r25
 1673 0028 90F9      		bld r25,0
 1674 002a 6091 0000 		lds r22,rgblight_config+2
 1675 002e 822B      		or r24,r18
 1676 0030 0C94 0000 		jmp rgblight_sethsv
 1677               	.LVL120:
 1678               		.cfi_endproc
 1679               	.LFE36:
 1681               		.section	.text.rgblight_sethsv_noeeprom,"ax",@progbits
 1682               	.global	rgblight_sethsv_noeeprom
 1684               	rgblight_sethsv_noeeprom:
 1685               	.LFB42:
 464:quantum/rgblight.c ****   rgblight_sethsv_eeprom_helper(hue, sat, val, false);
 1686               		.loc 1 464 0
 1687               		.cfi_startproc
 1688               	.LVL121:
 1689               	/* prologue: function */
 1690               	/* frame size = 0 */
 1691               	/* stack size = 0 */
 1692               	.L__stack_usage = 0
 465:quantum/rgblight.c **** }
 1693               		.loc 1 465 0
 1694 0000 20E0      		ldi r18,0
 1695 0002 0C94 0000 		jmp rgblight_sethsv_eeprom_helper
 1696               	.LVL122:
 1697               		.cfi_endproc
 1698               	.LFE42:
 1700               		.section	.text.rgblight_setrgb_at,"ax",@progbits
 1701               	.global	rgblight_setrgb_at
 1703               	rgblight_setrgb_at:
 1704               	.LFB47:
 491:quantum/rgblight.c ****   if (!rgblight_config.enable || index >= RGBLED_NUM) { return; }
 1705               		.loc 1 491 0
 1706               		.cfi_startproc
 1707               	.LVL123:
 1708               	/* prologue: function */
 1709               	/* frame size = 0 */
 1710               	/* stack size = 0 */
 1711               	.L__stack_usage = 0
 492:quantum/rgblight.c **** 
 1712               		.loc 1 492 0
 1713 0000 9091 0000 		lds r25,rgblight_config
 1714 0004 90FF      		sbrs r25,0
 1715 0006 00C0      		rjmp .L118
 492:quantum/rgblight.c **** 
 1716               		.loc 1 492 0 is_stmt 0 discriminator 1
 1717 0008 2E30      		cpi r18,lo8(14)
 1718 000a 00F4      		brsh .L118
 494:quantum/rgblight.c ****   led[index].g = g;
 1719               		.loc 1 494 0 is_stmt 1
 1720 000c 30E0      		ldi r19,0
 1721 000e F901      		movw r30,r18
 1722 0010 EE0F      		lsl r30
 1723 0012 FF1F      		rol r31
 1724 0014 2E0F      		add r18,r30
 1725 0016 3F1F      		adc r19,r31
 1726               	.LVL124:
 1727 0018 F901      		movw r30,r18
 1728 001a E050      		subi r30,lo8(-(led))
 1729 001c F040      		sbci r31,hi8(-(led))
 1730 001e 8183      		std Z+1,r24
 495:quantum/rgblight.c ****   led[index].b = b;
 1731               		.loc 1 495 0
 1732 0020 6083      		st Z,r22
 496:quantum/rgblight.c ****   rgblight_set();
 1733               		.loc 1 496 0
 1734 0022 4283      		std Z+2,r20
 497:quantum/rgblight.c **** }
 1735               		.loc 1 497 0
 1736 0024 0C94 0000 		jmp rgblight_set
 1737               	.LVL125:
 1738               	.L118:
 1739 0028 0895      		ret
 1740               		.cfi_endproc
 1741               	.LFE47:
 1743               		.section	.text.rgblight_sethsv_at,"ax",@progbits
 1744               	.global	rgblight_sethsv_at
 1746               	rgblight_sethsv_at:
 1747               	.LFB48:
 500:quantum/rgblight.c ****   if (!rgblight_config.enable) { return; }
 1748               		.loc 1 500 0
 1749               		.cfi_startproc
 1750               	.LVL126:
 1751 0000 1F93      		push r17
 1752               	.LCFI63:
 1753               		.cfi_def_cfa_offset 3
 1754               		.cfi_offset 17, -2
 1755 0002 CF93      		push r28
 1756               	.LCFI64:
 1757               		.cfi_def_cfa_offset 4
 1758               		.cfi_offset 28, -3
 1759 0004 DF93      		push r29
 1760               	.LCFI65:
 1761               		.cfi_def_cfa_offset 5
 1762               		.cfi_offset 29, -4
 1763 0006 00D0      		rcall .
 1764 0008 1F92      		push __zero_reg__
 1765               	.LCFI66:
 1766               		.cfi_def_cfa_offset 8
 1767 000a CDB7      		in r28,__SP_L__
 1768 000c DEB7      		in r29,__SP_H__
 1769               	.LCFI67:
 1770               		.cfi_def_cfa_register 28
 1771               	/* prologue: function */
 1772               	/* frame size = 3 */
 1773               	/* stack size = 6 */
 1774               	.L__stack_usage = 6
 501:quantum/rgblight.c **** 
 1775               		.loc 1 501 0
 1776 000e 3091 0000 		lds r19,rgblight_config
 1777 0012 30FF      		sbrs r19,0
 1778 0014 00C0      		rjmp .L123
 1779 0016 122F      		mov r17,r18
 504:quantum/rgblight.c ****   rgblight_setrgb_at(tmp_led.r, tmp_led.g, tmp_led.b, index);
 1780               		.loc 1 504 0
 1781 0018 9E01      		movw r18,r28
 1782               	.LVL127:
 1783 001a 2F5F      		subi r18,-1
 1784 001c 3F4F      		sbci r19,-1
 1785 001e 0E94 0000 		call sethsv
 1786               	.LVL128:
 505:quantum/rgblight.c **** }
 1787               		.loc 1 505 0
 1788 0022 212F      		mov r18,r17
 1789 0024 4B81      		ldd r20,Y+3
 1790 0026 6981      		ldd r22,Y+1
 1791 0028 8A81      		ldd r24,Y+2
 1792 002a 0E94 0000 		call rgblight_setrgb_at
 1793               	.LVL129:
 1794               	.L123:
 1795               	/* epilogue start */
 506:quantum/rgblight.c **** 
 1796               		.loc 1 506 0
 1797 002e 0F90      		pop __tmp_reg__
 1798 0030 0F90      		pop __tmp_reg__
 1799 0032 0F90      		pop __tmp_reg__
 1800 0034 DF91      		pop r29
 1801 0036 CF91      		pop r28
 1802 0038 1F91      		pop r17
 1803 003a 0895      		ret
 1804               		.cfi_endproc
 1805               	.LFE48:
 1807               		.section	.text.rgblight_timer_init,"ax",@progbits
 1808               	.global	rgblight_timer_init
 1810               	rgblight_timer_init:
 1811               	.LFB50:
 521:quantum/rgblight.c ****     }
 522:quantum/rgblight.c ****     #ifdef RGBW
 523:quantum/rgblight.c ****       ws2812_setleds_rgbw(led, RGBLED_NUM);
 524:quantum/rgblight.c ****     #else
 525:quantum/rgblight.c ****       ws2812_setleds(led, RGBLED_NUM);
 526:quantum/rgblight.c ****     #endif
 527:quantum/rgblight.c ****   }
 528:quantum/rgblight.c **** }
 529:quantum/rgblight.c **** #endif
 530:quantum/rgblight.c **** 
 531:quantum/rgblight.c **** #ifdef RGBLIGHT_ANIMATIONS
 532:quantum/rgblight.c **** 
 533:quantum/rgblight.c **** // Animation timer -- AVR Timer3
 534:quantum/rgblight.c **** void rgblight_timer_init(void) {
 1812               		.loc 1 534 0
 1813               		.cfi_startproc
 1814               	/* prologue: function */
 1815               	/* frame size = 0 */
 1816               	/* stack size = 0 */
 1817               	.L__stack_usage = 0
 535:quantum/rgblight.c ****   // static uint8_t rgblight_timer_is_init = 0;
 536:quantum/rgblight.c ****   // if (rgblight_timer_is_init) {
 537:quantum/rgblight.c ****   //   return;
 538:quantum/rgblight.c ****   // }
 539:quantum/rgblight.c ****   // rgblight_timer_is_init = 1;
 540:quantum/rgblight.c ****   // /* Timer 3 setup */
 541:quantum/rgblight.c ****   // TCCR3B = _BV(WGM32) // CTC mode OCR3A as TOP
 542:quantum/rgblight.c ****   //       | _BV(CS30); // Clock selelct: clk/1
 543:quantum/rgblight.c ****   // /* Set TOP value */
 544:quantum/rgblight.c ****   // uint8_t sreg = SREG;
 545:quantum/rgblight.c ****   // cli();
 546:quantum/rgblight.c ****   // OCR3AH = (RGBLED_TIMER_TOP >> 8) & 0xff;
 547:quantum/rgblight.c ****   // OCR3AL = RGBLED_TIMER_TOP & 0xff;
 548:quantum/rgblight.c ****   // SREG = sreg;
 549:quantum/rgblight.c **** 
 550:quantum/rgblight.c ****   rgblight_timer_enabled = true;
 1818               		.loc 1 550 0
 1819 0000 81E0      		ldi r24,lo8(1)
 1820 0002 8093 0000 		sts rgblight_timer_enabled,r24
 1821 0006 0895      		ret
 1822               		.cfi_endproc
 1823               	.LFE50:
 1825               		.section	.text.rgblight_timer_enable,"ax",@progbits
 1826               	.global	rgblight_timer_enable
 1828               	rgblight_timer_enable:
 1829               	.LFB51:
 551:quantum/rgblight.c **** }
 552:quantum/rgblight.c **** void rgblight_timer_enable(void) {
 1830               		.loc 1 552 0
 1831               		.cfi_startproc
 1832               	/* prologue: function */
 1833               	/* frame size = 0 */
 1834               	/* stack size = 0 */
 1835               	.L__stack_usage = 0
 553:quantum/rgblight.c ****   rgblight_timer_enabled = true;
 1836               		.loc 1 553 0
 1837 0000 81E0      		ldi r24,lo8(1)
 1838 0002 8093 0000 		sts rgblight_timer_enabled,r24
 554:quantum/rgblight.c ****   dprintf("TIMER3 enabled.\n");
 1839               		.loc 1 554 0
 1840 0006 8091 0000 		lds r24,debug_config
 1841 000a 80FF      		sbrs r24,0
 1842 000c 00C0      		rjmp .L130
 1843               		.loc 1 554 0 is_stmt 0 discriminator 1
 1844 000e 80E0      		ldi r24,lo8(__c.2359)
 1845 0010 90E0      		ldi r25,hi8(__c.2359)
 1846 0012 9F93      		push r25
 1847               	.LCFI68:
 1848               		.cfi_def_cfa_offset 3
 1849 0014 8F93      		push r24
 1850               	.LCFI69:
 1851               		.cfi_def_cfa_offset 4
 1852 0016 0E94 0000 		call __xprintf
 1853               	.LVL130:
 1854 001a 0F90      		pop __tmp_reg__
 1855 001c 0F90      		pop __tmp_reg__
 1856               	.LCFI70:
 1857               		.cfi_def_cfa_offset 2
 1858               	.L130:
 1859 001e 0895      		ret
 1860               		.cfi_endproc
 1861               	.LFE51:
 1863               		.section	.text.rgblight_timer_disable,"ax",@progbits
 1864               	.global	rgblight_timer_disable
 1866               	rgblight_timer_disable:
 1867               	.LFB52:
 555:quantum/rgblight.c **** }
 556:quantum/rgblight.c **** void rgblight_timer_disable(void) {
 1868               		.loc 1 556 0 is_stmt 1
 1869               		.cfi_startproc
 1870               	/* prologue: function */
 1871               	/* frame size = 0 */
 1872               	/* stack size = 0 */
 1873               	.L__stack_usage = 0
 557:quantum/rgblight.c ****   rgblight_timer_enabled = false;
 1874               		.loc 1 557 0
 1875 0000 1092 0000 		sts rgblight_timer_enabled,__zero_reg__
 558:quantum/rgblight.c ****   dprintf("TIMER3 disabled.\n");
 1876               		.loc 1 558 0
 1877 0004 8091 0000 		lds r24,debug_config
 1878 0008 80FF      		sbrs r24,0
 1879 000a 00C0      		rjmp .L135
 1880               		.loc 1 558 0 is_stmt 0 discriminator 1
 1881 000c 80E0      		ldi r24,lo8(__c.2364)
 1882 000e 90E0      		ldi r25,hi8(__c.2364)
 1883 0010 9F93      		push r25
 1884               	.LCFI71:
 1885               		.cfi_def_cfa_offset 3
 1886 0012 8F93      		push r24
 1887               	.LCFI72:
 1888               		.cfi_def_cfa_offset 4
 1889 0014 0E94 0000 		call __xprintf
 1890               	.LVL131:
 1891 0018 0F90      		pop __tmp_reg__
 1892 001a 0F90      		pop __tmp_reg__
 1893               	.LCFI73:
 1894               		.cfi_def_cfa_offset 2
 1895               	.L135:
 1896 001c 0895      		ret
 1897               		.cfi_endproc
 1898               	.LFE52:
 1900               		.section	.text.rgblight_mode_eeprom_helper,"ax",@progbits
 1901               	.global	rgblight_mode_eeprom_helper
 1903               	rgblight_mode_eeprom_helper:
 1904               	.LFB20:
 228:quantum/rgblight.c ****   if (!rgblight_config.enable) {
 1905               		.loc 1 228 0 is_stmt 1
 1906               		.cfi_startproc
 1907               	.LVL132:
 1908               	/* prologue: function */
 1909               	/* frame size = 0 */
 1910               	/* stack size = 0 */
 1911               	.L__stack_usage = 0
 229:quantum/rgblight.c ****     return;
 1912               		.loc 1 229 0
 1913 0000 9091 0000 		lds r25,rgblight_config
 1914 0004 90FF      		sbrs r25,0
 1915 0006 00C0      		rjmp .L140
 1916 0008 9178      		andi r25,lo8(-127)
 232:quantum/rgblight.c ****     rgblight_config.mode = 1;
 1917               		.loc 1 232 0
 1918 000a 8111      		cpse r24,__zero_reg__
 1919 000c 00C0      		rjmp .L142
 233:quantum/rgblight.c ****   } else if (mode > RGBLIGHT_MODES) {
 1920               		.loc 1 233 0
 1921 000e 9260      		ori r25,lo8(2)
 1922 0010 00C0      		rjmp .L155
 1923               	.L142:
 234:quantum/rgblight.c ****     rgblight_config.mode = RGBLIGHT_MODES;
 1924               		.loc 1 234 0
 1925 0012 8532      		cpi r24,lo8(37)
 1926 0014 00F0      		brlo .L144
 235:quantum/rgblight.c ****   } else {
 1927               		.loc 1 235 0
 1928 0016 9864      		ori r25,lo8(72)
 1929 0018 00C0      		rjmp .L155
 1930               	.L144:
 237:quantum/rgblight.c ****   }
 1931               		.loc 1 237 0
 1932 001a 8F73      		andi r24,lo8(63)
 1933               	.LVL133:
 1934 001c 880F      		lsl r24
 1935 001e 982B      		or r25,r24
 1936               	.L155:
 1937 0020 9093 0000 		sts rgblight_config,r25
 239:quantum/rgblight.c ****     eeconfig_update_rgblight(rgblight_config.raw);
 1938               		.loc 1 239 0
 1939 0024 6623      		tst r22
 1940 0026 01F0      		breq .L145
 240:quantum/rgblight.c ****     xprintf("rgblight mode [EEPROM]: %u\n", rgblight_config.mode);
 1941               		.loc 1 240 0
 1942 0028 6091 0000 		lds r22,rgblight_config
 1943 002c 7091 0000 		lds r23,rgblight_config+1
 1944 0030 8091 0000 		lds r24,rgblight_config+2
 1945 0034 9091 0000 		lds r25,rgblight_config+3
 1946               	.LVL134:
 1947 0038 0E94 0000 		call eeconfig_update_rgblight
 1948               	.LVL135:
 241:quantum/rgblight.c ****   } else {
 1949               		.loc 1 241 0
 1950 003c 8091 0000 		lds r24,rgblight_config
 1951 0040 8695      		lsr r24
 1952 0042 8F73      		andi r24,lo8(63)
 1953 0044 1F92      		push __zero_reg__
 1954               	.LCFI74:
 1955               		.cfi_remember_state
 1956               		.cfi_def_cfa_offset 3
 1957 0046 8F93      		push r24
 1958               	.LCFI75:
 1959               		.cfi_def_cfa_offset 4
 1960 0048 80E0      		ldi r24,lo8(__c.2192)
 1961 004a 90E0      		ldi r25,hi8(__c.2192)
 1962 004c 00C0      		rjmp .L156
 1963               	.LVL136:
 1964               	.L145:
 1965               	.LCFI76:
 1966               		.cfi_restore_state
 243:quantum/rgblight.c ****   }
 1967               		.loc 1 243 0
 1968 004e 8091 0000 		lds r24,rgblight_config
 1969 0052 8695      		lsr r24
 1970 0054 8F73      		andi r24,lo8(63)
 1971 0056 1F92      		push __zero_reg__
 1972               	.LCFI77:
 1973               		.cfi_def_cfa_offset 3
 1974 0058 8F93      		push r24
 1975               	.LCFI78:
 1976               		.cfi_def_cfa_offset 4
 1977 005a 80E0      		ldi r24,lo8(__c.2194)
 1978 005c 90E0      		ldi r25,hi8(__c.2194)
 1979               	.LVL137:
 1980               	.L156:
 1981 005e 9F93      		push r25
 1982               	.LCFI79:
 1983               		.cfi_def_cfa_offset 5
 1984 0060 8F93      		push r24
 1985               	.LCFI80:
 1986               		.cfi_def_cfa_offset 6
 1987 0062 0E94 0000 		call __xprintf
 1988               	.LVL138:
 1989 0066 0F90      		pop __tmp_reg__
 1990 0068 0F90      		pop __tmp_reg__
 1991 006a 0F90      		pop __tmp_reg__
 1992 006c 0F90      		pop __tmp_reg__
 1993               	.LCFI81:
 1994               		.cfi_def_cfa_offset 2
 245:quantum/rgblight.c ****     #ifdef RGBLIGHT_ANIMATIONS
 1995               		.loc 1 245 0
 1996 006e 8091 0000 		lds r24,rgblight_config
 1997 0072 982F      		mov r25,r24
 1998 0074 9E77      		andi r25,lo8(126)
 1999 0076 9230      		cpi r25,lo8(2)
 2000 0078 01F4      		brne .L147
 2001               	.L151:
 247:quantum/rgblight.c ****     #endif
 2002               		.loc 1 247 0
 2003 007a 0E94 0000 		call rgblight_timer_disable
 2004               	.LVL139:
 2005 007e 00C0      		rjmp .L148
 2006               	.L147:
 249:quantum/rgblight.c **** 	     rgblight_config.mode == 35 || rgblight_config.mode == 36) {
 2007               		.loc 1 249 0
 2008 0080 8695      		lsr r24
 2009 0082 8F73      		andi r24,lo8(63)
 2010 0084 2EE3      		ldi r18,lo8(62)
 2011 0086 280F      		add r18,r24
 2012 0088 2F73      		andi r18,lo8(63)
 2013 008a 2731      		cpi r18,lo8(23)
 2014 008c 00F0      		brlo .L149
 249:quantum/rgblight.c **** 	     rgblight_config.mode == 35 || rgblight_config.mode == 36) {
 2015               		.loc 1 249 0 is_stmt 0 discriminator 1
 2016 008e 9634      		cpi r25,lo8(70)
 2017 0090 01F0      		breq .L149
 250:quantum/rgblight.c ****     // MODE 2-5, breathing
 2018               		.loc 1 250 0 is_stmt 1
 2019 0092 9834      		cpi r25,lo8(72)
 2020 0094 01F4      		brne .L150
 2021               	.L149:
 261:quantum/rgblight.c ****     #endif
 2022               		.loc 1 261 0
 2023 0096 0E94 0000 		call rgblight_timer_enable
 2024               	.LVL140:
 2025 009a 00C0      		rjmp .L148
 2026               	.L150:
 263:quantum/rgblight.c ****     // MODE 25-34, static gradient
 2027               		.loc 1 263 0
 2028 009c 895D      		subi r24,lo8(-(39))
 2029 009e 8F73      		andi r24,lo8(63)
 2030 00a0 8A30      		cpi r24,lo8(10)
 2031 00a2 00F0      		brlo .L151
 2032               	.L148:
 270:quantum/rgblight.c **** }
 2033               		.loc 1 270 0
 2034 00a4 8091 0000 		lds r24,rgblight_config
 2035 00a8 881F      		rol r24
 2036 00aa 8827      		clr r24
 2037 00ac 881F      		rol r24
 2038 00ae 9091 0000 		lds r25,rgblight_config+1
 2039 00b2 292F      		mov r18,r25
 2040 00b4 220F      		lsl r18
 2041 00b6 97FB      		bst r25,7
 2042 00b8 9927      		clr r25
 2043 00ba 90F9      		bld r25,0
 2044 00bc 4091 0000 		lds r20,rgblight_config+3
 2045 00c0 6091 0000 		lds r22,rgblight_config+2
 2046 00c4 822B      		or r24,r18
 2047 00c6 0C94 0000 		jmp rgblight_sethsv_noeeprom
 2048               	.LVL141:
 2049               	.L140:
 2050 00ca 0895      		ret
 2051               		.cfi_endproc
 2052               	.LFE20:
 2054               		.section	.text.rgblight_mode,"ax",@progbits
 2055               	.global	rgblight_mode
 2057               	rgblight_mode:
 2058               	.LFB21:
 273:quantum/rgblight.c ****   rgblight_mode_eeprom_helper(mode, true);
 2059               		.loc 1 273 0
 2060               		.cfi_startproc
 2061               	.LVL142:
 2062               	/* prologue: function */
 2063               	/* frame size = 0 */
 2064               	/* stack size = 0 */
 2065               	.L__stack_usage = 0
 274:quantum/rgblight.c **** }
 2066               		.loc 1 274 0
 2067 0000 61E0      		ldi r22,lo8(1)
 2068 0002 0C94 0000 		jmp rgblight_mode_eeprom_helper
 2069               	.LVL143:
 2070               		.cfi_endproc
 2071               	.LFE21:
 2073               		.section	.text.rgblight_increase,"ax",@progbits
 2074               	.global	rgblight_increase
 2076               	rgblight_increase:
 2077               	.LFB15:
 188:quantum/rgblight.c ****   uint8_t mode = 0;
 2078               		.loc 1 188 0
 2079               		.cfi_startproc
 2080               	/* prologue: function */
 2081               	/* frame size = 0 */
 2082               	/* stack size = 0 */
 2083               	.L__stack_usage = 0
 2084               	.LVL144:
 190:quantum/rgblight.c ****     mode = rgblight_config.mode + 1;
 2085               		.loc 1 190 0
 2086 0000 8091 0000 		lds r24,rgblight_config
 2087 0004 8695      		lsr r24
 2088 0006 8F73      		andi r24,lo8(63)
 2089 0008 282F      		mov r18,r24
 2090 000a 30E0      		ldi r19,0
 2091 000c 2432      		cpi r18,36
 2092 000e 3105      		cpc r19,__zero_reg__
 2093 0010 04F4      		brge .L160
 191:quantum/rgblight.c ****   }
 2094               		.loc 1 191 0
 2095 0012 8F5F      		subi r24,lo8(-(1))
 2096               	.LVL145:
 2097 0014 00C0      		rjmp .L159
 2098               	.LVL146:
 2099               	.L160:
 189:quantum/rgblight.c ****   if (rgblight_config.mode < RGBLIGHT_MODES) {
 2100               		.loc 1 189 0
 2101 0016 80E0      		ldi r24,0
 2102               	.LVL147:
 2103               	.L159:
 193:quantum/rgblight.c **** }
 2104               		.loc 1 193 0
 2105 0018 0C94 0000 		jmp rgblight_mode
 2106               	.LVL148:
 2107               		.cfi_endproc
 2108               	.LFE15:
 2110               		.section	.text.rgblight_decrease,"ax",@progbits
 2111               	.global	rgblight_decrease
 2113               	rgblight_decrease:
 2114               	.LFB16:
 195:quantum/rgblight.c ****   uint8_t mode = 0;
 2115               		.loc 1 195 0
 2116               		.cfi_startproc
 2117               	/* prologue: function */
 2118               	/* frame size = 0 */
 2119               	/* stack size = 0 */
 2120               	.L__stack_usage = 0
 2121               	.LVL149:
 198:quantum/rgblight.c ****     mode = rgblight_config.mode - 1;
 2122               		.loc 1 198 0
 2123 0000 8091 0000 		lds r24,rgblight_config
 2124 0004 8695      		lsr r24
 2125 0006 8F73      		andi r24,lo8(63)
 2126 0008 282F      		mov r18,r24
 2127 000a 30E0      		ldi r19,0
 2128 000c 2230      		cpi r18,2
 2129 000e 3105      		cpc r19,__zero_reg__
 2130 0010 04F0      		brlt .L163
 199:quantum/rgblight.c ****   }
 2131               		.loc 1 199 0
 2132 0012 8150      		subi r24,lo8(-(-1))
 2133               	.LVL150:
 2134 0014 00C0      		rjmp .L162
 2135               	.LVL151:
 2136               	.L163:
 196:quantum/rgblight.c ****   // Mode will never be < 1. If it ever is, eeprom needs to be initialized.
 2137               		.loc 1 196 0
 2138 0016 80E0      		ldi r24,0
 2139               	.LVL152:
 2140               	.L162:
 201:quantum/rgblight.c **** }
 2141               		.loc 1 201 0
 2142 0018 0C94 0000 		jmp rgblight_mode
 2143               	.LVL153:
 2144               		.cfi_endproc
 2145               	.LFE16:
 2147               		.section	.text.rgblight_step,"ax",@progbits
 2148               	.global	rgblight_step
 2150               	rgblight_step:
 2151               	.LFB17:
 203:quantum/rgblight.c ****   uint8_t mode = 0;
 2152               		.loc 1 203 0
 2153               		.cfi_startproc
 2154               	/* prologue: function */
 2155               	/* frame size = 0 */
 2156               	/* stack size = 0 */
 2157               	.L__stack_usage = 0
 2158               	.LVL154:
 205:quantum/rgblight.c ****   if (mode > RGBLIGHT_MODES) {
 2159               		.loc 1 205 0
 2160 0000 8091 0000 		lds r24,rgblight_config
 2161 0004 8695      		lsr r24
 2162 0006 8F73      		andi r24,lo8(63)
 2163 0008 8F5F      		subi r24,lo8(-(1))
 2164               	.LVL155:
 206:quantum/rgblight.c ****     mode = 1;
 2165               		.loc 1 206 0
 2166 000a 8532      		cpi r24,lo8(37)
 2167 000c 00F0      		brlo .L165
 207:quantum/rgblight.c ****   }
 2168               		.loc 1 207 0
 2169 000e 81E0      		ldi r24,lo8(1)
 2170               	.LVL156:
 2171               	.L165:
 209:quantum/rgblight.c **** }
 2172               		.loc 1 209 0
 2173 0010 0C94 0000 		jmp rgblight_mode
 2174               	.LVL157:
 2175               		.cfi_endproc
 2176               	.LFE17:
 2178               		.section	.text.rgblight_step_reverse,"ax",@progbits
 2179               	.global	rgblight_step_reverse
 2181               	rgblight_step_reverse:
 2182               	.LFB18:
 211:quantum/rgblight.c ****   uint8_t mode = 0;
 2183               		.loc 1 211 0
 2184               		.cfi_startproc
 2185               	/* prologue: function */
 2186               	/* frame size = 0 */
 2187               	/* stack size = 0 */
 2188               	.L__stack_usage = 0
 2189               	.LVL158:
 213:quantum/rgblight.c ****   if (mode < 1) {
 2190               		.loc 1 213 0
 2191 0000 8091 0000 		lds r24,rgblight_config
 2192 0004 8695      		lsr r24
 2193 0006 8F73      		andi r24,lo8(63)
 2194 0008 8150      		subi r24,lo8(-(-1))
 2195               	.LVL159:
 214:quantum/rgblight.c ****     mode = RGBLIGHT_MODES;
 2196               		.loc 1 214 0
 2197 000a 01F4      		brne .L167
 215:quantum/rgblight.c ****   }
 2198               		.loc 1 215 0
 2199 000c 84E2      		ldi r24,lo8(36)
 2200               	.LVL160:
 2201               	.L167:
 217:quantum/rgblight.c **** }
 2202               		.loc 1 217 0
 2203 000e 0C94 0000 		jmp rgblight_mode
 2204               	.LVL161:
 2205               		.cfi_endproc
 2206               	.LFE18:
 2208               		.section	.text.rgblight_enable,"ax",@progbits
 2209               	.global	rgblight_enable
 2211               	rgblight_enable:
 2212               	.LFB25:
 302:quantum/rgblight.c ****   rgblight_config.enable = 1;
 2213               		.loc 1 302 0
 2214               		.cfi_startproc
 2215 0000 CF93      		push r28
 2216               	.LCFI82:
 2217               		.cfi_def_cfa_offset 3
 2218               		.cfi_offset 28, -2
 2219 0002 DF93      		push r29
 2220               	.LCFI83:
 2221               		.cfi_def_cfa_offset 4
 2222               		.cfi_offset 29, -3
 2223               	/* prologue: function */
 2224               	/* frame size = 0 */
 2225               	/* stack size = 2 */
 2226               	.L__stack_usage = 2
 303:quantum/rgblight.c ****   // No need to update EEPROM here. rgblight_mode() will do that, actually
 2227               		.loc 1 303 0
 2228 0004 C0E0      		ldi r28,lo8(rgblight_config)
 2229 0006 D0E0      		ldi r29,hi8(rgblight_config)
 2230 0008 8881      		ld r24,Y
 2231 000a 8160      		ori r24,lo8(1<<0)
 2232 000c 8883      		st Y,r24
 306:quantum/rgblight.c ****   rgblight_mode(rgblight_config.mode);
 2233               		.loc 1 306 0
 2234 000e 1F92      		push __zero_reg__
 2235               	.LCFI84:
 2236               		.cfi_def_cfa_offset 5
 2237 0010 81E0      		ldi r24,lo8(1)
 2238 0012 8F93      		push r24
 2239               	.LCFI85:
 2240               		.cfi_def_cfa_offset 6
 2241 0014 80E0      		ldi r24,lo8(__c.2215)
 2242 0016 90E0      		ldi r25,hi8(__c.2215)
 2243 0018 9F93      		push r25
 2244               	.LCFI86:
 2245               		.cfi_def_cfa_offset 7
 2246 001a 8F93      		push r24
 2247               	.LCFI87:
 2248               		.cfi_def_cfa_offset 8
 2249 001c 0E94 0000 		call __xprintf
 2250               	.LVL162:
 307:quantum/rgblight.c **** }
 2251               		.loc 1 307 0
 2252 0020 0F90      		pop __tmp_reg__
 2253 0022 0F90      		pop __tmp_reg__
 2254 0024 0F90      		pop __tmp_reg__
 2255 0026 0F90      		pop __tmp_reg__
 2256               	.LCFI88:
 2257               		.cfi_def_cfa_offset 4
 2258 0028 8881      		ld r24,Y
 2259 002a 8695      		lsr r24
 2260 002c 8F73      		andi r24,lo8(63)
 2261               	/* epilogue start */
 308:quantum/rgblight.c **** 
 2262               		.loc 1 308 0
 2263 002e DF91      		pop r29
 2264 0030 CF91      		pop r28
 307:quantum/rgblight.c **** }
 2265               		.loc 1 307 0
 2266 0032 0C94 0000 		jmp rgblight_mode
 2267               	.LVL163:
 2268               		.cfi_endproc
 2269               	.LFE25:
 2271               		.section	.text.rgblight_mode_noeeprom,"ax",@progbits
 2272               	.global	rgblight_mode_noeeprom
 2274               	rgblight_mode_noeeprom:
 2275               	.LFB22:
 277:quantum/rgblight.c ****   rgblight_mode_eeprom_helper(mode, false);
 2276               		.loc 1 277 0
 2277               		.cfi_startproc
 2278               	.LVL164:
 2279               	/* prologue: function */
 2280               	/* frame size = 0 */
 2281               	/* stack size = 0 */
 2282               	.L__stack_usage = 0
 278:quantum/rgblight.c **** }
 2283               		.loc 1 278 0
 2284 0000 60E0      		ldi r22,0
 2285 0002 0C94 0000 		jmp rgblight_mode_eeprom_helper
 2286               	.LVL165:
 2287               		.cfi_endproc
 2288               	.LFE22:
 2290               		.section	.text.rgblight_init,"ax",@progbits
 2291               	.global	rgblight_init
 2293               	rgblight_init:
 2294               	.LFB13:
 149:quantum/rgblight.c ****   debug_enable = 1; // Debug ON!
 2295               		.loc 1 149 0
 2296               		.cfi_startproc
 2297               	/* prologue: function */
 2298               	/* frame size = 0 */
 2299               	/* stack size = 0 */
 2300               	.L__stack_usage = 0
 150:quantum/rgblight.c ****   dprintf("rgblight_init called.\n");
 2301               		.loc 1 150 0
 2302 0000 8091 0000 		lds r24,debug_config
 2303 0004 8160      		ori r24,lo8(1<<0)
 2304 0006 8093 0000 		sts debug_config,r24
 151:quantum/rgblight.c ****   dprintf("rgblight_init start!\n");
 2305               		.loc 1 151 0
 2306 000a 80E0      		ldi r24,lo8(__c.2158)
 2307 000c 90E0      		ldi r25,hi8(__c.2158)
 2308 000e 9F93      		push r25
 2309               	.LCFI89:
 2310               		.cfi_def_cfa_offset 3
 2311 0010 8F93      		push r24
 2312               	.LCFI90:
 2313               		.cfi_def_cfa_offset 4
 2314 0012 0E94 0000 		call __xprintf
 2315               	.LVL166:
 152:quantum/rgblight.c ****   if (!eeconfig_is_enabled()) {
 2316               		.loc 1 152 0
 2317 0016 8091 0000 		lds r24,debug_config
 2318 001a 0F90      		pop __tmp_reg__
 2319 001c 0F90      		pop __tmp_reg__
 2320               	.LCFI91:
 2321               		.cfi_def_cfa_offset 2
 2322 001e 80FF      		sbrs r24,0
 2323 0020 00C0      		rjmp .L171
 152:quantum/rgblight.c ****   if (!eeconfig_is_enabled()) {
 2324               		.loc 1 152 0 is_stmt 0 discriminator 1
 2325 0022 80E0      		ldi r24,lo8(__c.2160)
 2326 0024 90E0      		ldi r25,hi8(__c.2160)
 2327 0026 9F93      		push r25
 2328               	.LCFI92:
 2329               		.cfi_def_cfa_offset 3
 2330 0028 8F93      		push r24
 2331               	.LCFI93:
 2332               		.cfi_def_cfa_offset 4
 2333 002a 0E94 0000 		call __xprintf
 2334               	.LVL167:
 2335 002e 0F90      		pop __tmp_reg__
 2336 0030 0F90      		pop __tmp_reg__
 2337               	.LCFI94:
 2338               		.cfi_def_cfa_offset 2
 2339               	.L171:
 153:quantum/rgblight.c ****     dprintf("rgblight_init eeconfig is not enabled.\n");
 2340               		.loc 1 153 0 is_stmt 1
 2341 0032 0E94 0000 		call eeconfig_is_enabled
 2342               	.LVL168:
 2343 0036 8111      		cpse r24,__zero_reg__
 2344 0038 00C0      		rjmp .L172
 154:quantum/rgblight.c ****     eeconfig_init();
 2345               		.loc 1 154 0
 2346 003a 8091 0000 		lds r24,debug_config
 2347 003e 80FF      		sbrs r24,0
 2348 0040 00C0      		rjmp .L173
 154:quantum/rgblight.c ****     eeconfig_init();
 2349               		.loc 1 154 0 is_stmt 0 discriminator 1
 2350 0042 80E0      		ldi r24,lo8(__c.2162)
 2351 0044 90E0      		ldi r25,hi8(__c.2162)
 2352 0046 9F93      		push r25
 2353               	.LCFI95:
 2354               		.cfi_def_cfa_offset 3
 2355 0048 8F93      		push r24
 2356               	.LCFI96:
 2357               		.cfi_def_cfa_offset 4
 2358 004a 0E94 0000 		call __xprintf
 2359               	.LVL169:
 2360 004e 0F90      		pop __tmp_reg__
 2361 0050 0F90      		pop __tmp_reg__
 2362               	.LCFI97:
 2363               		.cfi_def_cfa_offset 2
 2364               	.L173:
 155:quantum/rgblight.c ****     eeconfig_update_rgblight_default();
 2365               		.loc 1 155 0 is_stmt 1
 2366 0052 0E94 0000 		call eeconfig_init
 2367               	.LVL170:
 156:quantum/rgblight.c ****   }
 2368               		.loc 1 156 0
 2369 0056 0E94 0000 		call eeconfig_update_rgblight_default
 2370               	.LVL171:
 2371               	.L172:
 158:quantum/rgblight.c ****   if (!rgblight_config.mode) {
 2372               		.loc 1 158 0
 2373 005a 0E94 0000 		call eeconfig_read_rgblight
 2374               	.LVL172:
 2375 005e 6093 0000 		sts rgblight_config,r22
 2376 0062 7093 0000 		sts rgblight_config+1,r23
 2377 0066 8093 0000 		sts rgblight_config+2,r24
 2378 006a 9093 0000 		sts rgblight_config+3,r25
 159:quantum/rgblight.c ****     dprintf("rgblight_init rgblight_config.mode = 0. Write default values to EEPROM.\n");
 2379               		.loc 1 159 0
 2380 006e 6E77      		andi r22,lo8(126)
 2381 0070 01F4      		brne .L174
 160:quantum/rgblight.c ****     eeconfig_update_rgblight_default();
 2382               		.loc 1 160 0
 2383 0072 8091 0000 		lds r24,debug_config
 2384 0076 80FF      		sbrs r24,0
 2385 0078 00C0      		rjmp .L175
 160:quantum/rgblight.c ****     eeconfig_update_rgblight_default();
 2386               		.loc 1 160 0 is_stmt 0 discriminator 1
 2387 007a 80E0      		ldi r24,lo8(__c.2164)
 2388 007c 90E0      		ldi r25,hi8(__c.2164)
 2389 007e 9F93      		push r25
 2390               	.LCFI98:
 2391               		.cfi_def_cfa_offset 3
 2392 0080 8F93      		push r24
 2393               	.LCFI99:
 2394               		.cfi_def_cfa_offset 4
 2395 0082 0E94 0000 		call __xprintf
 2396               	.LVL173:
 2397 0086 0F90      		pop __tmp_reg__
 2398 0088 0F90      		pop __tmp_reg__
 2399               	.LCFI100:
 2400               		.cfi_def_cfa_offset 2
 2401               	.L175:
 161:quantum/rgblight.c ****     rgblight_config.raw = eeconfig_read_rgblight();
 2402               		.loc 1 161 0 is_stmt 1
 2403 008a 0E94 0000 		call eeconfig_update_rgblight_default
 2404               	.LVL174:
 162:quantum/rgblight.c ****   }
 2405               		.loc 1 162 0
 2406 008e 0E94 0000 		call eeconfig_read_rgblight
 2407               	.LVL175:
 2408 0092 6093 0000 		sts rgblight_config,r22
 2409 0096 7093 0000 		sts rgblight_config+1,r23
 2410 009a 8093 0000 		sts rgblight_config+2,r24
 2411 009e 9093 0000 		sts rgblight_config+3,r25
 2412               	.L174:
 164:quantum/rgblight.c **** 
 2413               		.loc 1 164 0
 2414 00a2 0E94 0000 		call eeconfig_debug_rgblight
 2415               	.LVL176:
 2416               	.LBB39:
 2417               	.LBB40:
 550:quantum/rgblight.c **** }
 2418               		.loc 1 550 0
 2419 00a6 81E0      		ldi r24,lo8(1)
 2420 00a8 8093 0000 		sts rgblight_timer_enabled,r24
 2421               	.LBE40:
 2422               	.LBE39:
 170:quantum/rgblight.c ****     rgblight_mode_noeeprom(rgblight_config.mode);
 2423               		.loc 1 170 0
 2424 00ac 8091 0000 		lds r24,rgblight_config
 2425 00b0 80FF      		sbrs r24,0
 2426 00b2 00C0      		rjmp .L170
 171:quantum/rgblight.c ****   }
 2427               		.loc 1 171 0
 2428 00b4 8695      		lsr r24
 2429 00b6 8F73      		andi r24,lo8(63)
 2430 00b8 0C94 0000 		jmp rgblight_mode_noeeprom
 2431               	.LVL177:
 2432               	.L170:
 2433 00bc 0895      		ret
 2434               		.cfi_endproc
 2435               	.LFE13:
 2437               		.section	.text.rgblight_enable_noeeprom,"ax",@progbits
 2438               	.global	rgblight_enable_noeeprom
 2440               	rgblight_enable_noeeprom:
 2441               	.LFB26:
 310:quantum/rgblight.c ****   rgblight_config.enable = 1;
 2442               		.loc 1 310 0
 2443               		.cfi_startproc
 2444 0000 CF93      		push r28
 2445               	.LCFI101:
 2446               		.cfi_def_cfa_offset 3
 2447               		.cfi_offset 28, -2
 2448 0002 DF93      		push r29
 2449               	.LCFI102:
 2450               		.cfi_def_cfa_offset 4
 2451               		.cfi_offset 29, -3
 2452               	/* prologue: function */
 2453               	/* frame size = 0 */
 2454               	/* stack size = 2 */
 2455               	.L__stack_usage = 2
 311:quantum/rgblight.c ****   xprintf("rgblight enable [NOEEPROM]: rgblight_config.enable = %u\n", rgblight_config.enable);
 2456               		.loc 1 311 0
 2457 0004 C0E0      		ldi r28,lo8(rgblight_config)
 2458 0006 D0E0      		ldi r29,hi8(rgblight_config)
 2459 0008 8881      		ld r24,Y
 2460 000a 8160      		ori r24,lo8(1<<0)
 2461 000c 8883      		st Y,r24
 312:quantum/rgblight.c ****   rgblight_mode_noeeprom(rgblight_config.mode);
 2462               		.loc 1 312 0
 2463 000e 1F92      		push __zero_reg__
 2464               	.LCFI103:
 2465               		.cfi_def_cfa_offset 5
 2466 0010 81E0      		ldi r24,lo8(1)
 2467 0012 8F93      		push r24
 2468               	.LCFI104:
 2469               		.cfi_def_cfa_offset 6
 2470 0014 80E0      		ldi r24,lo8(__c.2220)
 2471 0016 90E0      		ldi r25,hi8(__c.2220)
 2472 0018 9F93      		push r25
 2473               	.LCFI105:
 2474               		.cfi_def_cfa_offset 7
 2475 001a 8F93      		push r24
 2476               	.LCFI106:
 2477               		.cfi_def_cfa_offset 8
 2478 001c 0E94 0000 		call __xprintf
 2479               	.LVL178:
 313:quantum/rgblight.c **** }
 2480               		.loc 1 313 0
 2481 0020 0F90      		pop __tmp_reg__
 2482 0022 0F90      		pop __tmp_reg__
 2483 0024 0F90      		pop __tmp_reg__
 2484 0026 0F90      		pop __tmp_reg__
 2485               	.LCFI107:
 2486               		.cfi_def_cfa_offset 4
 2487 0028 8881      		ld r24,Y
 2488 002a 8695      		lsr r24
 2489 002c 8F73      		andi r24,lo8(63)
 2490               	/* epilogue start */
 314:quantum/rgblight.c **** 
 2491               		.loc 1 314 0
 2492 002e DF91      		pop r29
 2493 0030 CF91      		pop r28
 313:quantum/rgblight.c **** }
 2494               		.loc 1 313 0
 2495 0032 0C94 0000 		jmp rgblight_mode_noeeprom
 2496               	.LVL179:
 2497               		.cfi_endproc
 2498               	.LFE26:
 2500               		.section	.text.rgblight_update_dword,"ax",@progbits
 2501               	.global	rgblight_update_dword
 2503               	rgblight_update_dword:
 2504               	.LFB14:
 175:quantum/rgblight.c ****   rgblight_config.raw = dword;
 2505               		.loc 1 175 0
 2506               		.cfi_startproc
 2507               	.LVL180:
 2508               	/* prologue: function */
 2509               	/* frame size = 0 */
 2510               	/* stack size = 0 */
 2511               	.L__stack_usage = 0
 176:quantum/rgblight.c ****   eeconfig_update_rgblight(rgblight_config.raw);
 2512               		.loc 1 176 0
 2513 0000 6093 0000 		sts rgblight_config,r22
 2514 0004 7093 0000 		sts rgblight_config+1,r23
 2515 0008 8093 0000 		sts rgblight_config+2,r24
 2516 000c 9093 0000 		sts rgblight_config+3,r25
 177:quantum/rgblight.c ****   if (rgblight_config.enable)
 2517               		.loc 1 177 0
 2518 0010 0E94 0000 		call eeconfig_update_rgblight
 2519               	.LVL181:
 178:quantum/rgblight.c ****     rgblight_mode(rgblight_config.mode);
 2520               		.loc 1 178 0
 2521 0014 8091 0000 		lds r24,rgblight_config
 2522 0018 80FF      		sbrs r24,0
 2523 001a 00C0      		rjmp .L188
 179:quantum/rgblight.c ****   else {
 2524               		.loc 1 179 0
 2525 001c 8695      		lsr r24
 2526 001e 8F73      		andi r24,lo8(63)
 2527 0020 0C94 0000 		jmp rgblight_mode
 2528               	.LVL182:
 2529               	.L188:
 182:quantum/rgblight.c ****     #endif
 2530               		.loc 1 182 0
 2531 0024 0E94 0000 		call rgblight_timer_disable
 2532               	.LVL183:
 184:quantum/rgblight.c ****   }
 2533               		.loc 1 184 0
 2534 0028 0C94 0000 		jmp rgblight_set
 2535               	.LVL184:
 2536               		.cfi_endproc
 2537               	.LFE14:
 2539               		.section	.text.rgblight_disable,"ax",@progbits
 2540               	.global	rgblight_disable
 2542               	rgblight_disable:
 2543               	.LFB27:
 316:quantum/rgblight.c ****   rgblight_config.enable = 0;
 2544               		.loc 1 316 0
 2545               		.cfi_startproc
 2546 0000 CF93      		push r28
 2547               	.LCFI108:
 2548               		.cfi_def_cfa_offset 3
 2549               		.cfi_offset 28, -2
 2550 0002 DF93      		push r29
 2551               	.LCFI109:
 2552               		.cfi_def_cfa_offset 4
 2553               		.cfi_offset 29, -3
 2554               	/* prologue: function */
 2555               	/* frame size = 0 */
 2556               	/* stack size = 2 */
 2557               	.L__stack_usage = 2
 317:quantum/rgblight.c ****   eeconfig_update_rgblight(rgblight_config.raw);
 2558               		.loc 1 317 0
 2559 0004 C0E0      		ldi r28,lo8(rgblight_config)
 2560 0006 D0E0      		ldi r29,hi8(rgblight_config)
 2561 0008 8881      		ld r24,Y
 2562 000a 8E7F      		andi r24,lo8(~(1<<0))
 2563 000c 8883      		st Y,r24
 318:quantum/rgblight.c ****   xprintf("rgblight disable [EEPROM]: rgblight_config.enable = %u\n", rgblight_config.enable);
 2564               		.loc 1 318 0
 2565 000e 6881      		ld r22,Y
 2566 0010 7981      		ldd r23,Y+1
 2567 0012 8A81      		ldd r24,Y+2
 2568 0014 9B81      		ldd r25,Y+3
 2569 0016 0E94 0000 		call eeconfig_update_rgblight
 2570               	.LVL185:
 319:quantum/rgblight.c ****   #ifdef RGBLIGHT_ANIMATIONS
 2571               		.loc 1 319 0
 2572 001a 8881      		ld r24,Y
 2573 001c 8170      		andi r24,1
 2574 001e 1F92      		push __zero_reg__
 2575               	.LCFI110:
 2576               		.cfi_def_cfa_offset 5
 2577 0020 8F93      		push r24
 2578               	.LCFI111:
 2579               		.cfi_def_cfa_offset 6
 2580 0022 80E0      		ldi r24,lo8(__c.2225)
 2581 0024 90E0      		ldi r25,hi8(__c.2225)
 2582 0026 9F93      		push r25
 2583               	.LCFI112:
 2584               		.cfi_def_cfa_offset 7
 2585 0028 8F93      		push r24
 2586               	.LCFI113:
 2587               		.cfi_def_cfa_offset 8
 2588 002a 0E94 0000 		call __xprintf
 2589               	.LVL186:
 321:quantum/rgblight.c ****   #endif
 2590               		.loc 1 321 0
 2591 002e 0E94 0000 		call rgblight_timer_disable
 2592               	.LVL187:
 2593               	.LBB41:
 2594               	.LBB42:
 2595               		.file 2 "c:\\msys64\\home\\cris almanza\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\util\\delay.
   1:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id$ */
  34:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 2596               		.loc 2 187 0
 2597 0032 2FEF      		ldi r18,lo8(159999)
 2598 0034 80E7      		ldi r24,hi8(159999)
 2599 0036 92E0      		ldi r25,hlo8(159999)
 2600 0038 2150      	1:	subi r18,1
 2601 003a 8040      		sbci r24,0
 2602 003c 9040      		sbci r25,0
 2603 003e 01F4      		brne 1b
 2604 0040 00C0      		rjmp .
 2605 0042 0000      		nop
 2606               	.LBE42:
 2607               	.LBE41:
 324:quantum/rgblight.c **** }
 2608               		.loc 1 324 0
 2609 0044 0F90      		pop __tmp_reg__
 2610 0046 0F90      		pop __tmp_reg__
 2611 0048 0F90      		pop __tmp_reg__
 2612 004a 0F90      		pop __tmp_reg__
 2613               	.LCFI114:
 2614               		.cfi_def_cfa_offset 4
 2615               	/* epilogue start */
 325:quantum/rgblight.c **** 
 2616               		.loc 1 325 0
 2617 004c DF91      		pop r29
 2618 004e CF91      		pop r28
 324:quantum/rgblight.c **** }
 2619               		.loc 1 324 0
 2620 0050 0C94 0000 		jmp rgblight_set
 2621               	.LVL188:
 2622               		.cfi_endproc
 2623               	.LFE27:
 2625               		.section	.text.rgblight_toggle,"ax",@progbits
 2626               	.global	rgblight_toggle
 2628               	rgblight_toggle:
 2629               	.LFB23:
 282:quantum/rgblight.c ****   xprintf("rgblight toggle [EEPROM]: rgblight_config.enable = %u\n", !rgblight_config.enable);
 2630               		.loc 1 282 0
 2631               		.cfi_startproc
 2632               	/* prologue: function */
 2633               	/* frame size = 0 */
 2634               	/* stack size = 0 */
 2635               	.L__stack_usage = 0
 283:quantum/rgblight.c ****   if (rgblight_config.enable) {
 2636               		.loc 1 283 0
 2637 0000 8091 0000 		lds r24,rgblight_config
 2638 0004 8095      		com r24
 2639 0006 8170      		andi r24,lo8(1)
 2640 0008 1F92      		push __zero_reg__
 2641               	.LCFI115:
 2642               		.cfi_def_cfa_offset 3
 2643 000a 8F93      		push r24
 2644               	.LCFI116:
 2645               		.cfi_def_cfa_offset 4
 2646 000c 80E0      		ldi r24,lo8(__c.2205)
 2647 000e 90E0      		ldi r25,hi8(__c.2205)
 2648 0010 9F93      		push r25
 2649               	.LCFI117:
 2650               		.cfi_def_cfa_offset 5
 2651 0012 8F93      		push r24
 2652               	.LCFI118:
 2653               		.cfi_def_cfa_offset 6
 2654 0014 0E94 0000 		call __xprintf
 2655               	.LVL189:
 284:quantum/rgblight.c ****     rgblight_disable();
 2656               		.loc 1 284 0
 2657 0018 8091 0000 		lds r24,rgblight_config
 2658 001c 0F90      		pop __tmp_reg__
 2659 001e 0F90      		pop __tmp_reg__
 2660 0020 0F90      		pop __tmp_reg__
 2661 0022 0F90      		pop __tmp_reg__
 2662               	.LCFI119:
 2663               		.cfi_def_cfa_offset 2
 2664 0024 80FD      		sbrc r24,0
 285:quantum/rgblight.c ****   }
 2665               		.loc 1 285 0
 2666 0026 0C94 0000 		jmp rgblight_disable
 2667               	.LVL190:
 2668               	.L191:
 288:quantum/rgblight.c ****   }
 2669               		.loc 1 288 0
 2670 002a 0C94 0000 		jmp rgblight_enable
 2671               	.LVL191:
 2672               		.cfi_endproc
 2673               	.LFE23:
 2675               		.section	.text.rgblight_disable_noeeprom,"ax",@progbits
 2676               	.global	rgblight_disable_noeeprom
 2678               	rgblight_disable_noeeprom:
 2679               	.LFB28:
 327:quantum/rgblight.c ****   rgblight_config.enable = 0;
 2680               		.loc 1 327 0
 2681               		.cfi_startproc
 2682               	/* prologue: function */
 2683               	/* frame size = 0 */
 2684               	/* stack size = 0 */
 2685               	.L__stack_usage = 0
 328:quantum/rgblight.c ****   xprintf("rgblight disable [noEEPROM]: rgblight_config.enable = %u\n", rgblight_config.enable);
 2686               		.loc 1 328 0
 2687 0000 E0E0      		ldi r30,lo8(rgblight_config)
 2688 0002 F0E0      		ldi r31,hi8(rgblight_config)
 2689 0004 8081      		ld r24,Z
 2690 0006 8E7F      		andi r24,lo8(~(1<<0))
 2691 0008 8083      		st Z,r24
 329:quantum/rgblight.c ****   #ifdef RGBLIGHT_ANIMATIONS
 2692               		.loc 1 329 0
 2693 000a 1F92      		push __zero_reg__
 2694               	.LCFI120:
 2695               		.cfi_def_cfa_offset 3
 2696 000c 1F92      		push __zero_reg__
 2697               	.LCFI121:
 2698               		.cfi_def_cfa_offset 4
 2699 000e 80E0      		ldi r24,lo8(__c.2230)
 2700 0010 90E0      		ldi r25,hi8(__c.2230)
 2701 0012 9F93      		push r25
 2702               	.LCFI122:
 2703               		.cfi_def_cfa_offset 5
 2704 0014 8F93      		push r24
 2705               	.LCFI123:
 2706               		.cfi_def_cfa_offset 6
 2707 0016 0E94 0000 		call __xprintf
 2708               	.LVL192:
 331:quantum/rgblight.c ****   #endif
 2709               		.loc 1 331 0
 2710 001a 0E94 0000 		call rgblight_timer_disable
 2711               	.LVL193:
 2712               	.LBB43:
 2713               	.LBB44:
 2714               		.loc 2 187 0
 2715 001e 2FEF      		ldi r18,lo8(159999)
 2716 0020 80E7      		ldi r24,hi8(159999)
 2717 0022 92E0      		ldi r25,hlo8(159999)
 2718 0024 2150      	1:	subi r18,1
 2719 0026 8040      		sbci r24,0
 2720 0028 9040      		sbci r25,0
 2721 002a 01F4      		brne 1b
 2722 002c 00C0      		rjmp .
 2723 002e 0000      		nop
 2724               	.LBE44:
 2725               	.LBE43:
 334:quantum/rgblight.c **** }
 2726               		.loc 1 334 0
 2727 0030 0F90      		pop __tmp_reg__
 2728 0032 0F90      		pop __tmp_reg__
 2729 0034 0F90      		pop __tmp_reg__
 2730 0036 0F90      		pop __tmp_reg__
 2731               	.LCFI124:
 2732               		.cfi_def_cfa_offset 2
 2733 0038 0C94 0000 		jmp rgblight_set
 2734               	.LVL194:
 2735               		.cfi_endproc
 2736               	.LFE28:
 2738               		.section	.text.rgblight_toggle_noeeprom,"ax",@progbits
 2739               	.global	rgblight_toggle_noeeprom
 2741               	rgblight_toggle_noeeprom:
 2742               	.LFB24:
 292:quantum/rgblight.c ****   xprintf("rgblight toggle [NOEEPROM]: rgblight_config.enable = %u\n", !rgblight_config.enable);
 2743               		.loc 1 292 0
 2744               		.cfi_startproc
 2745               	/* prologue: function */
 2746               	/* frame size = 0 */
 2747               	/* stack size = 0 */
 2748               	.L__stack_usage = 0
 293:quantum/rgblight.c ****   if (rgblight_config.enable) {
 2749               		.loc 1 293 0
 2750 0000 8091 0000 		lds r24,rgblight_config
 2751 0004 8095      		com r24
 2752 0006 8170      		andi r24,lo8(1)
 2753 0008 1F92      		push __zero_reg__
 2754               	.LCFI125:
 2755               		.cfi_def_cfa_offset 3
 2756 000a 8F93      		push r24
 2757               	.LCFI126:
 2758               		.cfi_def_cfa_offset 4
 2759 000c 80E0      		ldi r24,lo8(__c.2210)
 2760 000e 90E0      		ldi r25,hi8(__c.2210)
 2761 0010 9F93      		push r25
 2762               	.LCFI127:
 2763               		.cfi_def_cfa_offset 5
 2764 0012 8F93      		push r24
 2765               	.LCFI128:
 2766               		.cfi_def_cfa_offset 6
 2767 0014 0E94 0000 		call __xprintf
 2768               	.LVL195:
 294:quantum/rgblight.c ****     rgblight_disable_noeeprom();
 2769               		.loc 1 294 0
 2770 0018 8091 0000 		lds r24,rgblight_config
 2771 001c 0F90      		pop __tmp_reg__
 2772 001e 0F90      		pop __tmp_reg__
 2773 0020 0F90      		pop __tmp_reg__
 2774 0022 0F90      		pop __tmp_reg__
 2775               	.LCFI129:
 2776               		.cfi_def_cfa_offset 2
 2777 0024 80FD      		sbrc r24,0
 295:quantum/rgblight.c ****   }
 2778               		.loc 1 295 0
 2779 0026 0C94 0000 		jmp rgblight_disable_noeeprom
 2780               	.LVL196:
 2781               	.L194:
 298:quantum/rgblight.c ****   }
 2782               		.loc 1 298 0
 2783 002a 0C94 0000 		jmp rgblight_enable_noeeprom
 2784               	.LVL197:
 2785               		.cfi_endproc
 2786               	.LFE24:
 2788               		.section	.text.rgblight_timer_toggle,"ax",@progbits
 2789               	.global	rgblight_timer_toggle
 2791               	rgblight_timer_toggle:
 2792               	.LFB53:
 559:quantum/rgblight.c **** }
 560:quantum/rgblight.c **** void rgblight_timer_toggle(void) {
 2793               		.loc 1 560 0
 2794               		.cfi_startproc
 2795               	/* prologue: function */
 2796               	/* frame size = 0 */
 2797               	/* stack size = 0 */
 2798               	.L__stack_usage = 0
 561:quantum/rgblight.c ****   rgblight_timer_enabled ^= rgblight_timer_enabled;
 2799               		.loc 1 561 0
 2800 0000 1092 0000 		sts rgblight_timer_enabled,__zero_reg__
 562:quantum/rgblight.c ****   dprintf("TIMER3 toggled.\n");
 2801               		.loc 1 562 0
 2802 0004 8091 0000 		lds r24,debug_config
 2803 0008 80FF      		sbrs r24,0
 2804 000a 00C0      		rjmp .L195
 2805               		.loc 1 562 0 is_stmt 0 discriminator 1
 2806 000c 80E0      		ldi r24,lo8(__c.2369)
 2807 000e 90E0      		ldi r25,hi8(__c.2369)
 2808 0010 9F93      		push r25
 2809               	.LCFI130:
 2810               		.cfi_def_cfa_offset 3
 2811 0012 8F93      		push r24
 2812               	.LCFI131:
 2813               		.cfi_def_cfa_offset 4
 2814 0014 0E94 0000 		call __xprintf
 2815               	.LVL198:
 2816 0018 0F90      		pop __tmp_reg__
 2817 001a 0F90      		pop __tmp_reg__
 2818               	.LCFI132:
 2819               		.cfi_def_cfa_offset 2
 2820               	.L195:
 2821 001c 0895      		ret
 2822               		.cfi_endproc
 2823               	.LFE53:
 2825               		.section	.text.rgblight_show_solid_color,"ax",@progbits
 2826               	.global	rgblight_show_solid_color
 2828               	rgblight_show_solid_color:
 2829               	.LFB54:
 563:quantum/rgblight.c **** }
 564:quantum/rgblight.c **** 
 565:quantum/rgblight.c **** void rgblight_show_solid_color(uint8_t r, uint8_t g, uint8_t b) {
 2830               		.loc 1 565 0 is_stmt 1
 2831               		.cfi_startproc
 2832               	.LVL199:
 2833 0000 1F93      		push r17
 2834               	.LCFI133:
 2835               		.cfi_def_cfa_offset 3
 2836               		.cfi_offset 17, -2
 2837 0002 CF93      		push r28
 2838               	.LCFI134:
 2839               		.cfi_def_cfa_offset 4
 2840               		.cfi_offset 28, -3
 2841 0004 DF93      		push r29
 2842               	.LCFI135:
 2843               		.cfi_def_cfa_offset 5
 2844               		.cfi_offset 29, -4
 2845 0006 00D0      		rcall .
 2846               	.LCFI136:
 2847               		.cfi_def_cfa_offset 7
 2848 0008 CDB7      		in r28,__SP_L__
 2849 000a DEB7      		in r29,__SP_H__
 2850               	.LCFI137:
 2851               		.cfi_def_cfa_register 28
 2852               	/* prologue: function */
 2853               	/* frame size = 2 */
 2854               	/* stack size = 5 */
 2855               	.L__stack_usage = 5
 2856 000c 182F      		mov r17,r24
 566:quantum/rgblight.c ****   rgblight_enable();
 2857               		.loc 1 566 0
 2858 000e 4A83      		std Y+2,r20
 2859 0010 6983      		std Y+1,r22
 2860 0012 0E94 0000 		call rgblight_enable
 2861               	.LVL200:
 567:quantum/rgblight.c ****   rgblight_mode(1);
 2862               		.loc 1 567 0
 2863 0016 81E0      		ldi r24,lo8(1)
 2864 0018 0E94 0000 		call rgblight_mode
 2865               	.LVL201:
 568:quantum/rgblight.c ****   rgblight_setrgb(r, g, b);
 2866               		.loc 1 568 0
 2867 001c 4A81      		ldd r20,Y+2
 2868 001e 6981      		ldd r22,Y+1
 2869 0020 812F      		mov r24,r17
 2870               	/* epilogue start */
 569:quantum/rgblight.c **** }
 2871               		.loc 1 569 0
 2872 0022 0F90      		pop __tmp_reg__
 2873 0024 0F90      		pop __tmp_reg__
 2874 0026 DF91      		pop r29
 2875 0028 CF91      		pop r28
 2876 002a 1F91      		pop r17
 2877               	.LVL202:
 568:quantum/rgblight.c ****   rgblight_setrgb(r, g, b);
 2878               		.loc 1 568 0
 2879 002c 0C94 0000 		jmp rgblight_setrgb
 2880               	.LVL203:
 2881               		.cfi_endproc
 2882               	.LFE54:
 2884               	.global	__floatsisf
 2885               	.global	__divsf3
 2886               	.global	__mulsf3
 2887               	.global	__subsf3
 2888               	.global	__fixunssfsi
 2889               		.section	.text.rgblight_effect_breathing,"ax",@progbits
 2890               	.global	rgblight_effect_breathing
 2892               	rgblight_effect_breathing:
 2893               	.LFB56:
 570:quantum/rgblight.c **** 
 571:quantum/rgblight.c **** void rgblight_task(void) {
 572:quantum/rgblight.c ****   if (rgblight_timer_enabled) {
 573:quantum/rgblight.c ****     // mode = 1, static light, do nothing here
 574:quantum/rgblight.c ****     if (rgblight_config.mode >= 2 && rgblight_config.mode <= 5) {
 575:quantum/rgblight.c ****       // mode = 2 to 5, breathing mode
 576:quantum/rgblight.c ****       rgblight_effect_breathing(rgblight_config.mode - 2);
 577:quantum/rgblight.c ****     } else if (rgblight_config.mode >= 6 && rgblight_config.mode <= 8) {
 578:quantum/rgblight.c ****       // mode = 6 to 8, rainbow mood mod
 579:quantum/rgblight.c ****       rgblight_effect_rainbow_mood(rgblight_config.mode - 6);
 580:quantum/rgblight.c ****     } else if (rgblight_config.mode >= 9 && rgblight_config.mode <= 14) {
 581:quantum/rgblight.c ****       // mode = 9 to 14, rainbow swirl mode
 582:quantum/rgblight.c ****       rgblight_effect_rainbow_swirl(rgblight_config.mode - 9);
 583:quantum/rgblight.c ****     } else if (rgblight_config.mode >= 15 && rgblight_config.mode <= 20) {
 584:quantum/rgblight.c ****       // mode = 15 to 20, snake mode
 585:quantum/rgblight.c ****       rgblight_effect_snake(rgblight_config.mode - 15);
 586:quantum/rgblight.c ****     } else if (rgblight_config.mode >= 21 && rgblight_config.mode <= 23) {
 587:quantum/rgblight.c ****       // mode = 21 to 23, knight mode
 588:quantum/rgblight.c ****       rgblight_effect_knight(rgblight_config.mode - 21);
 589:quantum/rgblight.c ****     } else if (rgblight_config.mode == 24) {
 590:quantum/rgblight.c ****       // mode = 24, christmas mode
 591:quantum/rgblight.c ****       rgblight_effect_christmas();
 592:quantum/rgblight.c ****     } else if (rgblight_config.mode == 35) {
 593:quantum/rgblight.c ****       // mode = 35, RGB test
 594:quantum/rgblight.c ****       rgblight_effect_rgbtest();
 595:quantum/rgblight.c ****     } else if (rgblight_config.mode == 36){
 596:quantum/rgblight.c ****       rgblight_effect_alternating();
 597:quantum/rgblight.c ****     }
 598:quantum/rgblight.c ****   }
 599:quantum/rgblight.c **** }
 600:quantum/rgblight.c **** 
 601:quantum/rgblight.c **** // Effects
 602:quantum/rgblight.c **** void rgblight_effect_breathing(uint8_t interval) {
 2894               		.loc 1 602 0
 2895               		.cfi_startproc
 2896               	.LVL204:
 2897 0000 CF93      		push r28
 2898               	.LCFI138:
 2899               		.cfi_def_cfa_offset 3
 2900               		.cfi_offset 28, -2
 2901               	/* prologue: function */
 2902               	/* frame size = 0 */
 2903               	/* stack size = 1 */
 2904               	.L__stack_usage = 1
 2905 0002 C82F      		mov r28,r24
 603:quantum/rgblight.c ****   static uint8_t pos = 0;
 604:quantum/rgblight.c ****   static uint16_t last_timer = 0;
 605:quantum/rgblight.c ****   float val;
 606:quantum/rgblight.c **** 
 607:quantum/rgblight.c ****   if (timer_elapsed(last_timer) < pgm_read_byte(&RGBLED_BREATHING_INTERVALS[interval])) {
 2906               		.loc 1 607 0
 2907 0004 8091 0000 		lds r24,last_timer.2383
 2908 0008 9091 0000 		lds r25,last_timer.2383+1
 2909               	.LVL205:
 2910 000c 0E94 0000 		call timer_elapsed
 2911               	.LVL206:
 2912               	.LBB45:
 2913 0010 EC2F      		mov r30,r28
 2914 0012 F0E0      		ldi r31,0
 2915 0014 E050      		subi r30,lo8(-(RGBLED_BREATHING_INTERVALS))
 2916 0016 F040      		sbci r31,hi8(-(RGBLED_BREATHING_INTERVALS))
 2917               	/* #APP */
 2918               	 ;  607 "quantum/rgblight.c" 1
 2919 0018 E491      		lpm r30, Z
 2920               		
 2921               	 ;  0 "" 2
 2922               	.LVL207:
 2923               	/* #NOAPP */
 2924               	.LBE45:
 2925 001a F0E0      		ldi r31,0
 2926 001c 8E17      		cp r24,r30
 2927 001e 9F07      		cpc r25,r31
 2928 0020 00F4      		brsh .+2
 2929 0022 00C0      		rjmp .L201
 608:quantum/rgblight.c ****     return;
 609:quantum/rgblight.c ****   }
 610:quantum/rgblight.c ****   last_timer = timer_read();
 2930               		.loc 1 610 0
 2931 0024 0E94 0000 		call timer_read
 2932               	.LVL208:
 2933 0028 9093 0000 		sts last_timer.2383+1,r25
 2934 002c 8093 0000 		sts last_timer.2383,r24
 611:quantum/rgblight.c **** 
 612:quantum/rgblight.c **** 
 613:quantum/rgblight.c ****   // http://sean.voisen.org/blog/2011/10/breathing-led-with-arduino/
 614:quantum/rgblight.c ****   val = (exp(sin((pos/255.0)*M_PI)) - RGBLIGHT_EFFECT_BREATHE_CENTER/M_E)*(RGBLIGHT_EFFECT_BREATHE_
 2935               		.loc 1 614 0
 2936 0030 6091 0000 		lds r22,pos.2382
 2937 0034 70E0      		ldi r23,0
 2938 0036 80E0      		ldi r24,0
 2939 0038 90E0      		ldi r25,0
 2940 003a 0E94 0000 		call __floatsisf
 2941               	.LVL209:
 2942 003e 20E0      		ldi r18,0
 2943 0040 30E0      		ldi r19,0
 2944 0042 4FE7      		ldi r20,lo8(127)
 2945 0044 53E4      		ldi r21,lo8(67)
 2946 0046 0E94 0000 		call __divsf3
 2947               	.LVL210:
 2948 004a 2BED      		ldi r18,lo8(-37)
 2949 004c 3FE0      		ldi r19,lo8(15)
 2950 004e 49E4      		ldi r20,lo8(73)
 2951 0050 50E4      		ldi r21,lo8(64)
 2952 0052 0E94 0000 		call __mulsf3
 2953               	.LVL211:
 2954 0056 0E94 0000 		call sin
 2955               	.LVL212:
 2956 005a 0E94 0000 		call exp
 2957               	.LVL213:
 2958 005e 2BE4      		ldi r18,lo8(75)
 2959 0060 3AE3      		ldi r19,lo8(58)
 2960 0062 4EE2      		ldi r20,lo8(46)
 2961 0064 5FE3      		ldi r21,lo8(63)
 2962 0066 0E94 0000 		call __subsf3
 2963               	.LVL214:
 2964 006a 20EF      		ldi r18,lo8(-16)
 2965 006c 3BEF      		ldi r19,lo8(-5)
 2966 006e 48ED      		ldi r20,lo8(-40)
 2967 0070 52E4      		ldi r21,lo8(66)
 2968 0072 0E94 0000 		call __mulsf3
 2969               	.LVL215:
 615:quantum/rgblight.c ****   rgblight_sethsv_noeeprom_old(rgblight_config.hue, rgblight_config.sat, val);
 2970               		.loc 1 615 0
 2971 0076 0E94 0000 		call __fixunssfsi
 2972               	.LVL216:
 2973 007a 462F      		mov r20,r22
 2974 007c 8091 0000 		lds r24,rgblight_config
 2975 0080 881F      		rol r24
 2976 0082 8827      		clr r24
 2977 0084 881F      		rol r24
 2978 0086 9091 0000 		lds r25,rgblight_config+1
 2979 008a 292F      		mov r18,r25
 2980 008c 220F      		lsl r18
 2981 008e 97FB      		bst r25,7
 2982 0090 9927      		clr r25
 2983 0092 90F9      		bld r25,0
 2984 0094 6091 0000 		lds r22,rgblight_config+2
 2985 0098 822B      		or r24,r18
 2986 009a 0E94 0000 		call rgblight_sethsv_noeeprom_old
 2987               	.LVL217:
 616:quantum/rgblight.c ****   pos = (pos + 1) % 256;
 2988               		.loc 1 616 0
 2989 009e 8091 0000 		lds r24,pos.2382
 2990 00a2 90E0      		ldi r25,0
 2991 00a4 0196      		adiw r24,1
 2992 00a6 8093 0000 		sts pos.2382,r24
 2993               	.L201:
 2994               	/* epilogue start */
 617:quantum/rgblight.c **** }
 2995               		.loc 1 617 0
 2996 00aa CF91      		pop r28
 2997               	.LVL218:
 2998 00ac 0895      		ret
 2999               		.cfi_endproc
 3000               	.LFE56:
 3002               		.section	.text.rgblight_effect_rainbow_mood,"ax",@progbits
 3003               	.global	rgblight_effect_rainbow_mood
 3005               	rgblight_effect_rainbow_mood:
 3006               	.LFB57:
 618:quantum/rgblight.c **** void rgblight_effect_rainbow_mood(uint8_t interval) {
 3007               		.loc 1 618 0
 3008               		.cfi_startproc
 3009               	.LVL219:
 3010 0000 CF93      		push r28
 3011               	.LCFI139:
 3012               		.cfi_def_cfa_offset 3
 3013               		.cfi_offset 28, -2
 3014               	/* prologue: function */
 3015               	/* frame size = 0 */
 3016               	/* stack size = 1 */
 3017               	.L__stack_usage = 1
 3018 0002 C82F      		mov r28,r24
 619:quantum/rgblight.c ****   static uint16_t current_hue = 0;
 620:quantum/rgblight.c ****   static uint16_t last_timer = 0;
 621:quantum/rgblight.c **** 
 622:quantum/rgblight.c ****   if (timer_elapsed(last_timer) < pgm_read_byte(&RGBLED_RAINBOW_MOOD_INTERVALS[interval])) {
 3019               		.loc 1 622 0
 3020 0004 8091 0000 		lds r24,last_timer.2392
 3021 0008 9091 0000 		lds r25,last_timer.2392+1
 3022               	.LVL220:
 3023 000c 0E94 0000 		call timer_elapsed
 3024               	.LVL221:
 3025               	.LBB46:
 3026 0010 EC2F      		mov r30,r28
 3027 0012 F0E0      		ldi r31,0
 3028 0014 E050      		subi r30,lo8(-(RGBLED_RAINBOW_MOOD_INTERVALS))
 3029 0016 F040      		sbci r31,hi8(-(RGBLED_RAINBOW_MOOD_INTERVALS))
 3030               	/* #APP */
 3031               	 ;  622 "quantum/rgblight.c" 1
 3032 0018 E491      		lpm r30, Z
 3033               		
 3034               	 ;  0 "" 2
 3035               	.LVL222:
 3036               	/* #NOAPP */
 3037               	.LBE46:
 3038 001a F0E0      		ldi r31,0
 3039 001c 8E17      		cp r24,r30
 3040 001e 9F07      		cpc r25,r31
 3041 0020 00F0      		brlo .L203
 623:quantum/rgblight.c ****     return;
 624:quantum/rgblight.c ****   }
 625:quantum/rgblight.c ****   last_timer = timer_read();
 3042               		.loc 1 625 0
 3043 0022 0E94 0000 		call timer_read
 3044               	.LVL223:
 3045 0026 9093 0000 		sts last_timer.2392+1,r25
 3046 002a 8093 0000 		sts last_timer.2392,r24
 626:quantum/rgblight.c ****   rgblight_sethsv_noeeprom_old(current_hue, rgblight_config.sat, rgblight_config.val);
 3047               		.loc 1 626 0
 3048 002e 4091 0000 		lds r20,rgblight_config+3
 3049 0032 6091 0000 		lds r22,rgblight_config+2
 3050 0036 8091 0000 		lds r24,current_hue.2391
 3051 003a 9091 0000 		lds r25,current_hue.2391+1
 3052 003e 0E94 0000 		call rgblight_sethsv_noeeprom_old
 3053               	.LVL224:
 627:quantum/rgblight.c ****   current_hue = (current_hue + 1) % 360;
 3054               		.loc 1 627 0
 3055 0042 8091 0000 		lds r24,current_hue.2391
 3056 0046 9091 0000 		lds r25,current_hue.2391+1
 3057 004a 0196      		adiw r24,1
 3058 004c 68E6      		ldi r22,lo8(104)
 3059 004e 71E0      		ldi r23,lo8(1)
 3060 0050 0E94 0000 		call __udivmodhi4
 3061 0054 9093 0000 		sts current_hue.2391+1,r25
 3062 0058 8093 0000 		sts current_hue.2391,r24
 3063               	.L203:
 3064               	/* epilogue start */
 628:quantum/rgblight.c **** }
 3065               		.loc 1 628 0
 3066 005c CF91      		pop r28
 3067               	.LVL225:
 3068 005e 0895      		ret
 3069               		.cfi_endproc
 3070               	.LFE57:
 3072               		.section	.text.rgblight_effect_rainbow_swirl,"ax",@progbits
 3073               	.global	rgblight_effect_rainbow_swirl
 3075               	rgblight_effect_rainbow_swirl:
 3076               	.LFB58:
 629:quantum/rgblight.c **** void rgblight_effect_rainbow_swirl(uint8_t interval) {
 3077               		.loc 1 629 0
 3078               		.cfi_startproc
 3079               	.LVL226:
 3080 0000 CF92      		push r12
 3081               	.LCFI140:
 3082               		.cfi_def_cfa_offset 3
 3083               		.cfi_offset 12, -2
 3084 0002 DF92      		push r13
 3085               	.LCFI141:
 3086               		.cfi_def_cfa_offset 4
 3087               		.cfi_offset 13, -3
 3088 0004 FF92      		push r15
 3089               	.LCFI142:
 3090               		.cfi_def_cfa_offset 5
 3091               		.cfi_offset 15, -4
 3092 0006 0F93      		push r16
 3093               	.LCFI143:
 3094               		.cfi_def_cfa_offset 6
 3095               		.cfi_offset 16, -5
 3096 0008 1F93      		push r17
 3097               	.LCFI144:
 3098               		.cfi_def_cfa_offset 7
 3099               		.cfi_offset 17, -6
 3100 000a CF93      		push r28
 3101               	.LCFI145:
 3102               		.cfi_def_cfa_offset 8
 3103               		.cfi_offset 28, -7
 3104 000c DF93      		push r29
 3105               	.LCFI146:
 3106               		.cfi_def_cfa_offset 9
 3107               		.cfi_offset 29, -8
 3108               	/* prologue: function */
 3109               	/* frame size = 0 */
 3110               	/* stack size = 7 */
 3111               	.L__stack_usage = 7
 3112 000e F82E      		mov r15,r24
 630:quantum/rgblight.c ****   static uint16_t current_hue = 0;
 631:quantum/rgblight.c ****   static uint16_t last_timer = 0;
 632:quantum/rgblight.c ****   uint16_t hue;
 633:quantum/rgblight.c ****   uint8_t i;
 634:quantum/rgblight.c ****   if (timer_elapsed(last_timer) < pgm_read_byte(&RGBLED_RAINBOW_SWIRL_INTERVALS[interval / 2])) {
 3113               		.loc 1 634 0
 3114 0010 8091 0000 		lds r24,last_timer.2400
 3115 0014 9091 0000 		lds r25,last_timer.2400+1
 3116               	.LVL227:
 3117 0018 0E94 0000 		call timer_elapsed
 3118               	.LVL228:
 3119               	.LBB47:
 3120 001c EF2D      		mov r30,r15
 3121 001e E695      		lsr r30
 3122 0020 F0E0      		ldi r31,0
 3123 0022 E050      		subi r30,lo8(-(RGBLED_RAINBOW_SWIRL_INTERVALS))
 3124 0024 F040      		sbci r31,hi8(-(RGBLED_RAINBOW_SWIRL_INTERVALS))
 3125               	/* #APP */
 3126               	 ;  634 "quantum/rgblight.c" 1
 3127 0026 E491      		lpm r30, Z
 3128               		
 3129               	 ;  0 "" 2
 3130               	.LVL229:
 3131               	/* #NOAPP */
 3132               	.LBE47:
 3133 0028 F0E0      		ldi r31,0
 3134 002a 8E17      		cp r24,r30
 3135 002c 9F07      		cpc r25,r31
 3136 002e 00F0      		brlo .L205
 635:quantum/rgblight.c ****     return;
 636:quantum/rgblight.c ****   }
 637:quantum/rgblight.c ****   last_timer = timer_read();
 3137               		.loc 1 637 0
 3138 0030 0E94 0000 		call timer_read
 3139               	.LVL230:
 3140 0034 9093 0000 		sts last_timer.2400+1,r25
 3141 0038 8093 0000 		sts last_timer.2400,r24
 3142               	.LVL231:
 3143 003c 00E0      		ldi r16,lo8(led)
 3144 003e 10E0      		ldi r17,hi8(led)
 3145 0040 C0E0      		ldi r28,0
 3146 0042 D0E0      		ldi r29,0
 638:quantum/rgblight.c ****   for (i = 0; i < RGBLED_NUM; i++) {
 639:quantum/rgblight.c ****     hue = (360 / RGBLED_NUM * i + current_hue) % 360;
 3147               		.loc 1 639 0
 3148 0044 88E6      		ldi r24,lo8(104)
 3149 0046 C82E      		mov r12,r24
 3150 0048 DD24      		clr r13
 3151 004a D394      		inc r13
 3152               	.LVL232:
 3153               	.L207:
 3154               		.loc 1 639 0 is_stmt 0 discriminator 3
 3155 004c 8091 0000 		lds r24,current_hue.2399
 3156 0050 9091 0000 		lds r25,current_hue.2399+1
 3157 0054 8C0F      		add r24,r28
 3158 0056 9D1F      		adc r25,r29
 3159 0058 B601      		movw r22,r12
 3160 005a 0E94 0000 		call __udivmodhi4
 640:quantum/rgblight.c ****     sethsv(hue, rgblight_config.sat, rgblight_config.val, (LED_TYPE *)&led[i]);
 3161               		.loc 1 640 0 is_stmt 1 discriminator 3
 3162 005e 9801      		movw r18,r16
 3163 0060 4091 0000 		lds r20,rgblight_config+3
 3164 0064 6091 0000 		lds r22,rgblight_config+2
 3165 0068 0E94 0000 		call sethsv
 3166               	.LVL233:
 3167 006c 6996      		adiw r28,25
 3168 006e 0D5F      		subi r16,-3
 3169 0070 1F4F      		sbci r17,-1
 638:quantum/rgblight.c ****   for (i = 0; i < RGBLED_NUM; i++) {
 3170               		.loc 1 638 0 discriminator 3
 3171 0072 CE35      		cpi r28,94
 3172 0074 81E0      		ldi r24,1
 3173 0076 D807      		cpc r29,r24
 3174 0078 01F4      		brne .L207
 641:quantum/rgblight.c ****   }
 642:quantum/rgblight.c ****   rgblight_set();
 3175               		.loc 1 642 0
 3176 007a 0E94 0000 		call rgblight_set
 3177               	.LVL234:
 3178 007e 2091 0000 		lds r18,current_hue.2399
 3179 0082 3091 0000 		lds r19,current_hue.2399+1
 643:quantum/rgblight.c **** 
 644:quantum/rgblight.c ****   if (interval % 2) {
 3180               		.loc 1 644 0
 3181 0086 F0FE      		sbrs r15,0
 3182 0088 00C0      		rjmp .L208
 645:quantum/rgblight.c ****     current_hue = (current_hue + 1) % 360;
 3183               		.loc 1 645 0
 3184 008a C901      		movw r24,r18
 3185 008c 0196      		adiw r24,1
 3186 008e 68E6      		ldi r22,lo8(104)
 3187 0090 71E0      		ldi r23,lo8(1)
 3188 0092 0E94 0000 		call __udivmodhi4
 3189 0096 9093 0000 		sts current_hue.2399+1,r25
 3190 009a 8093 0000 		sts current_hue.2399,r24
 3191 009e 00C0      		rjmp .L205
 3192               	.L208:
 646:quantum/rgblight.c ****   } else {
 647:quantum/rgblight.c ****     if (current_hue - 1 < 0) {
 648:quantum/rgblight.c ****       current_hue = 359;
 649:quantum/rgblight.c ****     } else {
 650:quantum/rgblight.c ****       current_hue = current_hue - 1;
 3193               		.loc 1 650 0
 3194 00a0 2150      		subi r18,1
 3195 00a2 3109      		sbc r19,__zero_reg__
 3196 00a4 3093 0000 		sts current_hue.2399+1,r19
 3197 00a8 2093 0000 		sts current_hue.2399,r18
 3198               	.L205:
 3199               	/* epilogue start */
 651:quantum/rgblight.c ****     }
 652:quantum/rgblight.c ****   }
 653:quantum/rgblight.c **** }
 3200               		.loc 1 653 0
 3201 00ac DF91      		pop r29
 3202 00ae CF91      		pop r28
 3203 00b0 1F91      		pop r17
 3204 00b2 0F91      		pop r16
 3205 00b4 FF90      		pop r15
 3206               	.LVL235:
 3207 00b6 DF90      		pop r13
 3208 00b8 CF90      		pop r12
 3209 00ba 0895      		ret
 3210               		.cfi_endproc
 3211               	.LFE58:
 3213               		.section	.text.rgblight_effect_snake,"ax",@progbits
 3214               	.global	rgblight_effect_snake
 3216               	rgblight_effect_snake:
 3217               	.LFB59:
 654:quantum/rgblight.c **** void rgblight_effect_snake(uint8_t interval) {
 3218               		.loc 1 654 0
 3219               		.cfi_startproc
 3220               	.LVL236:
 3221 0000 AF92      		push r10
 3222               	.LCFI147:
 3223               		.cfi_def_cfa_offset 3
 3224               		.cfi_offset 10, -2
 3225 0002 BF92      		push r11
 3226               	.LCFI148:
 3227               		.cfi_def_cfa_offset 4
 3228               		.cfi_offset 11, -3
 3229 0004 CF92      		push r12
 3230               	.LCFI149:
 3231               		.cfi_def_cfa_offset 5
 3232               		.cfi_offset 12, -4
 3233 0006 DF92      		push r13
 3234               	.LCFI150:
 3235               		.cfi_def_cfa_offset 6
 3236               		.cfi_offset 13, -5
 3237 0008 EF92      		push r14
 3238               	.LCFI151:
 3239               		.cfi_def_cfa_offset 7
 3240               		.cfi_offset 14, -6
 3241 000a FF92      		push r15
 3242               	.LCFI152:
 3243               		.cfi_def_cfa_offset 8
 3244               		.cfi_offset 15, -7
 3245 000c 0F93      		push r16
 3246               	.LCFI153:
 3247               		.cfi_def_cfa_offset 9
 3248               		.cfi_offset 16, -8
 3249 000e 1F93      		push r17
 3250               	.LCFI154:
 3251               		.cfi_def_cfa_offset 10
 3252               		.cfi_offset 17, -9
 3253 0010 CF93      		push r28
 3254               	.LCFI155:
 3255               		.cfi_def_cfa_offset 11
 3256               		.cfi_offset 28, -10
 3257 0012 DF93      		push r29
 3258               	.LCFI156:
 3259               		.cfi_def_cfa_offset 12
 3260               		.cfi_offset 29, -11
 3261               	/* prologue: function */
 3262               	/* frame size = 0 */
 3263               	/* stack size = 10 */
 3264               	.L__stack_usage = 10
 3265 0014 C82F      		mov r28,r24
 3266               	.LVL237:
 655:quantum/rgblight.c ****   static uint8_t pos = 0;
 656:quantum/rgblight.c ****   static uint16_t last_timer = 0;
 657:quantum/rgblight.c ****   uint8_t i, j;
 658:quantum/rgblight.c ****   int8_t k;
 659:quantum/rgblight.c ****   int8_t increment = 1;
 660:quantum/rgblight.c ****   if (interval % 2) {
 3267               		.loc 1 660 0
 3268 0016 80FF      		sbrs r24,0
 3269 0018 00C0      		rjmp .L219
 661:quantum/rgblight.c ****     increment = -1;
 3270               		.loc 1 661 0
 3271 001a 1FEF      		ldi r17,lo8(-1)
 3272 001c 00C0      		rjmp .L211
 3273               	.L219:
 659:quantum/rgblight.c ****   if (interval % 2) {
 3274               		.loc 1 659 0
 3275 001e 11E0      		ldi r17,lo8(1)
 3276               	.L211:
 3277               	.LVL238:
 662:quantum/rgblight.c ****   }
 663:quantum/rgblight.c ****   if (timer_elapsed(last_timer) < pgm_read_byte(&RGBLED_SNAKE_INTERVALS[interval / 2])) {
 3278               		.loc 1 663 0
 3279 0020 8091 0000 		lds r24,last_timer.2413
 3280 0024 9091 0000 		lds r25,last_timer.2413+1
 3281               	.LVL239:
 3282 0028 0E94 0000 		call timer_elapsed
 3283               	.LVL240:
 3284               	.LBB48:
 3285 002c C695      		lsr r28
 3286               	.LVL241:
 3287 002e EC2F      		mov r30,r28
 3288 0030 F0E0      		ldi r31,0
 3289 0032 E050      		subi r30,lo8(-(RGBLED_SNAKE_INTERVALS))
 3290 0034 F040      		sbci r31,hi8(-(RGBLED_SNAKE_INTERVALS))
 3291               	/* #APP */
 3292               	 ;  663 "quantum/rgblight.c" 1
 3293 0036 E491      		lpm r30, Z
 3294               		
 3295               	 ;  0 "" 2
 3296               	.LVL242:
 3297               	/* #NOAPP */
 3298               	.LBE48:
 3299 0038 F0E0      		ldi r31,0
 3300 003a 8E17      		cp r24,r30
 3301 003c 9F07      		cpc r25,r31
 3302 003e 00F4      		brsh .+2
 3303 0040 00C0      		rjmp .L210
 664:quantum/rgblight.c ****     return;
 665:quantum/rgblight.c ****   }
 666:quantum/rgblight.c ****   last_timer = timer_read();
 3304               		.loc 1 666 0
 3305 0042 0E94 0000 		call timer_read
 3306               	.LVL243:
 3307 0046 9093 0000 		sts last_timer.2413+1,r25
 3308 004a 8093 0000 		sts last_timer.2413,r24
 3309               	.LVL244:
 3310 004e 20E0      		ldi r18,lo8(led)
 3311 0050 C22E      		mov r12,r18
 3312 0052 20E0      		ldi r18,hi8(led)
 3313 0054 D22E      		mov r13,r18
 3314 0056 30E0      		ldi r19,lo8(led+2)
 3315 0058 E32E      		mov r14,r19
 3316 005a 30E0      		ldi r19,hi8(led+2)
 3317 005c F32E      		mov r15,r19
 3318 005e C0E0      		ldi r28,0
 3319 0060 D0E0      		ldi r29,0
 3320               	.LVL245:
 3321               	.L216:
 3322 0062 F701      		movw r30,r14
 3323 0064 3197      		sbiw r30,1
 667:quantum/rgblight.c ****   for (i = 0; i < RGBLED_NUM; i++) {
 668:quantum/rgblight.c ****     led[i].r = 0;
 3324               		.loc 1 668 0
 3325 0066 1082      		st Z,__zero_reg__
 669:quantum/rgblight.c ****     led[i].g = 0;
 3326               		.loc 1 669 0
 3327 0068 F601      		movw r30,r12
 3328 006a 1082      		st Z,__zero_reg__
 670:quantum/rgblight.c ****     led[i].b = 0;
 3329               		.loc 1 670 0
 3330 006c F701      		movw r30,r14
 3331 006e 1082      		st Z,__zero_reg__
 3332               	.LVL246:
 3333 0070 94E0      		ldi r25,lo8(4)
 3334 0072 A92E      		mov r10,r25
 3335 0074 B12C      		mov r11,__zero_reg__
 3336 0076 00E0      		ldi r16,0
 3337               	.LVL247:
 3338               	.L215:
 671:quantum/rgblight.c ****     for (j = 0; j < RGBLIGHT_EFFECT_SNAKE_LENGTH; j++) {
 672:quantum/rgblight.c ****       k = pos + j * increment;
 3339               		.loc 1 672 0
 3340 0078 8091 0000 		lds r24,pos.2412
 3341 007c 800F      		add r24,r16
 3342               	.LVL248:
 673:quantum/rgblight.c ****       if (k < 0) {
 3343               		.loc 1 673 0
 3344 007e 87FD      		sbrc r24,7
 674:quantum/rgblight.c ****         k = k + RGBLED_NUM;
 3345               		.loc 1 674 0
 3346 0080 825F      		subi r24,lo8(-(14))
 3347               	.LVL249:
 3348               	.L213:
 675:quantum/rgblight.c ****       }
 676:quantum/rgblight.c ****       if (i == k) {
 3349               		.loc 1 676 0
 3350 0082 082E      		mov __tmp_reg__,r24
 3351 0084 000C      		lsl r0
 3352 0086 990B      		sbc r25,r25
 3353 0088 C817      		cp r28,r24
 3354 008a D907      		cpc r29,r25
 3355 008c 01F4      		brne .L214
 677:quantum/rgblight.c ****         sethsv(rgblight_config.hue, rgblight_config.sat, (uint8_t)(rgblight_config.val*(RGBLIGHT_EF
 3356               		.loc 1 677 0
 3357 008e 8091 0000 		lds r24,rgblight_config+3
 3358               	.LVL250:
 3359 0092 8A9D      		mul r24,r10
 3360 0094 A001      		movw r20,r0
 3361 0096 8B9D      		mul r24,r11
 3362 0098 500D      		add r21,r0
 3363 009a 1124      		clr __zero_reg__
 3364 009c 5595      		asr r21
 3365 009e 4795      		ror r20
 3366 00a0 5595      		asr r21
 3367 00a2 4795      		ror r20
 3368 00a4 8091 0000 		lds r24,rgblight_config
 3369 00a8 881F      		rol r24
 3370 00aa 8827      		clr r24
 3371 00ac 881F      		rol r24
 3372 00ae 9091 0000 		lds r25,rgblight_config+1
 3373 00b2 592F      		mov r21,r25
 3374 00b4 550F      		lsl r21
 3375 00b6 97FB      		bst r25,7
 3376 00b8 9927      		clr r25
 3377 00ba 90F9      		bld r25,0
 3378 00bc 9601      		movw r18,r12
 3379 00be 6091 0000 		lds r22,rgblight_config+2
 3380 00c2 852B      		or r24,r21
 3381 00c4 0E94 0000 		call sethsv
 3382               	.LVL251:
 3383               	.L214:
 3384 00c8 010F      		add r16,r17
 3385 00ca F1E0      		ldi r31,1
 3386 00cc AF1A      		sub r10,r31
 3387 00ce B108      		sbc r11,__zero_reg__
 671:quantum/rgblight.c ****       k = pos + j * increment;
 3388               		.loc 1 671 0 discriminator 2
 3389 00d0 01F4      		brne .L215
 3390               	.LVL252:
 3391 00d2 2196      		adiw r28,1
 3392               	.LVL253:
 3393 00d4 83E0      		ldi r24,3
 3394 00d6 C80E      		add r12,r24
 3395 00d8 D11C      		adc r13,__zero_reg__
 3396 00da E3E0      		ldi r30,3
 3397 00dc EE0E      		add r14,r30
 3398 00de F11C      		adc r15,__zero_reg__
 667:quantum/rgblight.c ****     led[i].r = 0;
 3399               		.loc 1 667 0 discriminator 2
 3400 00e0 CE30      		cpi r28,14
 3401 00e2 D105      		cpc r29,__zero_reg__
 3402 00e4 01F0      		breq .+2
 3403 00e6 00C0      		rjmp .L216
 678:quantum/rgblight.c ****       }
 679:quantum/rgblight.c ****     }
 680:quantum/rgblight.c ****   }
 681:quantum/rgblight.c ****   rgblight_set();
 3404               		.loc 1 681 0
 3405 00e8 0E94 0000 		call rgblight_set
 3406               	.LVL254:
 3407 00ec 8091 0000 		lds r24,pos.2412
 682:quantum/rgblight.c ****   if (increment == 1) {
 3408               		.loc 1 682 0
 3409 00f0 1130      		cpi r17,lo8(1)
 3410 00f2 01F4      		brne .L217
 683:quantum/rgblight.c ****     if (pos - 1 < 0) {
 3411               		.loc 1 683 0
 3412 00f4 8111      		cpse r24,__zero_reg__
 3413 00f6 00C0      		rjmp .L218
 684:quantum/rgblight.c ****       pos = RGBLED_NUM - 1;
 3414               		.loc 1 684 0
 3415 00f8 8DE0      		ldi r24,lo8(13)
 3416 00fa 00C0      		rjmp .L222
 3417               	.L218:
 685:quantum/rgblight.c ****     } else {
 686:quantum/rgblight.c ****       pos -= 1;
 3418               		.loc 1 686 0
 3419 00fc 8150      		subi r24,lo8(-(-1))
 3420 00fe 00C0      		rjmp .L222
 3421               	.L217:
 687:quantum/rgblight.c ****     }
 688:quantum/rgblight.c ****   } else {
 689:quantum/rgblight.c ****     pos = (pos + 1) % RGBLED_NUM;
 3422               		.loc 1 689 0
 3423 0100 90E0      		ldi r25,0
 3424 0102 0196      		adiw r24,1
 3425 0104 BE01      		movw r22,r28
 3426 0106 0E94 0000 		call __divmodhi4
 3427               	.L222:
 3428 010a 8093 0000 		sts pos.2412,r24
 3429               	.LVL255:
 3430               	.L210:
 3431               	/* epilogue start */
 690:quantum/rgblight.c ****   }
 691:quantum/rgblight.c **** }
 3432               		.loc 1 691 0
 3433 010e DF91      		pop r29
 3434 0110 CF91      		pop r28
 3435 0112 1F91      		pop r17
 3436               	.LVL256:
 3437 0114 0F91      		pop r16
 3438 0116 FF90      		pop r15
 3439 0118 EF90      		pop r14
 3440 011a DF90      		pop r13
 3441 011c CF90      		pop r12
 3442 011e BF90      		pop r11
 3443 0120 AF90      		pop r10
 3444 0122 0895      		ret
 3445               		.cfi_endproc
 3446               	.LFE59:
 3448               		.section	.text.rgblight_effect_knight,"ax",@progbits
 3449               	.global	rgblight_effect_knight
 3451               	rgblight_effect_knight:
 3452               	.LFB60:
 692:quantum/rgblight.c **** void rgblight_effect_knight(uint8_t interval) {
 3453               		.loc 1 692 0
 3454               		.cfi_startproc
 3455               	.LVL257:
 3456 0000 0F93      		push r16
 3457               	.LCFI157:
 3458               		.cfi_def_cfa_offset 3
 3459               		.cfi_offset 16, -2
 3460 0002 1F93      		push r17
 3461               	.LCFI158:
 3462               		.cfi_def_cfa_offset 4
 3463               		.cfi_offset 17, -3
 3464 0004 CF93      		push r28
 3465               	.LCFI159:
 3466               		.cfi_def_cfa_offset 5
 3467               		.cfi_offset 28, -4
 3468 0006 DF93      		push r29
 3469               	.LCFI160:
 3470               		.cfi_def_cfa_offset 6
 3471               		.cfi_offset 29, -5
 3472               	/* prologue: function */
 3473               	/* frame size = 0 */
 3474               	/* stack size = 4 */
 3475               	.L__stack_usage = 4
 3476 0008 C82F      		mov r28,r24
 693:quantum/rgblight.c ****   static uint16_t last_timer = 0;
 694:quantum/rgblight.c ****   if (timer_elapsed(last_timer) < pgm_read_byte(&RGBLED_KNIGHT_INTERVALS[interval])) {
 3477               		.loc 1 694 0
 3478 000a 8091 0000 		lds r24,last_timer.2430
 3479 000e 9091 0000 		lds r25,last_timer.2430+1
 3480               	.LVL258:
 3481 0012 0E94 0000 		call timer_elapsed
 3482               	.LVL259:
 3483               	.LBB49:
 3484 0016 EC2F      		mov r30,r28
 3485 0018 F0E0      		ldi r31,0
 3486 001a E050      		subi r30,lo8(-(RGBLED_KNIGHT_INTERVALS))
 3487 001c F040      		sbci r31,hi8(-(RGBLED_KNIGHT_INTERVALS))
 3488               	/* #APP */
 3489               	 ;  694 "quantum/rgblight.c" 1
 3490 001e E491      		lpm r30, Z
 3491               		
 3492               	 ;  0 "" 2
 3493               	.LVL260:
 3494               	/* #NOAPP */
 3495               	.LBE49:
 3496 0020 F0E0      		ldi r31,0
 3497 0022 8E17      		cp r24,r30
 3498 0024 9F07      		cpc r25,r31
 3499 0026 00F4      		brsh .+2
 3500 0028 00C0      		rjmp .L223
 695:quantum/rgblight.c ****     return;
 696:quantum/rgblight.c ****   }
 697:quantum/rgblight.c ****   last_timer = timer_read();
 3501               		.loc 1 697 0
 3502 002a 0E94 0000 		call timer_read
 3503               	.LVL261:
 3504 002e 9093 0000 		sts last_timer.2430+1,r25
 3505 0032 8093 0000 		sts last_timer.2430,r24
 3506               	.LVL262:
 3507 0036 80E0      		ldi r24,0
 3508 0038 90E0      		ldi r25,0
 3509               	.LVL263:
 3510               	.L226:
 3511 003a FC01      		movw r30,r24
 3512 003c E050      		subi r30,lo8(-(led))
 3513 003e F040      		sbci r31,hi8(-(led))
 698:quantum/rgblight.c **** 
 699:quantum/rgblight.c ****   static int8_t low_bound = 0;
 700:quantum/rgblight.c ****   static int8_t high_bound = RGBLIGHT_EFFECT_KNIGHT_LENGTH - 1;
 701:quantum/rgblight.c ****   static int8_t increment = 1;
 702:quantum/rgblight.c ****   uint8_t i, cur;
 703:quantum/rgblight.c **** 
 704:quantum/rgblight.c ****   // Set all the LEDs to 0
 705:quantum/rgblight.c ****   for (i = 0; i < RGBLED_NUM; i++) {
 706:quantum/rgblight.c ****     led[i].r = 0;
 3514               		.loc 1 706 0 discriminator 3
 3515 0040 1182      		std Z+1,__zero_reg__
 707:quantum/rgblight.c ****     led[i].g = 0;
 3516               		.loc 1 707 0 discriminator 3
 3517 0042 1082      		st Z,__zero_reg__
 708:quantum/rgblight.c ****     led[i].b = 0;
 3518               		.loc 1 708 0 discriminator 3
 3519 0044 1282      		std Z+2,__zero_reg__
 3520 0046 0396      		adiw r24,3
 705:quantum/rgblight.c ****     led[i].r = 0;
 3521               		.loc 1 705 0 discriminator 3
 3522 0048 8A32      		cpi r24,42
 3523 004a 9105      		cpc r25,__zero_reg__
 3524 004c 01F4      		brne .L226
 3525 004e C0E0      		ldi r28,0
 3526 0050 D0E0      		ldi r29,0
 3527               	.LVL264:
 709:quantum/rgblight.c ****   }
 710:quantum/rgblight.c ****   // Determine which LEDs should be lit up
 711:quantum/rgblight.c ****   for (i = 0; i < RGBLIGHT_EFFECT_KNIGHT_LED_NUM; i++) {
 712:quantum/rgblight.c ****     cur = (i + RGBLIGHT_EFFECT_KNIGHT_OFFSET) % RGBLED_NUM;
 3528               		.loc 1 712 0
 3529 0052 0EE0      		ldi r16,lo8(14)
 3530 0054 10E0      		ldi r17,0
 3531               	.L229:
 3532               	.LVL265:
 3533 0056 CE01      		movw r24,r28
 3534 0058 B801      		movw r22,r16
 3535 005a 0E94 0000 		call __divmodhi4
 3536               	.LVL266:
 713:quantum/rgblight.c **** 
 714:quantum/rgblight.c ****     if (i >= low_bound && i <= high_bound) {
 3537               		.loc 1 714 0
 3538 005e 4091 0000 		lds r20,low_bound.2434
 3539 0062 042E      		mov __tmp_reg__,r20
 3540 0064 000C      		lsl r0
 3541 0066 550B      		sbc r21,r21
 3542 0068 FC01      		movw r30,r24
 3543 006a EE0F      		lsl r30
 3544 006c FF1F      		rol r31
 3545 006e C417      		cp r28,r20
 3546 0070 D507      		cpc r29,r21
 3547 0072 04F0      		brlt .L227
 3548               		.loc 1 714 0 is_stmt 0 discriminator 1
 3549 0074 4091 0000 		lds r20,high_bound.2435
 3550 0078 042E      		mov __tmp_reg__,r20
 3551 007a 000C      		lsl r0
 3552 007c 550B      		sbc r21,r21
 3553 007e 4C17      		cp r20,r28
 3554 0080 5D07      		cpc r21,r29
 3555 0082 04F0      		brlt .L227
 715:quantum/rgblight.c ****       sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, (LED_TYPE *)&led[cur]);
 3556               		.loc 1 715 0 is_stmt 1
 3557 0084 8E0F      		add r24,r30
 3558 0086 9F1F      		adc r25,r31
 3559               	.LVL267:
 3560 0088 9C01      		movw r18,r24
 3561 008a 2050      		subi r18,lo8(-(led))
 3562 008c 3040      		sbci r19,hi8(-(led))
 3563 008e 8091 0000 		lds r24,rgblight_config
 3564 0092 881F      		rol r24
 3565 0094 8827      		clr r24
 3566 0096 881F      		rol r24
 3567 0098 9091 0000 		lds r25,rgblight_config+1
 3568 009c 592F      		mov r21,r25
 3569 009e 550F      		lsl r21
 3570 00a0 97FB      		bst r25,7
 3571 00a2 9927      		clr r25
 3572 00a4 90F9      		bld r25,0
 3573 00a6 4091 0000 		lds r20,rgblight_config+3
 3574 00aa 6091 0000 		lds r22,rgblight_config+2
 3575 00ae 852B      		or r24,r21
 3576 00b0 0E94 0000 		call sethsv
 3577               	.LVL268:
 3578 00b4 00C0      		rjmp .L228
 3579               	.LVL269:
 3580               	.L227:
 716:quantum/rgblight.c ****     } else {
 717:quantum/rgblight.c ****       led[cur].r = 0;
 3581               		.loc 1 717 0
 3582 00b6 E80F      		add r30,r24
 3583 00b8 F91F      		adc r31,r25
 3584 00ba E050      		subi r30,lo8(-(led))
 3585 00bc F040      		sbci r31,hi8(-(led))
 3586 00be 1182      		std Z+1,__zero_reg__
 718:quantum/rgblight.c ****       led[cur].g = 0;
 3587               		.loc 1 718 0
 3588 00c0 1082      		st Z,__zero_reg__
 719:quantum/rgblight.c ****       led[cur].b = 0;
 3589               		.loc 1 719 0
 3590 00c2 1282      		std Z+2,__zero_reg__
 3591               	.LVL270:
 3592               	.L228:
 3593 00c4 2196      		adiw r28,1
 3594               	.LVL271:
 711:quantum/rgblight.c ****     cur = (i + RGBLIGHT_EFFECT_KNIGHT_OFFSET) % RGBLED_NUM;
 3595               		.loc 1 711 0 discriminator 2
 3596 00c6 CE30      		cpi r28,14
 3597 00c8 D105      		cpc r29,__zero_reg__
 3598 00ca 01F4      		brne .L229
 720:quantum/rgblight.c ****     }
 721:quantum/rgblight.c ****   }
 722:quantum/rgblight.c ****   rgblight_set();
 3599               		.loc 1 722 0
 3600 00cc 0E94 0000 		call rgblight_set
 3601               	.LVL272:
 723:quantum/rgblight.c **** 
 724:quantum/rgblight.c ****   // Move from low_bound to high_bound changing the direction we increment each
 725:quantum/rgblight.c ****   // time a boundary is hit.
 726:quantum/rgblight.c ****   low_bound += increment;
 3602               		.loc 1 726 0
 3603 00d0 8091 0000 		lds r24,increment.2436
 3604 00d4 9091 0000 		lds r25,low_bound.2434
 3605 00d8 980F      		add r25,r24
 3606 00da 9093 0000 		sts low_bound.2434,r25
 727:quantum/rgblight.c ****   high_bound += increment;
 3607               		.loc 1 727 0
 3608 00de 2091 0000 		lds r18,high_bound.2435
 3609 00e2 280F      		add r18,r24
 3610 00e4 2093 0000 		sts high_bound.2435,r18
 728:quantum/rgblight.c **** 
 729:quantum/rgblight.c ****   if (high_bound <= 0 || low_bound >= RGBLIGHT_EFFECT_KNIGHT_LED_NUM - 1) {
 3611               		.loc 1 729 0
 3612 00e8 1216      		cp __zero_reg__,r18
 3613 00ea 04F4      		brge .L230
 3614               		.loc 1 729 0 is_stmt 0 discriminator 1
 3615 00ec 9D30      		cpi r25,lo8(13)
 3616 00ee 04F0      		brlt .L223
 3617               	.L230:
 730:quantum/rgblight.c ****     increment = -increment;
 3618               		.loc 1 730 0 is_stmt 1
 3619 00f0 8195      		neg r24
 3620 00f2 8093 0000 		sts increment.2436,r24
 3621               	.LVL273:
 3622               	.L223:
 3623               	/* epilogue start */
 731:quantum/rgblight.c ****   }
 732:quantum/rgblight.c **** }
 3624               		.loc 1 732 0
 3625 00f6 DF91      		pop r29
 3626 00f8 CF91      		pop r28
 3627 00fa 1F91      		pop r17
 3628 00fc 0F91      		pop r16
 3629 00fe 0895      		ret
 3630               		.cfi_endproc
 3631               	.LFE60:
 3633               		.section	.text.rgblight_effect_christmas,"ax",@progbits
 3634               	.global	rgblight_effect_christmas
 3636               	rgblight_effect_christmas:
 3637               	.LFB61:
 733:quantum/rgblight.c **** 
 734:quantum/rgblight.c **** 
 735:quantum/rgblight.c **** void rgblight_effect_christmas(void) {
 3638               		.loc 1 735 0
 3639               		.cfi_startproc
 3640 0000 EF92      		push r14
 3641               	.LCFI161:
 3642               		.cfi_def_cfa_offset 3
 3643               		.cfi_offset 14, -2
 3644 0002 FF92      		push r15
 3645               	.LCFI162:
 3646               		.cfi_def_cfa_offset 4
 3647               		.cfi_offset 15, -3
 3648 0004 0F93      		push r16
 3649               	.LCFI163:
 3650               		.cfi_def_cfa_offset 5
 3651               		.cfi_offset 16, -4
 3652 0006 1F93      		push r17
 3653               	.LCFI164:
 3654               		.cfi_def_cfa_offset 6
 3655               		.cfi_offset 17, -5
 3656 0008 CF93      		push r28
 3657               	.LCFI165:
 3658               		.cfi_def_cfa_offset 7
 3659               		.cfi_offset 28, -6
 3660 000a DF93      		push r29
 3661               	.LCFI166:
 3662               		.cfi_def_cfa_offset 8
 3663               		.cfi_offset 29, -7
 3664               	/* prologue: function */
 3665               	/* frame size = 0 */
 3666               	/* stack size = 6 */
 3667               	.L__stack_usage = 6
 736:quantum/rgblight.c ****   static uint16_t current_offset = 0;
 737:quantum/rgblight.c ****   static uint16_t last_timer = 0;
 738:quantum/rgblight.c ****   uint16_t hue;
 739:quantum/rgblight.c ****   uint8_t i;
 740:quantum/rgblight.c ****   if (timer_elapsed(last_timer) < RGBLIGHT_EFFECT_CHRISTMAS_INTERVAL) {
 3668               		.loc 1 740 0
 3669 000c 8091 0000 		lds r24,last_timer.2449
 3670 0010 9091 0000 		lds r25,last_timer.2449+1
 3671 0014 0E94 0000 		call timer_elapsed
 3672               	.LVL274:
 3673 0018 883E      		cpi r24,-24
 3674 001a 9340      		sbci r25,3
 3675 001c 00F0      		brlo .L234
 741:quantum/rgblight.c ****     return;
 742:quantum/rgblight.c ****   }
 743:quantum/rgblight.c ****   last_timer = timer_read();
 3676               		.loc 1 743 0
 3677 001e 0E94 0000 		call timer_read
 3678               	.LVL275:
 3679 0022 9093 0000 		sts last_timer.2449+1,r25
 3680 0026 8093 0000 		sts last_timer.2449,r24
 744:quantum/rgblight.c ****   current_offset = (current_offset + 1) % 2;
 3681               		.loc 1 744 0
 3682 002a C091 0000 		lds r28,current_offset.2448
 3683 002e D091 0000 		lds r29,current_offset.2448+1
 3684 0032 2196      		adiw r28,1
 3685 0034 C170      		andi r28,1
 3686 0036 DD27      		clr r29
 3687 0038 D093 0000 		sts current_offset.2448+1,r29
 3688 003c C093 0000 		sts current_offset.2448,r28
 3689               	.LVL276:
 3690 0040 80E0      		ldi r24,lo8(led)
 3691 0042 E82E      		mov r14,r24
 3692 0044 80E0      		ldi r24,hi8(led)
 3693 0046 F82E      		mov r15,r24
 745:quantum/rgblight.c ****   for (i = 0; i < RGBLED_NUM; i++) {
 3694               		.loc 1 745 0
 3695 0048 10E0      		ldi r17,0
 746:quantum/rgblight.c ****     hue = 0 + ((i/RGBLIGHT_EFFECT_CHRISTMAS_STEP + current_offset) % 2) * 120;
 3696               		.loc 1 746 0
 3697 004a 08E7      		ldi r16,lo8(120)
 3698               	.LVL277:
 3699               	.L236:
 3700               		.loc 1 746 0 is_stmt 0 discriminator 3
 3701 004c 812F      		mov r24,r17
 3702 004e 8695      		lsr r24
 3703               	.LVL278:
 3704 0050 FE01      		movw r30,r28
 3705 0052 E80F      		add r30,r24
 3706 0054 F11D      		adc r31,__zero_reg__
 3707 0056 CF01      		movw r24,r30
 3708               	.LVL279:
 3709 0058 8170      		andi r24,1
 3710 005a 9927      		clr r25
 747:quantum/rgblight.c ****     sethsv(hue, rgblight_config.sat, rgblight_config.val, (LED_TYPE *)&led[i]);
 3711               		.loc 1 747 0 is_stmt 1 discriminator 3
 3712 005c 9701      		movw r18,r14
 3713 005e 4091 0000 		lds r20,rgblight_config+3
 3714 0062 6091 0000 		lds r22,rgblight_config+2
 3715 0066 FC01      		movw r30,r24
 3716 0068 0E9F      		mul r16,r30
 3717 006a C001      		movw r24,r0
 3718 006c 0F9F      		mul r16,r31
 3719 006e 900D      		add r25,r0
 3720 0070 1124      		clr __zero_reg__
 3721 0072 0E94 0000 		call sethsv
 3722               	.LVL280:
 745:quantum/rgblight.c ****   for (i = 0; i < RGBLED_NUM; i++) {
 3723               		.loc 1 745 0 discriminator 3
 3724 0076 1F5F      		subi r17,lo8(-(1))
 3725               	.LVL281:
 3726 0078 F3E0      		ldi r31,3
 3727 007a EF0E      		add r14,r31
 3728 007c F11C      		adc r15,__zero_reg__
 3729 007e 1E30      		cpi r17,lo8(14)
 3730 0080 01F4      		brne .L236
 3731               	/* epilogue start */
 748:quantum/rgblight.c ****   }
 749:quantum/rgblight.c ****   rgblight_set();
 750:quantum/rgblight.c **** }
 3732               		.loc 1 750 0
 3733 0082 DF91      		pop r29
 3734 0084 CF91      		pop r28
 3735               	.LVL282:
 3736 0086 1F91      		pop r17
 3737               	.LVL283:
 3738 0088 0F91      		pop r16
 3739 008a FF90      		pop r15
 3740 008c EF90      		pop r14
 749:quantum/rgblight.c **** }
 3741               		.loc 1 749 0
 3742 008e 0C94 0000 		jmp rgblight_set
 3743               	.LVL284:
 3744               	.L234:
 3745               	/* epilogue start */
 3746               		.loc 1 750 0
 3747 0092 DF91      		pop r29
 3748 0094 CF91      		pop r28
 3749 0096 1F91      		pop r17
 3750 0098 0F91      		pop r16
 3751 009a FF90      		pop r15
 3752 009c EF90      		pop r14
 3753 009e 0895      		ret
 3754               		.cfi_endproc
 3755               	.LFE61:
 3757               		.section	.text.rgblight_effect_rgbtest,"ax",@progbits
 3758               	.global	rgblight_effect_rgbtest
 3760               	rgblight_effect_rgbtest:
 3761               	.LFB62:
 751:quantum/rgblight.c **** 
 752:quantum/rgblight.c **** void rgblight_effect_rgbtest(void) {
 3762               		.loc 1 752 0
 3763               		.cfi_startproc
 3764 0000 CF93      		push r28
 3765               	.LCFI167:
 3766               		.cfi_def_cfa_offset 3
 3767               		.cfi_offset 28, -2
 3768 0002 DF93      		push r29
 3769               	.LCFI168:
 3770               		.cfi_def_cfa_offset 4
 3771               		.cfi_offset 29, -3
 3772 0004 00D0      		rcall .
 3773 0006 1F92      		push __zero_reg__
 3774               	.LCFI169:
 3775               		.cfi_def_cfa_offset 7
 3776 0008 CDB7      		in r28,__SP_L__
 3777 000a DEB7      		in r29,__SP_H__
 3778               	.LCFI170:
 3779               		.cfi_def_cfa_register 28
 3780               	/* prologue: function */
 3781               	/* frame size = 3 */
 3782               	/* stack size = 5 */
 3783               	.L__stack_usage = 5
 753:quantum/rgblight.c ****   static uint8_t pos = 0;
 754:quantum/rgblight.c ****   static uint16_t last_timer = 0;
 755:quantum/rgblight.c ****   static uint8_t maxval = 0;
 756:quantum/rgblight.c ****   uint8_t g; uint8_t r; uint8_t b;
 757:quantum/rgblight.c **** 
 758:quantum/rgblight.c ****   if (timer_elapsed(last_timer) < pgm_read_word(&RGBLED_RGBTEST_INTERVALS[0])) {
 3784               		.loc 1 758 0
 3785 000c 8091 0000 		lds r24,last_timer.2459
 3786 0010 9091 0000 		lds r25,last_timer.2459+1
 3787 0014 0E94 0000 		call timer_elapsed
 3788               	.LVL285:
 3789               	.LBB50:
 3790 0018 E0E0      		ldi r30,lo8(RGBLED_RGBTEST_INTERVALS)
 3791 001a F0E0      		ldi r31,hi8(RGBLED_RGBTEST_INTERVALS)
 3792               	/* #APP */
 3793               	 ;  758 "quantum/rgblight.c" 1
 3794 001c 2591      		lpm r18, Z+
 3795 001e 3491      		lpm r19, Z
 3796               		
 3797               	 ;  0 "" 2
 3798               	.LVL286:
 3799               	/* #NOAPP */
 3800               	.LBE50:
 3801 0020 8217      		cp r24,r18
 3802 0022 9307      		cpc r25,r19
 3803 0024 00F0      		brlo .L238
 759:quantum/rgblight.c ****     return;
 760:quantum/rgblight.c ****   }
 761:quantum/rgblight.c **** 
 762:quantum/rgblight.c ****   if( maxval == 0 ) {
 3804               		.loc 1 762 0
 3805 0026 8091 0000 		lds r24,maxval.2460
 3806 002a 8111      		cpse r24,__zero_reg__
 3807 002c 00C0      		rjmp .L240
 3808               	.LBB51:
 763:quantum/rgblight.c ****       LED_TYPE tmp_led;
 764:quantum/rgblight.c ****       sethsv(0, 255, RGBLIGHT_LIMIT_VAL, &tmp_led);
 3809               		.loc 1 764 0
 3810 002e 9E01      		movw r18,r28
 3811               	.LVL287:
 3812 0030 2F5F      		subi r18,-1
 3813 0032 3F4F      		sbci r19,-1
 3814 0034 4FEF      		ldi r20,lo8(-1)
 3815 0036 6FEF      		ldi r22,lo8(-1)
 3816 0038 80E0      		ldi r24,0
 3817 003a 90E0      		ldi r25,0
 3818 003c 0E94 0000 		call sethsv
 3819               	.LVL288:
 765:quantum/rgblight.c ****       maxval = tmp_led.r;
 3820               		.loc 1 765 0
 3821 0040 8A81      		ldd r24,Y+2
 3822 0042 8093 0000 		sts maxval.2460,r24
 3823               	.L240:
 3824               	.LBE51:
 766:quantum/rgblight.c ****   }
 767:quantum/rgblight.c ****   last_timer = timer_read();
 3825               		.loc 1 767 0
 3826 0046 0E94 0000 		call timer_read
 3827               	.LVL289:
 3828 004a 9093 0000 		sts last_timer.2459+1,r25
 3829 004e 8093 0000 		sts last_timer.2459,r24
 3830               	.LVL290:
 768:quantum/rgblight.c ****   g = r = b = 0;
 769:quantum/rgblight.c ****   switch( pos ) {
 3831               		.loc 1 769 0
 3832 0052 8091 0000 		lds r24,pos.2458
 3833 0056 8130      		cpi r24,lo8(1)
 3834 0058 01F0      		breq .L242
 3835 005a 00F0      		brlo .L243
 3836 005c 8230      		cpi r24,lo8(2)
 3837 005e 01F4      		brne .L249
 770:quantum/rgblight.c ****     case 0: r = maxval; break;
 771:quantum/rgblight.c ****     case 1: g = maxval; break;
 772:quantum/rgblight.c ****     case 2: b = maxval; break;
 3838               		.loc 1 772 0
 3839 0060 4091 0000 		lds r20,maxval.2460
 3840               	.LVL291:
 3841 0064 00C0      		rjmp .L248
 3842               	.LVL292:
 3843               	.L243:
 770:quantum/rgblight.c ****     case 0: r = maxval; break;
 3844               		.loc 1 770 0
 3845 0066 8091 0000 		lds r24,maxval.2460
 3846               	.LVL293:
 768:quantum/rgblight.c ****   g = r = b = 0;
 3847               		.loc 1 768 0
 3848 006a 40E0      		ldi r20,0
 3849 006c 00C0      		rjmp .L247
 3850               	.LVL294:
 3851               	.L242:
 771:quantum/rgblight.c ****     case 2: b = maxval; break;
 3852               		.loc 1 771 0
 3853 006e 6091 0000 		lds r22,maxval.2460
 3854               	.LVL295:
 768:quantum/rgblight.c ****   g = r = b = 0;
 3855               		.loc 1 768 0
 3856 0072 40E0      		ldi r20,0
 3857 0074 80E0      		ldi r24,0
 771:quantum/rgblight.c ****     case 2: b = maxval; break;
 3858               		.loc 1 771 0
 3859 0076 00C0      		rjmp .L241
 3860               	.LVL296:
 3861               	.L249:
 768:quantum/rgblight.c ****   g = r = b = 0;
 3862               		.loc 1 768 0
 3863 0078 40E0      		ldi r20,0
 3864               	.LVL297:
 3865               	.L248:
 3866 007a 80E0      		ldi r24,0
 3867               	.LVL298:
 3868               	.L247:
 3869 007c 60E0      		ldi r22,0
 3870               	.LVL299:
 3871               	.L241:
 773:quantum/rgblight.c ****   }
 774:quantum/rgblight.c ****   rgblight_setrgb(r, g, b);
 3872               		.loc 1 774 0
 3873 007e 0E94 0000 		call rgblight_setrgb
 3874               	.LVL300:
 775:quantum/rgblight.c ****   pos = (pos + 1) % 3;
 3875               		.loc 1 775 0
 3876 0082 8091 0000 		lds r24,pos.2458
 3877 0086 90E0      		ldi r25,0
 3878 0088 0196      		adiw r24,1
 3879 008a 63E0      		ldi r22,lo8(3)
 3880 008c 70E0      		ldi r23,0
 3881 008e 0E94 0000 		call __divmodhi4
 3882 0092 8093 0000 		sts pos.2458,r24
 3883               	.L238:
 3884               	/* epilogue start */
 776:quantum/rgblight.c **** }
 3885               		.loc 1 776 0
 3886 0096 0F90      		pop __tmp_reg__
 3887 0098 0F90      		pop __tmp_reg__
 3888 009a 0F90      		pop __tmp_reg__
 3889 009c DF91      		pop r29
 3890 009e CF91      		pop r28
 3891 00a0 0895      		ret
 3892               		.cfi_endproc
 3893               	.LFE62:
 3895               		.section	.text.rgblight_effect_alternating,"ax",@progbits
 3896               	.global	rgblight_effect_alternating
 3898               	rgblight_effect_alternating:
 3899               	.LFB63:
 777:quantum/rgblight.c **** 
 778:quantum/rgblight.c **** void rgblight_effect_alternating(void){
 3900               		.loc 1 778 0
 3901               		.cfi_startproc
 3902 0000 CF93      		push r28
 3903               	.LCFI171:
 3904               		.cfi_def_cfa_offset 3
 3905               		.cfi_offset 28, -2
 3906 0002 DF93      		push r29
 3907               	.LCFI172:
 3908               		.cfi_def_cfa_offset 4
 3909               		.cfi_offset 29, -3
 3910               	/* prologue: function */
 3911               	/* frame size = 0 */
 3912               	/* stack size = 2 */
 3913               	.L__stack_usage = 2
 779:quantum/rgblight.c ****   static uint16_t last_timer = 0;
 780:quantum/rgblight.c ****   static uint16_t pos = 0;
 781:quantum/rgblight.c ****   if (timer_elapsed(last_timer) < 500) {
 3914               		.loc 1 781 0
 3915 0004 8091 0000 		lds r24,last_timer.2475
 3916 0008 9091 0000 		lds r25,last_timer.2475+1
 3917 000c 0E94 0000 		call timer_elapsed
 3918               	.LVL301:
 3919 0010 843F      		cpi r24,-12
 3920 0012 9140      		sbci r25,1
 3921 0014 00F4      		brsh .+2
 3922 0016 00C0      		rjmp .L250
 782:quantum/rgblight.c ****     return;
 783:quantum/rgblight.c ****   }
 784:quantum/rgblight.c ****   last_timer = timer_read();
 3923               		.loc 1 784 0
 3924 0018 0E94 0000 		call timer_read
 3925               	.LVL302:
 3926 001c 9093 0000 		sts last_timer.2475+1,r25
 3927 0020 8093 0000 		sts last_timer.2475,r24
 3928               	.LVL303:
 3929               	.LBB52:
 785:quantum/rgblight.c **** 
 786:quantum/rgblight.c ****   for(int i = 0; i<RGBLED_NUM; i++){
 3930               		.loc 1 786 0
 3931 0024 C0E0      		ldi r28,0
 3932 0026 D0E0      		ldi r29,0
 3933               	.LVL304:
 3934               	.L255:
 3935 0028 2091 0000 		lds r18,pos.2476
 3936 002c 3091 0000 		lds r19,pos.2476+1
 3937 0030 8091 0000 		lds r24,rgblight_config
 3938 0034 9091 0000 		lds r25,rgblight_config+1
 787:quantum/rgblight.c **** 		  if(i<RGBLED_NUM/2 && pos){
 3939               		.loc 1 787 0
 3940 0038 C730      		cpi r28,7
 3941 003a D105      		cpc r29,__zero_reg__
 3942 003c 04F4      		brge .L252
 3943               		.loc 1 787 0 is_stmt 0 discriminator 1
 3944 003e 232B      		or r18,r19
 3945 0040 01F0      		breq .L253
 3946 0042 00C0      		rjmp .L261
 3947               	.L252:
 788:quantum/rgblight.c **** 			  rgblight_sethsv_at(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, i);
 789:quantum/rgblight.c **** 		  }else if (i>=RGBLED_NUM/2 && !pos){
 3948               		.loc 1 789 0 is_stmt 1 discriminator 1
 3949 0044 232B      		or r18,r19
 3950 0046 01F4      		brne .L253
 3951               	.L261:
 790:quantum/rgblight.c **** 			  rgblight_sethsv_at(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, i);
 3952               		.loc 1 790 0
 3953 0048 881F      		rol r24
 3954 004a 8827      		clr r24
 3955 004c 881F      		rol r24
 3956 004e 392F      		mov r19,r25
 3957 0050 330F      		lsl r19
 3958 0052 97FB      		bst r25,7
 3959 0054 9927      		clr r25
 3960 0056 90F9      		bld r25,0
 3961 0058 2C2F      		mov r18,r28
 3962 005a 4091 0000 		lds r20,rgblight_config+3
 3963 005e 00C0      		rjmp .L260
 3964               	.L253:
 791:quantum/rgblight.c **** 		  }else{
 792:quantum/rgblight.c **** 			  rgblight_sethsv_at(rgblight_config.hue, rgblight_config.sat, 0, i);
 3965               		.loc 1 792 0
 3966 0060 881F      		rol r24
 3967 0062 8827      		clr r24
 3968 0064 881F      		rol r24
 3969 0066 392F      		mov r19,r25
 3970 0068 330F      		lsl r19
 3971 006a 97FB      		bst r25,7
 3972 006c 9927      		clr r25
 3973 006e 90F9      		bld r25,0
 3974 0070 2C2F      		mov r18,r28
 3975 0072 40E0      		ldi r20,0
 3976               	.L260:
 3977 0074 6091 0000 		lds r22,rgblight_config+2
 3978 0078 832B      		or r24,r19
 3979 007a 0E94 0000 		call rgblight_sethsv_at
 3980               	.LVL305:
 786:quantum/rgblight.c **** 		  if(i<RGBLED_NUM/2 && pos){
 3981               		.loc 1 786 0
 3982 007e 2196      		adiw r28,1
 3983               	.LVL306:
 3984 0080 CE30      		cpi r28,14
 3985 0082 D105      		cpc r29,__zero_reg__
 3986 0084 01F4      		brne .L255
 3987               	.LBE52:
 793:quantum/rgblight.c **** 		  }
 794:quantum/rgblight.c ****   }
 795:quantum/rgblight.c ****   rgblight_set();
 3988               		.loc 1 795 0
 3989 0086 0E94 0000 		call rgblight_set
 3990               	.LVL307:
 796:quantum/rgblight.c ****   pos = (pos + 1) % 2;
 3991               		.loc 1 796 0
 3992 008a 8091 0000 		lds r24,pos.2476
 3993 008e 9091 0000 		lds r25,pos.2476+1
 3994 0092 0196      		adiw r24,1
 3995 0094 8170      		andi r24,1
 3996 0096 9927      		clr r25
 3997 0098 9093 0000 		sts pos.2476+1,r25
 3998 009c 8093 0000 		sts pos.2476,r24
 3999               	.LVL308:
 4000               	.L250:
 4001               	/* epilogue start */
 797:quantum/rgblight.c **** }
 4002               		.loc 1 797 0
 4003 00a0 DF91      		pop r29
 4004 00a2 CF91      		pop r28
 4005 00a4 0895      		ret
 4006               		.cfi_endproc
 4007               	.LFE63:
 4009               		.section	.text.rgblight_task,"ax",@progbits
 4010               	.global	rgblight_task
 4012               	rgblight_task:
 4013               	.LFB55:
 571:quantum/rgblight.c ****   if (rgblight_timer_enabled) {
 4014               		.loc 1 571 0
 4015               		.cfi_startproc
 4016               	/* prologue: function */
 4017               	/* frame size = 0 */
 4018               	/* stack size = 0 */
 4019               	.L__stack_usage = 0
 572:quantum/rgblight.c ****     // mode = 1, static light, do nothing here
 4020               		.loc 1 572 0
 4021 0000 8091 0000 		lds r24,rgblight_timer_enabled
 4022 0004 8823      		tst r24
 4023 0006 01F0      		breq .L262
 574:quantum/rgblight.c ****       // mode = 2 to 5, breathing mode
 4024               		.loc 1 574 0
 4025 0008 9091 0000 		lds r25,rgblight_config
 4026 000c 892F      		mov r24,r25
 4027 000e 8695      		lsr r24
 4028 0010 8F73      		andi r24,lo8(63)
 4029 0012 2EE3      		ldi r18,lo8(62)
 4030 0014 280F      		add r18,r24
 4031 0016 2F73      		andi r18,lo8(63)
 4032 0018 2430      		cpi r18,lo8(4)
 4033 001a 00F4      		brsh .L264
 576:quantum/rgblight.c ****     } else if (rgblight_config.mode >= 6 && rgblight_config.mode <= 8) {
 4034               		.loc 1 576 0
 4035 001c 8250      		subi r24,lo8(-(-2))
 4036 001e 0C94 0000 		jmp rgblight_effect_breathing
 4037               	.LVL309:
 4038               	.L264:
 577:quantum/rgblight.c ****       // mode = 6 to 8, rainbow mood mod
 4039               		.loc 1 577 0
 4040 0022 2AE3      		ldi r18,lo8(58)
 4041 0024 280F      		add r18,r24
 4042 0026 2F73      		andi r18,lo8(63)
 4043 0028 2330      		cpi r18,lo8(3)
 4044 002a 00F4      		brsh .L265
 579:quantum/rgblight.c ****     } else if (rgblight_config.mode >= 9 && rgblight_config.mode <= 14) {
 4045               		.loc 1 579 0
 4046 002c 8650      		subi r24,lo8(-(-6))
 4047 002e 0C94 0000 		jmp rgblight_effect_rainbow_mood
 4048               	.LVL310:
 4049               	.L265:
 580:quantum/rgblight.c ****       // mode = 9 to 14, rainbow swirl mode
 4050               		.loc 1 580 0
 4051 0032 27E3      		ldi r18,lo8(55)
 4052 0034 280F      		add r18,r24
 4053 0036 2F73      		andi r18,lo8(63)
 4054 0038 2630      		cpi r18,lo8(6)
 4055 003a 00F4      		brsh .L266
 582:quantum/rgblight.c ****     } else if (rgblight_config.mode >= 15 && rgblight_config.mode <= 20) {
 4056               		.loc 1 582 0
 4057 003c 8950      		subi r24,lo8(-(-9))
 4058 003e 0C94 0000 		jmp rgblight_effect_rainbow_swirl
 4059               	.LVL311:
 4060               	.L266:
 583:quantum/rgblight.c ****       // mode = 15 to 20, snake mode
 4061               		.loc 1 583 0
 4062 0042 21E3      		ldi r18,lo8(49)
 4063 0044 280F      		add r18,r24
 4064 0046 2F73      		andi r18,lo8(63)
 4065 0048 2630      		cpi r18,lo8(6)
 4066 004a 00F4      		brsh .L267
 585:quantum/rgblight.c ****     } else if (rgblight_config.mode >= 21 && rgblight_config.mode <= 23) {
 4067               		.loc 1 585 0
 4068 004c 8F50      		subi r24,lo8(-(-15))
 4069 004e 0C94 0000 		jmp rgblight_effect_snake
 4070               	.LVL312:
 4071               	.L267:
 586:quantum/rgblight.c ****       // mode = 21 to 23, knight mode
 4072               		.loc 1 586 0
 4073 0052 2BE2      		ldi r18,lo8(43)
 4074 0054 280F      		add r18,r24
 4075 0056 2F73      		andi r18,lo8(63)
 4076 0058 2330      		cpi r18,lo8(3)
 4077 005a 00F4      		brsh .L268
 588:quantum/rgblight.c ****     } else if (rgblight_config.mode == 24) {
 4078               		.loc 1 588 0
 4079 005c 8551      		subi r24,lo8(-(-21))
 4080 005e 0C94 0000 		jmp rgblight_effect_knight
 4081               	.LVL313:
 4082               	.L268:
 589:quantum/rgblight.c ****       // mode = 24, christmas mode
 4083               		.loc 1 589 0
 4084 0062 892F      		mov r24,r25
 4085 0064 8E77      		andi r24,lo8(126)
 4086 0066 8033      		cpi r24,lo8(48)
 4087 0068 01F4      		brne .L269
 591:quantum/rgblight.c ****     } else if (rgblight_config.mode == 35) {
 4088               		.loc 1 591 0
 4089 006a 0C94 0000 		jmp rgblight_effect_christmas
 4090               	.LVL314:
 4091               	.L269:
 592:quantum/rgblight.c ****       // mode = 35, RGB test
 4092               		.loc 1 592 0
 4093 006e 8634      		cpi r24,lo8(70)
 4094 0070 01F4      		brne .L270
 594:quantum/rgblight.c ****     } else if (rgblight_config.mode == 36){
 4095               		.loc 1 594 0
 4096 0072 0C94 0000 		jmp rgblight_effect_rgbtest
 4097               	.LVL315:
 4098               	.L270:
 595:quantum/rgblight.c ****       rgblight_effect_alternating();
 4099               		.loc 1 595 0
 4100 0076 8834      		cpi r24,lo8(72)
 4101 0078 01F4      		brne .L262
 596:quantum/rgblight.c ****     }
 4102               		.loc 1 596 0
 4103 007a 0C94 0000 		jmp rgblight_effect_alternating
 4104               	.LVL316:
 4105               	.L262:
 4106 007e 0895      		ret
 4107               		.cfi_endproc
 4108               	.LFE55:
 4110               		.section	.bss.pos.2476,"aw",@nobits
 4113               	pos.2476:
 4114 0000 0000      		.zero	2
 4115               		.section	.bss.last_timer.2475,"aw",@nobits
 4118               	last_timer.2475:
 4119 0000 0000      		.zero	2
 4120               		.section	.bss.pos.2458,"aw",@nobits
 4123               	pos.2458:
 4124 0000 00        		.zero	1
 4125               		.section	.bss.maxval.2460,"aw",@nobits
 4128               	maxval.2460:
 4129 0000 00        		.zero	1
 4130               		.section	.bss.last_timer.2459,"aw",@nobits
 4133               	last_timer.2459:
 4134 0000 0000      		.zero	2
 4135               		.section	.bss.current_offset.2448,"aw",@nobits
 4138               	current_offset.2448:
 4139 0000 0000      		.zero	2
 4140               		.section	.bss.last_timer.2449,"aw",@nobits
 4143               	last_timer.2449:
 4144 0000 0000      		.zero	2
 4145               		.section	.data.increment.2436,"aw",@progbits
 4148               	increment.2436:
 4149 0000 01        		.byte	1
 4150               		.section	.data.high_bound.2435,"aw",@progbits
 4153               	high_bound.2435:
 4154 0000 02        		.byte	2
 4155               		.section	.bss.low_bound.2434,"aw",@nobits
 4158               	low_bound.2434:
 4159 0000 00        		.zero	1
 4160               		.section	.bss.last_timer.2430,"aw",@nobits
 4163               	last_timer.2430:
 4164 0000 0000      		.zero	2
 4165               		.section	.bss.pos.2412,"aw",@nobits
 4168               	pos.2412:
 4169 0000 00        		.zero	1
 4170               		.section	.bss.last_timer.2413,"aw",@nobits
 4173               	last_timer.2413:
 4174 0000 0000      		.zero	2
 4175               		.section	.bss.current_hue.2399,"aw",@nobits
 4178               	current_hue.2399:
 4179 0000 0000      		.zero	2
 4180               		.section	.bss.last_timer.2400,"aw",@nobits
 4183               	last_timer.2400:
 4184 0000 0000      		.zero	2
 4185               		.section	.bss.current_hue.2391,"aw",@nobits
 4188               	current_hue.2391:
 4189 0000 0000      		.zero	2
 4190               		.section	.bss.last_timer.2392,"aw",@nobits
 4193               	last_timer.2392:
 4194 0000 0000      		.zero	2
 4195               		.section	.bss.pos.2382,"aw",@nobits
 4198               	pos.2382:
 4199 0000 00        		.zero	1
 4200               		.section	.bss.last_timer.2383,"aw",@nobits
 4203               	last_timer.2383:
 4204 0000 0000      		.zero	2
 4205               		.section	.progmem.data.__c.2369,"a",@progbits
 4208               	__c.2369:
 4209 0000 5449 4D45 		.string	"TIMER3 toggled.\n"
 4209      5233 2074 
 4209      6F67 676C 
 4209      6564 2E0A 
 4209      00
 4210               		.section	.progmem.data.__c.2364,"a",@progbits
 4213               	__c.2364:
 4214 0000 5449 4D45 		.string	"TIMER3 disabled.\n"
 4214      5233 2064 
 4214      6973 6162 
 4214      6C65 642E 
 4214      0A00 
 4215               		.section	.progmem.data.__c.2359,"a",@progbits
 4218               	__c.2359:
 4219 0000 5449 4D45 		.string	"TIMER3 enabled.\n"
 4219      5233 2065 
 4219      6E61 626C 
 4219      6564 2E0A 
 4219      00
 4220               		.section	.progmem.data.__c.2303,"a",@progbits
 4223               	__c.2303:
 4224 0000 7267 626C 		.string	"rgblight set hsv [NOEEPROM]: %u,%u,%u\n"
 4224      6967 6874 
 4224      2073 6574 
 4224      2068 7376 
 4224      205B 4E4F 
 4225               		.section	.progmem.data.__c.2301,"a",@progbits
 4228               	__c.2301:
 4229 0000 7267 626C 		.string	"rgblight set hsv [EEPROM]: %u,%u,%u\n"
 4229      6967 6874 
 4229      2073 6574 
 4229      2068 7376 
 4229      205B 4545 
 4230               		.section	.progmem.data.__c.2296,"a",@progbits
 4233               	__c.2296:
 4234 0000 7267 626C 		.string	"rgblight rainbow set hsv: %u,%u,%d,%u\n"
 4234      6967 6874 
 4234      2072 6169 
 4234      6E62 6F77 
 4234      2073 6574 
 4235               		.section	.progmem.data.__c.2230,"a",@progbits
 4238               	__c.2230:
 4239 0000 7267 626C 		.string	"rgblight disable [noEEPROM]: rgblight_config.enable = %u\n"
 4239      6967 6874 
 4239      2064 6973 
 4239      6162 6C65 
 4239      205B 6E6F 
 4240               		.section	.progmem.data.__c.2225,"a",@progbits
 4243               	__c.2225:
 4244 0000 7267 626C 		.string	"rgblight disable [EEPROM]: rgblight_config.enable = %u\n"
 4244      6967 6874 
 4244      2064 6973 
 4244      6162 6C65 
 4244      205B 4545 
 4245               		.section	.progmem.data.__c.2220,"a",@progbits
 4248               	__c.2220:
 4249 0000 7267 626C 		.string	"rgblight enable [NOEEPROM]: rgblight_config.enable = %u\n"
 4249      6967 6874 
 4249      2065 6E61 
 4249      626C 6520 
 4249      5B4E 4F45 
 4250               		.section	.progmem.data.__c.2215,"a",@progbits
 4253               	__c.2215:
 4254 0000 7267 626C 		.string	"rgblight enable [EEPROM]: rgblight_config.enable = %u\n"
 4254      6967 6874 
 4254      2065 6E61 
 4254      626C 6520 
 4254      5B45 4550 
 4255               		.section	.progmem.data.__c.2210,"a",@progbits
 4258               	__c.2210:
 4259 0000 7267 626C 		.string	"rgblight toggle [NOEEPROM]: rgblight_config.enable = %u\n"
 4259      6967 6874 
 4259      2074 6F67 
 4259      676C 6520 
 4259      5B4E 4F45 
 4260               		.section	.progmem.data.__c.2205,"a",@progbits
 4263               	__c.2205:
 4264 0000 7267 626C 		.string	"rgblight toggle [EEPROM]: rgblight_config.enable = %u\n"
 4264      6967 6874 
 4264      2074 6F67 
 4264      676C 6520 
 4264      5B45 4550 
 4265               		.section	.progmem.data.__c.2194,"a",@progbits
 4268               	__c.2194:
 4269 0000 7267 626C 		.string	"rgblight mode [NOEEPROM]: %u\n"
 4269      6967 6874 
 4269      206D 6F64 
 4269      6520 5B4E 
 4269      4F45 4550 
 4270               		.section	.progmem.data.__c.2192,"a",@progbits
 4273               	__c.2192:
 4274 0000 7267 626C 		.string	"rgblight mode [EEPROM]: %u\n"
 4274      6967 6874 
 4274      206D 6F64 
 4274      6520 5B45 
 4274      4550 524F 
 4275               		.section	.progmem.data.__c.2164,"a",@progbits
 4278               	__c.2164:
 4279 0000 7267 626C 		.string	"rgblight_init rgblight_config.mode = 0. Write default values to EEPROM.\n"
 4279      6967 6874 
 4279      5F69 6E69 
 4279      7420 7267 
 4279      626C 6967 
 4280               		.section	.progmem.data.__c.2162,"a",@progbits
 4283               	__c.2162:
 4284 0000 7267 626C 		.string	"rgblight_init eeconfig is not enabled.\n"
 4284      6967 6874 
 4284      5F69 6E69 
 4284      7420 6565 
 4284      636F 6E66 
 4285               		.section	.progmem.data.__c.2160,"a",@progbits
 4288               	__c.2160:
 4289 0000 7267 626C 		.string	"rgblight_init start!\n"
 4289      6967 6874 
 4289      5F69 6E69 
 4289      7420 7374 
 4289      6172 7421 
 4290               		.section	.progmem.data.__c.2158,"a",@progbits
 4293               	__c.2158:
 4294 0000 7267 626C 		.string	"rgblight_init called.\n"
 4294      6967 6874 
 4294      5F69 6E69 
 4294      7420 6361 
 4294      6C6C 6564 
 4295               		.section	.progmem.data.__c.2153,"a",@progbits
 4298               	__c.2153:
 4299 0000 7267 626C 		.string	"rgblight_config.speed = %d\n"
 4299      6967 6874 
 4299      5F63 6F6E 
 4299      6669 672E 
 4299      7370 6565 
 4300               		.section	.progmem.data.__c.2151,"a",@progbits
 4303               	__c.2151:
 4304 0000 7267 626C 		.string	"rgblight_config.val = %d\n"
 4304      6967 6874 
 4304      5F63 6F6E 
 4304      6669 672E 
 4304      7661 6C20 
 4305               		.section	.progmem.data.__c.2149,"a",@progbits
 4308               	__c.2149:
 4309 0000 7267 626C 		.string	"rgblight_config.sat = %d\n"
 4309      6967 6874 
 4309      5F63 6F6E 
 4309      6669 672E 
 4309      7361 7420 
 4310               		.section	.progmem.data.__c.2147,"a",@progbits
 4313               	__c.2147:
 4314 0000 7267 626C 		.string	"rgblight_config.hue = %d\n"
 4314      6967 6874 
 4314      5F63 6F6E 
 4314      6669 672E 
 4314      6875 6520 
 4315               		.section	.progmem.data.__c.2145,"a",@progbits
 4318               	__c.2145:
 4319 0000 7267 686C 		.string	"rghlight_config.mode = %d\n"
 4319      6967 6874 
 4319      5F63 6F6E 
 4319      6669 672E 
 4319      6D6F 6465 
 4320               		.section	.progmem.data.__c.2143,"a",@progbits
 4323               	__c.2143:
 4324 0000 7267 626C 		.string	"rgblight_config.enable = %d\n"
 4324      6967 6874 
 4324      5F63 6F6E 
 4324      6669 672E 
 4324      656E 6162 
 4325               		.section	.progmem.data.__c.2141,"a",@progbits
 4328               	__c.2141:
 4329 0000 7267 626C 		.string	"rgblight_config eprom\n"
 4329      6967 6874 
 4329      5F63 6F6E 
 4329      6669 6720 
 4329      6570 726F 
 4330               	.global	rgblight_timer_enabled
 4331               		.section	.bss.rgblight_timer_enabled,"aw",@nobits
 4334               	rgblight_timer_enabled:
 4335 0000 00        		.zero	1
 4336               		.comm	led,42,1
 4337               		.comm	rgblight_config,5,1
 4338               		.weak	RGBLED_RGBTEST_INTERVALS
 4339               		.section	.progmem.data.RGBLED_RGBTEST_INTERVALS,"a",@progbits
 4342               	RGBLED_RGBTEST_INTERVALS:
 4343 0000 0004      		.word	1024
 4344               		.weak	RGBLED_GRADIENT_RANGES
 4345               		.section	.progmem.data.RGBLED_GRADIENT_RANGES,"a",@progbits
 4348               	RGBLED_GRADIENT_RANGES:
 4349 0000 6801      		.word	360
 4350 0002 F000      		.word	240
 4351 0004 B400      		.word	180
 4352 0006 7800      		.word	120
 4353 0008 5A00      		.word	90
 4354               		.weak	RGBLED_KNIGHT_INTERVALS
 4355               		.section	.progmem.data.RGBLED_KNIGHT_INTERVALS,"a",@progbits
 4358               	RGBLED_KNIGHT_INTERVALS:
 4359 0000 7F        		.byte	127
 4360 0001 3F        		.byte	63
 4361 0002 1F        		.byte	31
 4362               		.weak	RGBLED_SNAKE_INTERVALS
 4363               		.section	.progmem.data.RGBLED_SNAKE_INTERVALS,"a",@progbits
 4366               	RGBLED_SNAKE_INTERVALS:
 4367 0000 64        		.byte	100
 4368 0001 32        		.byte	50
 4369 0002 14        		.byte	20
 4370               		.weak	RGBLED_RAINBOW_SWIRL_INTERVALS
 4371               		.section	.progmem.data.RGBLED_RAINBOW_SWIRL_INTERVALS,"a",@progbits
 4374               	RGBLED_RAINBOW_SWIRL_INTERVALS:
 4375 0000 64        		.byte	100
 4376 0001 32        		.byte	50
 4377 0002 14        		.byte	20
 4378               		.weak	RGBLED_RAINBOW_MOOD_INTERVALS
 4379               		.section	.progmem.data.RGBLED_RAINBOW_MOOD_INTERVALS,"a",@progbits
 4382               	RGBLED_RAINBOW_MOOD_INTERVALS:
 4383 0000 78        		.byte	120
 4384 0001 3C        		.byte	60
 4385 0002 1E        		.byte	30
 4386               		.weak	RGBLED_BREATHING_INTERVALS
 4387               		.section	.progmem.data.RGBLED_BREATHING_INTERVALS,"a",@progbits
 4390               	RGBLED_BREATHING_INTERVALS:
 4391 0000 1E        		.byte	30
 4392 0001 14        		.byte	20
 4393 0002 0A        		.byte	10
 4394 0003 05        		.byte	5
 4395               		.text
 4396               	.Letext0:
 4397               		.file 3 "c:\\msys64\\home\\cris almanza\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdint.h"
 4398               		.file 4 "quantum/rgblight_types.h"
 4399               		.file 5 "quantum/rgblight.h"
 4400               		.file 6 "tmk_core/common/debug.h"
 4401               		.file 7 "quantum/led_tables.h"
 4402               		.file 8 "c:\\msys64\\home\\cris almanza\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\avr\\eeprom.
 4403               		.file 9 "tmk_core/common/avr/xprintf.h"
 4404               		.file 10 "drivers/avr/ws2812.h"
 4405               		.file 11 "tmk_core/common/eeconfig.h"
 4406               		.file 12 "tmk_core/common/timer.h"
 4407               		.file 13 "c:\\msys64\\home\\cris almanza\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 rgblight.c
C:\msys64\tmp\ccASPlU8.s:2      *ABS*:0000003e __SP_H__
C:\msys64\tmp\ccASPlU8.s:3      *ABS*:0000003d __SP_L__
C:\msys64\tmp\ccASPlU8.s:4      *ABS*:0000003f __SREG__
C:\msys64\tmp\ccASPlU8.s:5      *ABS*:00000000 __tmp_reg__
C:\msys64\tmp\ccASPlU8.s:6      *ABS*:00000001 __zero_reg__
C:\msys64\tmp\ccASPlU8.s:13     .text.sethsv:00000000 sethsv
C:\msys64\tmp\ccASPlU8.s:262    .text.setrgb:00000000 setrgb
C:\msys64\tmp\ccASPlU8.s:285    .text.eeconfig_read_rgblight:00000000 eeconfig_read_rgblight
C:\msys64\tmp\ccASPlU8.s:304    .text.eeconfig_update_rgblight:00000000 eeconfig_update_rgblight
C:\msys64\tmp\ccASPlU8.s:326    .text.eeconfig_update_rgblight_default:00000000 eeconfig_update_rgblight_default
                            *COM*:00000005 rgblight_config
C:\msys64\tmp\ccASPlU8.s:361    .text.eeconfig_debug_rgblight:00000000 eeconfig_debug_rgblight
C:\msys64\tmp\ccASPlU8.s:4328   .progmem.data.__c.2141:00000000 __c.2141
C:\msys64\tmp\ccASPlU8.s:4323   .progmem.data.__c.2143:00000000 __c.2143
C:\msys64\tmp\ccASPlU8.s:4318   .progmem.data.__c.2145:00000000 __c.2145
C:\msys64\tmp\ccASPlU8.s:4313   .progmem.data.__c.2147:00000000 __c.2147
C:\msys64\tmp\ccASPlU8.s:4308   .progmem.data.__c.2149:00000000 __c.2149
C:\msys64\tmp\ccASPlU8.s:4303   .progmem.data.__c.2151:00000000 __c.2151
C:\msys64\tmp\ccASPlU8.s:4298   .progmem.data.__c.2153:00000000 __c.2153
C:\msys64\tmp\ccASPlU8.s:583    .text.rgblight_get_mode:00000000 rgblight_get_mode
C:\msys64\tmp\ccASPlU8.s:615    .text.increment:00000000 increment
C:\msys64\tmp\ccASPlU8.s:652    .text.decrement:00000000 decrement
C:\msys64\tmp\ccASPlU8.s:689    .text.rgblight_increase_speed:00000000 rgblight_increase_speed
C:\msys64\tmp\ccASPlU8.s:731    .text.rgblight_decrease_speed:00000000 rgblight_decrease_speed
C:\msys64\tmp\ccASPlU8.s:779    .text.rgblight_get_hue:00000000 rgblight_get_hue
C:\msys64\tmp\ccASPlU8.s:807    .text.rgblight_get_sat:00000000 rgblight_get_sat
C:\msys64\tmp\ccASPlU8.s:824    .text.rgblight_get_val:00000000 rgblight_get_val
C:\msys64\tmp\ccASPlU8.s:841    .text.rgblight_set:00000000 rgblight_set
                            *COM*:0000002a led
C:\msys64\tmp\ccASPlU8.s:889    .text.rgblight_setrgb:00000000 rgblight_setrgb
C:\msys64\tmp\ccASPlU8.s:934    .text.rgblight_sethsv_noeeprom_old:00000000 rgblight_sethsv_noeeprom_old
C:\msys64\tmp\ccASPlU8.s:992    .text.rgblight_sethsv_eeprom_helper:00000000 rgblight_sethsv_eeprom_helper
C:\msys64\tmp\ccASPlU8.s:4348   .progmem.data.RGBLED_GRADIENT_RANGES:00000000 RGBLED_GRADIENT_RANGES
C:\msys64\tmp\ccASPlU8.s:4233   .progmem.data.__c.2296:00000000 __c.2296
C:\msys64\tmp\ccASPlU8.s:4228   .progmem.data.__c.2301:00000000 __c.2301
C:\msys64\tmp\ccASPlU8.s:4223   .progmem.data.__c.2303:00000000 __c.2303
C:\msys64\tmp\ccASPlU8.s:1395   .text.rgblight_sethsv:00000000 rgblight_sethsv
C:\msys64\tmp\ccASPlU8.s:1414   .text.rgblight_increase_hue:00000000 rgblight_increase_hue
C:\msys64\tmp\ccASPlU8.s:1455   .text.rgblight_decrease_hue:00000000 rgblight_decrease_hue
C:\msys64\tmp\ccASPlU8.s:1502   .text.rgblight_increase_sat:00000000 rgblight_increase_sat
C:\msys64\tmp\ccASPlU8.s:1548   .text.rgblight_decrease_sat:00000000 rgblight_decrease_sat
C:\msys64\tmp\ccASPlU8.s:1593   .text.rgblight_increase_val:00000000 rgblight_increase_val
C:\msys64\tmp\ccASPlU8.s:1639   .text.rgblight_decrease_val:00000000 rgblight_decrease_val
C:\msys64\tmp\ccASPlU8.s:1684   .text.rgblight_sethsv_noeeprom:00000000 rgblight_sethsv_noeeprom
C:\msys64\tmp\ccASPlU8.s:1703   .text.rgblight_setrgb_at:00000000 rgblight_setrgb_at
C:\msys64\tmp\ccASPlU8.s:1746   .text.rgblight_sethsv_at:00000000 rgblight_sethsv_at
C:\msys64\tmp\ccASPlU8.s:1810   .text.rgblight_timer_init:00000000 rgblight_timer_init
C:\msys64\tmp\ccASPlU8.s:4334   .bss.rgblight_timer_enabled:00000000 rgblight_timer_enabled
C:\msys64\tmp\ccASPlU8.s:1828   .text.rgblight_timer_enable:00000000 rgblight_timer_enable
C:\msys64\tmp\ccASPlU8.s:4218   .progmem.data.__c.2359:00000000 __c.2359
C:\msys64\tmp\ccASPlU8.s:1866   .text.rgblight_timer_disable:00000000 rgblight_timer_disable
C:\msys64\tmp\ccASPlU8.s:4213   .progmem.data.__c.2364:00000000 __c.2364
C:\msys64\tmp\ccASPlU8.s:1903   .text.rgblight_mode_eeprom_helper:00000000 rgblight_mode_eeprom_helper
C:\msys64\tmp\ccASPlU8.s:4273   .progmem.data.__c.2192:00000000 __c.2192
C:\msys64\tmp\ccASPlU8.s:4268   .progmem.data.__c.2194:00000000 __c.2194
C:\msys64\tmp\ccASPlU8.s:2057   .text.rgblight_mode:00000000 rgblight_mode
C:\msys64\tmp\ccASPlU8.s:2076   .text.rgblight_increase:00000000 rgblight_increase
C:\msys64\tmp\ccASPlU8.s:2113   .text.rgblight_decrease:00000000 rgblight_decrease
C:\msys64\tmp\ccASPlU8.s:2150   .text.rgblight_step:00000000 rgblight_step
C:\msys64\tmp\ccASPlU8.s:2181   .text.rgblight_step_reverse:00000000 rgblight_step_reverse
C:\msys64\tmp\ccASPlU8.s:2211   .text.rgblight_enable:00000000 rgblight_enable
C:\msys64\tmp\ccASPlU8.s:4253   .progmem.data.__c.2215:00000000 __c.2215
C:\msys64\tmp\ccASPlU8.s:2274   .text.rgblight_mode_noeeprom:00000000 rgblight_mode_noeeprom
C:\msys64\tmp\ccASPlU8.s:2293   .text.rgblight_init:00000000 rgblight_init
C:\msys64\tmp\ccASPlU8.s:4293   .progmem.data.__c.2158:00000000 __c.2158
C:\msys64\tmp\ccASPlU8.s:4288   .progmem.data.__c.2160:00000000 __c.2160
C:\msys64\tmp\ccASPlU8.s:4283   .progmem.data.__c.2162:00000000 __c.2162
C:\msys64\tmp\ccASPlU8.s:4278   .progmem.data.__c.2164:00000000 __c.2164
C:\msys64\tmp\ccASPlU8.s:2440   .text.rgblight_enable_noeeprom:00000000 rgblight_enable_noeeprom
C:\msys64\tmp\ccASPlU8.s:4248   .progmem.data.__c.2220:00000000 __c.2220
C:\msys64\tmp\ccASPlU8.s:2503   .text.rgblight_update_dword:00000000 rgblight_update_dword
C:\msys64\tmp\ccASPlU8.s:2542   .text.rgblight_disable:00000000 rgblight_disable
C:\msys64\tmp\ccASPlU8.s:4243   .progmem.data.__c.2225:00000000 __c.2225
C:\msys64\tmp\ccASPlU8.s:2628   .text.rgblight_toggle:00000000 rgblight_toggle
C:\msys64\tmp\ccASPlU8.s:4263   .progmem.data.__c.2205:00000000 __c.2205
C:\msys64\tmp\ccASPlU8.s:2678   .text.rgblight_disable_noeeprom:00000000 rgblight_disable_noeeprom
C:\msys64\tmp\ccASPlU8.s:4238   .progmem.data.__c.2230:00000000 __c.2230
C:\msys64\tmp\ccASPlU8.s:2741   .text.rgblight_toggle_noeeprom:00000000 rgblight_toggle_noeeprom
C:\msys64\tmp\ccASPlU8.s:4258   .progmem.data.__c.2210:00000000 __c.2210
C:\msys64\tmp\ccASPlU8.s:2791   .text.rgblight_timer_toggle:00000000 rgblight_timer_toggle
C:\msys64\tmp\ccASPlU8.s:4208   .progmem.data.__c.2369:00000000 __c.2369
C:\msys64\tmp\ccASPlU8.s:2828   .text.rgblight_show_solid_color:00000000 rgblight_show_solid_color
C:\msys64\tmp\ccASPlU8.s:2892   .text.rgblight_effect_breathing:00000000 rgblight_effect_breathing
C:\msys64\tmp\ccASPlU8.s:4203   .bss.last_timer.2383:00000000 last_timer.2383
C:\msys64\tmp\ccASPlU8.s:4390   .progmem.data.RGBLED_BREATHING_INTERVALS:00000000 RGBLED_BREATHING_INTERVALS
C:\msys64\tmp\ccASPlU8.s:4198   .bss.pos.2382:00000000 pos.2382
C:\msys64\tmp\ccASPlU8.s:3005   .text.rgblight_effect_rainbow_mood:00000000 rgblight_effect_rainbow_mood
C:\msys64\tmp\ccASPlU8.s:4193   .bss.last_timer.2392:00000000 last_timer.2392
C:\msys64\tmp\ccASPlU8.s:4382   .progmem.data.RGBLED_RAINBOW_MOOD_INTERVALS:00000000 RGBLED_RAINBOW_MOOD_INTERVALS
C:\msys64\tmp\ccASPlU8.s:4188   .bss.current_hue.2391:00000000 current_hue.2391
C:\msys64\tmp\ccASPlU8.s:3075   .text.rgblight_effect_rainbow_swirl:00000000 rgblight_effect_rainbow_swirl
C:\msys64\tmp\ccASPlU8.s:4183   .bss.last_timer.2400:00000000 last_timer.2400
C:\msys64\tmp\ccASPlU8.s:4374   .progmem.data.RGBLED_RAINBOW_SWIRL_INTERVALS:00000000 RGBLED_RAINBOW_SWIRL_INTERVALS
C:\msys64\tmp\ccASPlU8.s:4178   .bss.current_hue.2399:00000000 current_hue.2399
C:\msys64\tmp\ccASPlU8.s:3216   .text.rgblight_effect_snake:00000000 rgblight_effect_snake
C:\msys64\tmp\ccASPlU8.s:4173   .bss.last_timer.2413:00000000 last_timer.2413
C:\msys64\tmp\ccASPlU8.s:4366   .progmem.data.RGBLED_SNAKE_INTERVALS:00000000 RGBLED_SNAKE_INTERVALS
C:\msys64\tmp\ccASPlU8.s:4168   .bss.pos.2412:00000000 pos.2412
C:\msys64\tmp\ccASPlU8.s:3451   .text.rgblight_effect_knight:00000000 rgblight_effect_knight
C:\msys64\tmp\ccASPlU8.s:4163   .bss.last_timer.2430:00000000 last_timer.2430
C:\msys64\tmp\ccASPlU8.s:4358   .progmem.data.RGBLED_KNIGHT_INTERVALS:00000000 RGBLED_KNIGHT_INTERVALS
C:\msys64\tmp\ccASPlU8.s:4158   .bss.low_bound.2434:00000000 low_bound.2434
C:\msys64\tmp\ccASPlU8.s:4153   .data.high_bound.2435:00000000 high_bound.2435
C:\msys64\tmp\ccASPlU8.s:4148   .data.increment.2436:00000000 increment.2436
C:\msys64\tmp\ccASPlU8.s:3636   .text.rgblight_effect_christmas:00000000 rgblight_effect_christmas
C:\msys64\tmp\ccASPlU8.s:4143   .bss.last_timer.2449:00000000 last_timer.2449
C:\msys64\tmp\ccASPlU8.s:4138   .bss.current_offset.2448:00000000 current_offset.2448
C:\msys64\tmp\ccASPlU8.s:3760   .text.rgblight_effect_rgbtest:00000000 rgblight_effect_rgbtest
C:\msys64\tmp\ccASPlU8.s:4133   .bss.last_timer.2459:00000000 last_timer.2459
C:\msys64\tmp\ccASPlU8.s:4342   .progmem.data.RGBLED_RGBTEST_INTERVALS:00000000 RGBLED_RGBTEST_INTERVALS
C:\msys64\tmp\ccASPlU8.s:4128   .bss.maxval.2460:00000000 maxval.2460
C:\msys64\tmp\ccASPlU8.s:4123   .bss.pos.2458:00000000 pos.2458
C:\msys64\tmp\ccASPlU8.s:3898   .text.rgblight_effect_alternating:00000000 rgblight_effect_alternating
C:\msys64\tmp\ccASPlU8.s:4118   .bss.last_timer.2475:00000000 last_timer.2475
C:\msys64\tmp\ccASPlU8.s:4113   .bss.pos.2476:00000000 pos.2476
C:\msys64\tmp\ccASPlU8.s:4012   .text.rgblight_task:00000000 rgblight_task

UNDEFINED SYMBOLS
__udivmodhi4
CIE1931_CURVE
eeprom_read_dword
eeprom_update_dword
debug_config
__xprintf
ws2812_setleds
__divmodhi4
eeconfig_is_enabled
eeconfig_init
__floatsisf
__divsf3
__mulsf3
__subsf3
__fixunssfsi
timer_elapsed
timer_read
sin
exp
__do_copy_data
__do_clear_bss
