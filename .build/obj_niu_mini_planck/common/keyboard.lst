   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_setup,"ax",@progbits
  11               		.weak	matrix_setup
  13               	matrix_setup:
  14               	.LFB4:
  15               		.file 1 "tmk_core/common/keyboard.c"
   1:tmk_core/common/keyboard.c **** /*
   2:tmk_core/common/keyboard.c **** Copyright 2011, 2012, 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/keyboard.c **** 
   4:tmk_core/common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/keyboard.c **** (at your option) any later version.
   8:tmk_core/common/keyboard.c **** 
   9:tmk_core/common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/keyboard.c **** GNU General Public License for more details.
  13:tmk_core/common/keyboard.c **** 
  14:tmk_core/common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/keyboard.c **** */
  17:tmk_core/common/keyboard.c **** 
  18:tmk_core/common/keyboard.c **** #include <stdint.h>
  19:tmk_core/common/keyboard.c **** #include "keyboard.h"
  20:tmk_core/common/keyboard.c **** #include "matrix.h"
  21:tmk_core/common/keyboard.c **** #include "keymap.h"
  22:tmk_core/common/keyboard.c **** #include "host.h"
  23:tmk_core/common/keyboard.c **** #include "led.h"
  24:tmk_core/common/keyboard.c **** #include "keycode.h"
  25:tmk_core/common/keyboard.c **** #include "timer.h"
  26:tmk_core/common/keyboard.c **** #include "print.h"
  27:tmk_core/common/keyboard.c **** #include "debug.h"
  28:tmk_core/common/keyboard.c **** #include "command.h"
  29:tmk_core/common/keyboard.c **** #include "util.h"
  30:tmk_core/common/keyboard.c **** #include "sendchar.h"
  31:tmk_core/common/keyboard.c **** #include "eeconfig.h"
  32:tmk_core/common/keyboard.c **** #include "backlight.h"
  33:tmk_core/common/keyboard.c **** #include "action_layer.h"
  34:tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  35:tmk_core/common/keyboard.c **** #   include "bootmagic.h"
  36:tmk_core/common/keyboard.c **** #else
  37:tmk_core/common/keyboard.c **** #   include "magic.h"
  38:tmk_core/common/keyboard.c **** #endif
  39:tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  40:tmk_core/common/keyboard.c **** #   include "mousekey.h"
  41:tmk_core/common/keyboard.c **** #endif
  42:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  43:tmk_core/common/keyboard.c **** #   include "ps2_mouse.h"
  44:tmk_core/common/keyboard.c **** #endif
  45:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  46:tmk_core/common/keyboard.c **** #   include "serial_mouse.h"
  47:tmk_core/common/keyboard.c **** #endif
  48:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  49:tmk_core/common/keyboard.c **** #   include "adb.h"
  50:tmk_core/common/keyboard.c **** #endif
  51:tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
  52:tmk_core/common/keyboard.c **** #   include "rgblight.h"
  53:tmk_core/common/keyboard.c **** #endif
  54:tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
  55:tmk_core/common/keyboard.c **** #   include "process_steno.h"
  56:tmk_core/common/keyboard.c **** #endif
  57:tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
  58:tmk_core/common/keyboard.c **** #   include "fauxclicky.h"
  59:tmk_core/common/keyboard.c **** #endif
  60:tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
  61:tmk_core/common/keyboard.c **** #   include "serial_link/system/serial_link.h"
  62:tmk_core/common/keyboard.c **** #endif
  63:tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
  64:tmk_core/common/keyboard.c **** #   include "visualizer/visualizer.h"
  65:tmk_core/common/keyboard.c **** #endif
  66:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
  67:tmk_core/common/keyboard.c **** #   include "pointing_device.h"
  68:tmk_core/common/keyboard.c **** #endif
  69:tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
  70:tmk_core/common/keyboard.c **** #   include "process_midi.h"
  71:tmk_core/common/keyboard.c **** #endif
  72:tmk_core/common/keyboard.c **** #ifdef HD44780_ENABLE
  73:tmk_core/common/keyboard.c **** #   include "hd44780.h"
  74:tmk_core/common/keyboard.c **** #endif
  75:tmk_core/common/keyboard.c **** 
  76:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
  77:tmk_core/common/keyboard.c **** extern const uint16_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
  78:tmk_core/common/keyboard.c **** static matrix_row_t get_real_keys(uint8_t row, matrix_row_t rowdata){
  79:tmk_core/common/keyboard.c ****     matrix_row_t out = 0;
  80:tmk_core/common/keyboard.c ****     for (uint8_t col = 0; col < MATRIX_COLS; col++) {
  81:tmk_core/common/keyboard.c ****         //read each key in the row data and check if the keymap defines it as a real key
  82:tmk_core/common/keyboard.c ****         if (pgm_read_byte(&keymaps[0][row][col]) && (rowdata & (1<<col))){
  83:tmk_core/common/keyboard.c ****             //this creates new row data, if a key is defined in the keymap, it will be set here
  84:tmk_core/common/keyboard.c ****             out |= 1<<col;
  85:tmk_core/common/keyboard.c ****         }
  86:tmk_core/common/keyboard.c ****     }
  87:tmk_core/common/keyboard.c ****     return out;
  88:tmk_core/common/keyboard.c **** }
  89:tmk_core/common/keyboard.c **** 
  90:tmk_core/common/keyboard.c **** static inline bool popcount_more_than_one(matrix_row_t rowdata)
  91:tmk_core/common/keyboard.c **** {
  92:tmk_core/common/keyboard.c ****     rowdata &= rowdata-1; //if there are less than two bits (keys) set, rowdata will become zero
  93:tmk_core/common/keyboard.c ****     return rowdata;
  94:tmk_core/common/keyboard.c **** }
  95:tmk_core/common/keyboard.c **** 
  96:tmk_core/common/keyboard.c **** static inline bool has_ghost_in_row(uint8_t row, matrix_row_t rowdata)
  97:tmk_core/common/keyboard.c **** {
  98:tmk_core/common/keyboard.c ****     /* No ghost exists when less than 2 keys are down on the row.
  99:tmk_core/common/keyboard.c ****     If there are "active" blanks in the matrix, the key can't be pressed by the user,
 100:tmk_core/common/keyboard.c ****     there is no doubt as to which keys are really being pressed.
 101:tmk_core/common/keyboard.c ****     The ghosts will be ignored, they are KC_NO.   */
 102:tmk_core/common/keyboard.c ****     rowdata = get_real_keys(row, rowdata);
 103:tmk_core/common/keyboard.c ****     if ((popcount_more_than_one(rowdata)) == 0){
 104:tmk_core/common/keyboard.c ****         return false;
 105:tmk_core/common/keyboard.c ****     }
 106:tmk_core/common/keyboard.c ****     /* Ghost occurs when the row shares a column line with other row,
 107:tmk_core/common/keyboard.c ****     and two columns are read on each row. Blanks in the matrix don't matter,
 108:tmk_core/common/keyboard.c ****     so they are filtered out.
 109:tmk_core/common/keyboard.c ****     If there are two or more real keys pressed and they match columns with
 110:tmk_core/common/keyboard.c ****     at least two of another row's real keys, the row will be ignored. Keep in mind,
 111:tmk_core/common/keyboard.c ****     we are checking one row at a time, not all of them at once.
 112:tmk_core/common/keyboard.c ****     */
 113:tmk_core/common/keyboard.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 114:tmk_core/common/keyboard.c ****         if (i != row && popcount_more_than_one(get_real_keys(i, matrix_get_row(i)) & rowdata)){
 115:tmk_core/common/keyboard.c ****             return true;
 116:tmk_core/common/keyboard.c ****         }
 117:tmk_core/common/keyboard.c ****     }
 118:tmk_core/common/keyboard.c ****     return false;
 119:tmk_core/common/keyboard.c **** }
 120:tmk_core/common/keyboard.c **** 
 121:tmk_core/common/keyboard.c **** #endif
 122:tmk_core/common/keyboard.c **** 
 123:tmk_core/common/keyboard.c **** /** \brief matrix_setup
 124:tmk_core/common/keyboard.c ****  *
 125:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 126:tmk_core/common/keyboard.c ****  */
 127:tmk_core/common/keyboard.c **** __attribute__ ((weak))
 128:tmk_core/common/keyboard.c **** void matrix_setup(void) {
  16               		.loc 1 128 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 0895      		ret
  23               		.cfi_endproc
  24               	.LFE4:
  26               		.section	.text.keyboard_setup,"ax",@progbits
  27               	.global	keyboard_setup
  29               	keyboard_setup:
  30               	.LFB5:
 129:tmk_core/common/keyboard.c **** }
 130:tmk_core/common/keyboard.c **** 
 131:tmk_core/common/keyboard.c **** /** \brief keyboard_setup
 132:tmk_core/common/keyboard.c ****  *
 133:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 134:tmk_core/common/keyboard.c ****  */
 135:tmk_core/common/keyboard.c **** void keyboard_setup(void) {
  31               		.loc 1 135 0
  32               		.cfi_startproc
  33               	/* prologue: function */
  34               	/* frame size = 0 */
  35               	/* stack size = 0 */
  36               	.L__stack_usage = 0
 136:tmk_core/common/keyboard.c ****     matrix_setup();
  37               		.loc 1 136 0
  38 0000 0C94 0000 		jmp matrix_setup
  39               	.LVL0:
  40               		.cfi_endproc
  41               	.LFE5:
  43               		.section	.text.is_keyboard_master,"ax",@progbits
  44               		.weak	is_keyboard_master
  46               	is_keyboard_master:
  47               	.LFB6:
 137:tmk_core/common/keyboard.c **** }
 138:tmk_core/common/keyboard.c **** 
 139:tmk_core/common/keyboard.c **** /** \brief is_keyboard_master
 140:tmk_core/common/keyboard.c ****  *
 141:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 142:tmk_core/common/keyboard.c ****  */
 143:tmk_core/common/keyboard.c **** __attribute__((weak))
 144:tmk_core/common/keyboard.c **** bool is_keyboard_master(void) {
  48               		.loc 1 144 0
  49               		.cfi_startproc
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 0 */
  53               	.L__stack_usage = 0
 145:tmk_core/common/keyboard.c ****     return true;
 146:tmk_core/common/keyboard.c **** }
  54               		.loc 1 146 0
  55 0000 81E0      		ldi r24,lo8(1)
  56 0002 0895      		ret
  57               		.cfi_endproc
  58               	.LFE6:
  60               		.section	.text.keyboard_init,"ax",@progbits
  61               	.global	keyboard_init
  63               	keyboard_init:
  64               	.LFB7:
 147:tmk_core/common/keyboard.c **** 
 148:tmk_core/common/keyboard.c **** /** \brief keyboard_init
 149:tmk_core/common/keyboard.c ****  *
 150:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 151:tmk_core/common/keyboard.c ****  */
 152:tmk_core/common/keyboard.c **** void keyboard_init(void) {
  65               		.loc 1 152 0
  66               		.cfi_startproc
  67               	/* prologue: function */
  68               	/* frame size = 0 */
  69               	/* stack size = 0 */
  70               	.L__stack_usage = 0
 153:tmk_core/common/keyboard.c ****     timer_init();
  71               		.loc 1 153 0
  72 0000 0E94 0000 		call timer_init
  73               	.LVL1:
 154:tmk_core/common/keyboard.c **** // To use PORTF disable JTAG with writing JTD bit twice within four cycles.
 155:tmk_core/common/keyboard.c **** #if  (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__) || defined(__AVR_ATmega32U4__))
 156:tmk_core/common/keyboard.c ****   MCUCR |= _BV(JTD);
  74               		.loc 1 156 0
  75 0004 85B7      		in r24,0x35
  76 0006 8068      		ori r24,lo8(-128)
  77 0008 85BF      		out 0x35,r24
 157:tmk_core/common/keyboard.c ****   MCUCR |= _BV(JTD);
  78               		.loc 1 157 0
  79 000a 85B7      		in r24,0x35
  80 000c 8068      		ori r24,lo8(-128)
  81 000e 85BF      		out 0x35,r24
 158:tmk_core/common/keyboard.c **** #endif
 159:tmk_core/common/keyboard.c ****     matrix_init();
  82               		.loc 1 159 0
  83 0010 0E94 0000 		call matrix_init
  84               	.LVL2:
 160:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 161:tmk_core/common/keyboard.c ****     ps2_mouse_init();
 162:tmk_core/common/keyboard.c **** #endif
 163:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 164:tmk_core/common/keyboard.c ****     serial_mouse_init();
 165:tmk_core/common/keyboard.c **** #endif
 166:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 167:tmk_core/common/keyboard.c ****     adb_mouse_init();
 168:tmk_core/common/keyboard.c **** #endif
 169:tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
 170:tmk_core/common/keyboard.c ****     bootmagic();
 171:tmk_core/common/keyboard.c **** #else
 172:tmk_core/common/keyboard.c ****     magic();
  85               		.loc 1 172 0
  86 0014 0E94 0000 		call magic
  87               	.LVL3:
 173:tmk_core/common/keyboard.c **** #endif
 174:tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
 175:tmk_core/common/keyboard.c ****     backlight_init();
  88               		.loc 1 175 0
  89 0018 0E94 0000 		call backlight_init
  90               	.LVL4:
 176:tmk_core/common/keyboard.c **** #endif
 177:tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
 178:tmk_core/common/keyboard.c ****     rgblight_init();
  91               		.loc 1 178 0
  92 001c 0C94 0000 		jmp rgblight_init
  93               	.LVL5:
  94               		.cfi_endproc
  95               	.LFE7:
  97               		.section	.text.keyboard_set_leds,"ax",@progbits
  98               	.global	keyboard_set_leds
 100               	keyboard_set_leds:
 101               	.LFB9:
 179:tmk_core/common/keyboard.c **** #endif
 180:tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
 181:tmk_core/common/keyboard.c ****     steno_init();
 182:tmk_core/common/keyboard.c **** #endif
 183:tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
 184:tmk_core/common/keyboard.c ****     fauxclicky_init();
 185:tmk_core/common/keyboard.c **** #endif
 186:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 187:tmk_core/common/keyboard.c ****     pointing_device_init();
 188:tmk_core/common/keyboard.c **** #endif
 189:tmk_core/common/keyboard.c **** #if defined(NKRO_ENABLE) && defined(FORCE_NKRO)
 190:tmk_core/common/keyboard.c ****     keymap_config.nkro = 1;
 191:tmk_core/common/keyboard.c **** #endif
 192:tmk_core/common/keyboard.c **** }
 193:tmk_core/common/keyboard.c **** 
 194:tmk_core/common/keyboard.c **** /** \brief Keyboard task: Do keyboard routine jobs
 195:tmk_core/common/keyboard.c ****  *
 196:tmk_core/common/keyboard.c ****  * Do routine keyboard jobs:
 197:tmk_core/common/keyboard.c ****  *
 198:tmk_core/common/keyboard.c ****  * * scan matrix
 199:tmk_core/common/keyboard.c ****  * * handle mouse movements
 200:tmk_core/common/keyboard.c ****  * * run visualizer code
 201:tmk_core/common/keyboard.c ****  * * handle midi commands
 202:tmk_core/common/keyboard.c ****  * * light LEDs
 203:tmk_core/common/keyboard.c ****  *
 204:tmk_core/common/keyboard.c ****  * This is repeatedly called as fast as possible.
 205:tmk_core/common/keyboard.c ****  */
 206:tmk_core/common/keyboard.c **** void keyboard_task(void)
 207:tmk_core/common/keyboard.c **** {
 208:tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 209:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 210:tmk_core/common/keyboard.c ****   //  static matrix_row_t matrix_ghost[MATRIX_ROWS];
 211:tmk_core/common/keyboard.c **** #endif
 212:tmk_core/common/keyboard.c ****     static uint8_t led_status = 0;
 213:tmk_core/common/keyboard.c ****     matrix_row_t matrix_row = 0;
 214:tmk_core/common/keyboard.c ****     matrix_row_t matrix_change = 0;
 215:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 216:tmk_core/common/keyboard.c ****     uint8_t keys_processed = 0;
 217:tmk_core/common/keyboard.c **** #endif
 218:tmk_core/common/keyboard.c **** 
 219:tmk_core/common/keyboard.c ****     matrix_scan();
 220:tmk_core/common/keyboard.c ****     if (is_keyboard_master()) {
 221:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 222:tmk_core/common/keyboard.c ****             matrix_row = matrix_get_row(r);
 223:tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 224:tmk_core/common/keyboard.c ****             if (matrix_change) {
 225:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 226:tmk_core/common/keyboard.c ****                 if (has_ghost_in_row(r, matrix_row)) {
 227:tmk_core/common/keyboard.c ****                     /* Keep track of whether ghosted status has changed for
 228:tmk_core/common/keyboard.c ****                     * debugging. But don't update matrix_prev until un-ghosted, or
 229:tmk_core/common/keyboard.c ****                     * the last key would be lost.
 230:tmk_core/common/keyboard.c ****                     */
 231:tmk_core/common/keyboard.c ****                     //if (debug_matrix && matrix_ghost[r] != matrix_row) {
 232:tmk_core/common/keyboard.c ****                     //    matrix_print();
 233:tmk_core/common/keyboard.c ****                     //}
 234:tmk_core/common/keyboard.c ****                     //matrix_ghost[r] = matrix_row;
 235:tmk_core/common/keyboard.c ****                     continue;
 236:tmk_core/common/keyboard.c ****                 }
 237:tmk_core/common/keyboard.c ****                 //matrix_ghost[r] = matrix_row;
 238:tmk_core/common/keyboard.c **** #endif
 239:tmk_core/common/keyboard.c ****                 if (debug_matrix) matrix_print();
 240:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 241:tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1<<c)) {
 242:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 243:tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 244:tmk_core/common/keyboard.c ****                             .pressed = (matrix_row & ((matrix_row_t)1<<c)),
 245:tmk_core/common/keyboard.c ****                             .time = (timer_read() | 1) /* time should not be 0 */
 246:tmk_core/common/keyboard.c ****                         });
 247:tmk_core/common/keyboard.c ****                         // record a processed key
 248:tmk_core/common/keyboard.c ****                         matrix_prev[r] ^= ((matrix_row_t)1<<c);
 249:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 250:tmk_core/common/keyboard.c ****                         // only jump out if we have processed "enough" keys.
 251:tmk_core/common/keyboard.c ****                         if (++keys_processed >= QMK_KEYS_PER_SCAN)
 252:tmk_core/common/keyboard.c **** #endif
 253:tmk_core/common/keyboard.c ****                         // process a key per task call
 254:tmk_core/common/keyboard.c ****                         goto MATRIX_LOOP_END;
 255:tmk_core/common/keyboard.c ****                     }
 256:tmk_core/common/keyboard.c ****                 }
 257:tmk_core/common/keyboard.c ****             }
 258:tmk_core/common/keyboard.c ****         }
 259:tmk_core/common/keyboard.c ****     }
 260:tmk_core/common/keyboard.c ****     // call with pseudo tick event when no real key event.
 261:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 262:tmk_core/common/keyboard.c ****     // we can get here with some keys processed now.
 263:tmk_core/common/keyboard.c ****     if (!keys_processed)
 264:tmk_core/common/keyboard.c **** #endif
 265:tmk_core/common/keyboard.c ****     action_exec(TICK);
 266:tmk_core/common/keyboard.c **** 
 267:tmk_core/common/keyboard.c **** MATRIX_LOOP_END:
 268:tmk_core/common/keyboard.c **** 
 269:tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 270:tmk_core/common/keyboard.c ****     // mousekey repeat & acceleration
 271:tmk_core/common/keyboard.c ****     mousekey_task();
 272:tmk_core/common/keyboard.c **** #endif
 273:tmk_core/common/keyboard.c **** 
 274:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 275:tmk_core/common/keyboard.c ****     ps2_mouse_task();
 276:tmk_core/common/keyboard.c **** #endif
 277:tmk_core/common/keyboard.c **** 
 278:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 279:tmk_core/common/keyboard.c ****     serial_mouse_task();
 280:tmk_core/common/keyboard.c **** #endif
 281:tmk_core/common/keyboard.c **** 
 282:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 283:tmk_core/common/keyboard.c ****     adb_mouse_task();
 284:tmk_core/common/keyboard.c **** #endif
 285:tmk_core/common/keyboard.c **** 
 286:tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
 287:tmk_core/common/keyboard.c **** 	serial_link_update();
 288:tmk_core/common/keyboard.c **** #endif
 289:tmk_core/common/keyboard.c **** 
 290:tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
 291:tmk_core/common/keyboard.c ****     visualizer_update(default_layer_state, layer_state, visualizer_get_mods(), host_keyboard_leds()
 292:tmk_core/common/keyboard.c **** #endif
 293:tmk_core/common/keyboard.c **** 
 294:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 295:tmk_core/common/keyboard.c ****     pointing_device_task();
 296:tmk_core/common/keyboard.c **** #endif
 297:tmk_core/common/keyboard.c **** 
 298:tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
 299:tmk_core/common/keyboard.c ****     midi_task();
 300:tmk_core/common/keyboard.c **** #endif
 301:tmk_core/common/keyboard.c **** 
 302:tmk_core/common/keyboard.c ****     // update LED
 303:tmk_core/common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 304:tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 305:tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 306:tmk_core/common/keyboard.c ****     }
 307:tmk_core/common/keyboard.c **** }
 308:tmk_core/common/keyboard.c **** 
 309:tmk_core/common/keyboard.c **** /** \brief keyboard set leds
 310:tmk_core/common/keyboard.c ****  *
 311:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 312:tmk_core/common/keyboard.c ****  */
 313:tmk_core/common/keyboard.c **** void keyboard_set_leds(uint8_t leds)
 314:tmk_core/common/keyboard.c **** {
 102               		.loc 1 314 0
 103               		.cfi_startproc
 104               	.LVL6:
 105 0000 CF93      		push r28
 106               	.LCFI0:
 107               		.cfi_def_cfa_offset 3
 108               		.cfi_offset 28, -2
 109               	/* prologue: function */
 110               	/* frame size = 0 */
 111               	/* stack size = 1 */
 112               	.L__stack_usage = 1
 113 0002 C82F      		mov r28,r24
 315:tmk_core/common/keyboard.c ****     if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 114               		.loc 1 315 0
 115 0004 8091 0000 		lds r24,debug_config
 116               	.LVL7:
 117 0008 82FF      		sbrs r24,2
 118 000a 00C0      		rjmp .L7
 119               		.loc 1 315 0 is_stmt 0 discriminator 1
 120 000c 80FF      		sbrs r24,0
 121 000e 00C0      		rjmp .L8
 122               		.loc 1 315 0 discriminator 2
 123 0010 80E0      		ldi r24,lo8(__c.2929)
 124 0012 90E0      		ldi r25,hi8(__c.2929)
 125 0014 0E94 0000 		call xputs
 126               	.LVL8:
 127               	.L8:
 128               		.loc 1 315 0 discriminator 4
 129 0018 8091 0000 		lds r24,debug_config
 130 001c 80FF      		sbrs r24,0
 131 001e 00C0      		rjmp .L9
 132               		.loc 1 315 0 discriminator 5
 133 0020 1F92      		push __zero_reg__
 134               	.LCFI1:
 135               		.cfi_def_cfa_offset 4
 136 0022 CF93      		push r28
 137               	.LCFI2:
 138               		.cfi_def_cfa_offset 5
 139 0024 80E0      		ldi r24,lo8(__c.2931)
 140 0026 90E0      		ldi r25,hi8(__c.2931)
 141 0028 9F93      		push r25
 142               	.LCFI3:
 143               		.cfi_def_cfa_offset 6
 144 002a 8F93      		push r24
 145               	.LCFI4:
 146               		.cfi_def_cfa_offset 7
 147 002c 0E94 0000 		call __xprintf
 148               	.LVL9:
 149 0030 0F90      		pop __tmp_reg__
 150 0032 0F90      		pop __tmp_reg__
 151 0034 0F90      		pop __tmp_reg__
 152 0036 0F90      		pop __tmp_reg__
 153               	.LCFI5:
 154               		.cfi_def_cfa_offset 3
 155               	.L9:
 156               		.loc 1 315 0 discriminator 7
 157 0038 8091 0000 		lds r24,debug_config
 158 003c 80FF      		sbrs r24,0
 159 003e 00C0      		rjmp .L7
 160               		.loc 1 315 0 discriminator 8
 161 0040 80E0      		ldi r24,lo8(__c.2933)
 162 0042 90E0      		ldi r25,hi8(__c.2933)
 163 0044 0E94 0000 		call xputs
 164               	.LVL10:
 165               	.L7:
 316:tmk_core/common/keyboard.c ****     led_set(leds);
 166               		.loc 1 316 0 is_stmt 1
 167 0048 8C2F      		mov r24,r28
 168               	/* epilogue start */
 317:tmk_core/common/keyboard.c **** }
 169               		.loc 1 317 0
 170 004a CF91      		pop r28
 171               	.LVL11:
 316:tmk_core/common/keyboard.c ****     led_set(leds);
 172               		.loc 1 316 0
 173 004c 0C94 0000 		jmp led_set
 174               	.LVL12:
 175               		.cfi_endproc
 176               	.LFE9:
 178               		.section	.text.keyboard_task,"ax",@progbits
 179               	.global	keyboard_task
 181               	keyboard_task:
 182               	.LFB8:
 207:tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 183               		.loc 1 207 0
 184               		.cfi_startproc
 185 0000 4F92      		push r4
 186               	.LCFI6:
 187               		.cfi_def_cfa_offset 3
 188               		.cfi_offset 4, -2
 189 0002 5F92      		push r5
 190               	.LCFI7:
 191               		.cfi_def_cfa_offset 4
 192               		.cfi_offset 5, -3
 193 0004 7F92      		push r7
 194               	.LCFI8:
 195               		.cfi_def_cfa_offset 5
 196               		.cfi_offset 7, -4
 197 0006 8F92      		push r8
 198               	.LCFI9:
 199               		.cfi_def_cfa_offset 6
 200               		.cfi_offset 8, -5
 201 0008 9F92      		push r9
 202               	.LCFI10:
 203               		.cfi_def_cfa_offset 7
 204               		.cfi_offset 9, -6
 205 000a AF92      		push r10
 206               	.LCFI11:
 207               		.cfi_def_cfa_offset 8
 208               		.cfi_offset 10, -7
 209 000c BF92      		push r11
 210               	.LCFI12:
 211               		.cfi_def_cfa_offset 9
 212               		.cfi_offset 11, -8
 213 000e CF92      		push r12
 214               	.LCFI13:
 215               		.cfi_def_cfa_offset 10
 216               		.cfi_offset 12, -9
 217 0010 DF92      		push r13
 218               	.LCFI14:
 219               		.cfi_def_cfa_offset 11
 220               		.cfi_offset 13, -10
 221 0012 EF92      		push r14
 222               	.LCFI15:
 223               		.cfi_def_cfa_offset 12
 224               		.cfi_offset 14, -11
 225 0014 FF92      		push r15
 226               	.LCFI16:
 227               		.cfi_def_cfa_offset 13
 228               		.cfi_offset 15, -12
 229 0016 0F93      		push r16
 230               	.LCFI17:
 231               		.cfi_def_cfa_offset 14
 232               		.cfi_offset 16, -13
 233 0018 1F93      		push r17
 234               	.LCFI18:
 235               		.cfi_def_cfa_offset 15
 236               		.cfi_offset 17, -14
 237 001a CF93      		push r28
 238               	.LCFI19:
 239               		.cfi_def_cfa_offset 16
 240               		.cfi_offset 28, -15
 241 001c DF93      		push r29
 242               	.LCFI20:
 243               		.cfi_def_cfa_offset 17
 244               		.cfi_offset 29, -16
 245 001e CDB7      		in r28,__SP_L__
 246 0020 DEB7      		in r29,__SP_H__
 247               	.LCFI21:
 248               		.cfi_def_cfa_register 28
 249 0022 2A97      		sbiw r28,10
 250               	.LCFI22:
 251               		.cfi_def_cfa_offset 27
 252 0024 0FB6      		in __tmp_reg__,__SREG__
 253 0026 F894      		cli
 254 0028 DEBF      		out __SP_H__,r29
 255 002a 0FBE      		out __SREG__,__tmp_reg__
 256 002c CDBF      		out __SP_L__,r28
 257               	/* prologue: function */
 258               	/* frame size = 10 */
 259               	/* stack size = 25 */
 260               	.L__stack_usage = 25
 261               	.LVL13:
 219:tmk_core/common/keyboard.c ****     if (is_keyboard_master()) {
 262               		.loc 1 219 0
 263 002e 0E94 0000 		call matrix_scan
 264               	.LVL14:
 220:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 265               		.loc 1 220 0
 266 0032 0E94 0000 		call is_keyboard_master
 267               	.LVL15:
 268 0036 8111      		cpse r24,__zero_reg__
 269 0038 00C0      		rjmp .L22
 270               	.LVL16:
 271               	.L26:
 265:tmk_core/common/keyboard.c **** 
 272               		.loc 1 265 0
 273 003a 8FEF      		ldi r24,lo8(-1)
 274 003c 8983      		std Y+1,r24
 275 003e 8A83      		std Y+2,r24
 276 0040 1B82      		std Y+3,__zero_reg__
 277 0042 0E94 0000 		call timer_read
 278               	.LVL17:
 279 0046 8160      		ori r24,1
 280 0048 782F      		mov r23,r24
 281 004a 9D83      		std Y+5,r25
 282 004c 8C83      		std Y+4,r24
 283 004e 4981      		ldd r20,Y+1
 284 0050 5A81      		ldd r21,Y+2
 285 0052 6B81      		ldd r22,Y+3
 286 0054 8D81      		ldd r24,Y+5
 287 0056 0E94 0000 		call action_exec
 288               	.LVL18:
 289 005a 00C0      		rjmp .L23
 290               	.LVL19:
 291               	.L22:
 292 005c 90E0      		ldi r25,lo8(matrix_prev.2909)
 293 005e C92E      		mov r12,r25
 294 0060 90E0      		ldi r25,hi8(matrix_prev.2909)
 295 0062 D92E      		mov r13,r25
 220:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 296               		.loc 1 220 0
 297 0064 00E0      		ldi r16,0
 298 0066 10E0      		ldi r17,0
 299               	.LBB2:
 300               	.LBB3:
 241:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 301               		.loc 1 241 0
 302 0068 AA24      		clr r10
 303 006a A394      		inc r10
 304 006c B12C      		mov r11,__zero_reg__
 305               	.LVL20:
 306               	.L25:
 307 006e 702E      		mov r7,r16
 308               	.LVL21:
 309               	.LBE3:
 222:tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 310               		.loc 1 222 0
 311 0070 802F      		mov r24,r16
 312 0072 0E94 0000 		call matrix_get_row
 313               	.LVL22:
 314 0076 4C01      		movw r8,r24
 315               	.LVL23:
 223:tmk_core/common/keyboard.c ****             if (matrix_change) {
 316               		.loc 1 223 0
 317 0078 F601      		movw r30,r12
 318 007a 4190      		ld r4,Z+
 319 007c 5190      		ld r5,Z+
 320 007e 6F01      		movw r12,r30
 321 0080 4826      		eor r4,r24
 322 0082 5926      		eor r5,r25
 323               	.LVL24:
 224:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 324               		.loc 1 224 0
 325 0084 4114      		cp r4,__zero_reg__
 326 0086 5104      		cpc r5,__zero_reg__
 327 0088 01F4      		brne .L24
 328               	.L31:
 329               	.LVL25:
 330 008a 0F5F      		subi r16,-1
 331 008c 1F4F      		sbci r17,-1
 332               	.LVL26:
 221:tmk_core/common/keyboard.c ****             matrix_row = matrix_get_row(r);
 333               		.loc 1 221 0
 334 008e 0430      		cpi r16,4
 335 0090 1105      		cpc r17,__zero_reg__
 336 0092 01F4      		brne .L25
 337 0094 00C0      		rjmp .L26
 338               	.L24:
 239:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 339               		.loc 1 239 0
 340 0096 8091 0000 		lds r24,debug_config
 341 009a 81FD      		sbrc r24,1
 239:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 342               		.loc 1 239 0 is_stmt 0 discriminator 1
 343 009c 0E94 0000 		call matrix_print
 344               	.LVL27:
 345               	.L27:
 346               	.LBE2:
 220:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 347               		.loc 1 220 0 is_stmt 1
 348 00a0 20E0      		ldi r18,0
 349 00a2 30E0      		ldi r19,0
 350               	.LVL28:
 351               	.L30:
 352               	.LBB5:
 353               	.LBB4:
 241:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 354               		.loc 1 241 0
 355 00a4 7501      		movw r14,r10
 356 00a6 022E      		mov r0,r18
 357 00a8 00C0      		rjmp 2f
 358               		1:
 359 00aa EE0C      		lsl r14
 360 00ac FF1C      		rol r15
 361               		2:
 362 00ae 0A94      		dec r0
 363 00b0 02F4      		brpl 1b
 364 00b2 C701      		movw r24,r14
 365 00b4 8421      		and r24,r4
 366 00b6 9521      		and r25,r5
 367 00b8 892B      		or r24,r25
 368 00ba 01F0      		breq .L28
 242:tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 369               		.loc 1 242 0
 370 00bc 2E83      		std Y+6,r18
 371 00be 7F82      		std Y+7,r7
 244:tmk_core/common/keyboard.c ****                             .time = (timer_read() | 1) /* time should not be 0 */
 372               		.loc 1 244 0
 373 00c0 8E20      		and r8,r14
 374 00c2 9F20      		and r9,r15
 375               	.LVL29:
 376 00c4 91E0      		ldi r25,lo8(1)
 377 00c6 8928      		or r8,r9
 378 00c8 01F4      		brne .L29
 379 00ca 90E0      		ldi r25,0
 380               	.L29:
 242:tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 381               		.loc 1 242 0
 382 00cc 9887      		std Y+8,r25
 245:tmk_core/common/keyboard.c ****                         });
 383               		.loc 1 245 0
 384 00ce 0E94 0000 		call timer_read
 385               	.LVL30:
 386 00d2 8160      		ori r24,1
 242:tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 387               		.loc 1 242 0
 388 00d4 782F      		mov r23,r24
 389 00d6 9A87      		std Y+10,r25
 390 00d8 8987      		std Y+9,r24
 391 00da 4E81      		ldd r20,Y+6
 392 00dc 5F81      		ldd r21,Y+7
 393 00de 6885      		ldd r22,Y+8
 394 00e0 8A85      		ldd r24,Y+10
 395 00e2 0E94 0000 		call action_exec
 396               	.LVL31:
 248:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 397               		.loc 1 248 0
 398 00e6 000F      		lsl r16
 399 00e8 111F      		rol r17
 400               	.LVL32:
 401 00ea F801      		movw r30,r16
 402 00ec E050      		subi r30,lo8(-(matrix_prev.2909))
 403 00ee F040      		sbci r31,hi8(-(matrix_prev.2909))
 404 00f0 8081      		ld r24,Z
 405 00f2 9181      		ldd r25,Z+1
 406 00f4 E826      		eor r14,r24
 407 00f6 F926      		eor r15,r25
 408 00f8 F182      		std Z+1,r15
 409 00fa E082      		st Z,r14
 254:tmk_core/common/keyboard.c ****                     }
 410               		.loc 1 254 0
 411 00fc 00C0      		rjmp .L23
 412               	.LVL33:
 413               	.L28:
 414 00fe 2F5F      		subi r18,-1
 415 0100 3F4F      		sbci r19,-1
 416               	.LVL34:
 240:tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1<<c)) {
 417               		.loc 1 240 0 discriminator 2
 418 0102 2C30      		cpi r18,12
 419 0104 3105      		cpc r19,__zero_reg__
 420 0106 01F4      		brne .L30
 421 0108 00C0      		rjmp .L31
 422               	.LVL35:
 423               	.L23:
 424               	.LBE4:
 425               	.LBE5:
 303:tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 426               		.loc 1 303 0
 427 010a 1091 0000 		lds r17,led_status.2910
 428 010e 0E94 0000 		call host_keyboard_leds
 429               	.LVL36:
 430 0112 1817      		cp r17,r24
 431 0114 01F0      		breq .L21
 304:tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 432               		.loc 1 304 0
 433 0116 0E94 0000 		call host_keyboard_leds
 434               	.LVL37:
 435 011a 8093 0000 		sts led_status.2910,r24
 436               	/* epilogue start */
 307:tmk_core/common/keyboard.c **** 
 437               		.loc 1 307 0
 438 011e 2A96      		adiw r28,10
 439 0120 0FB6      		in __tmp_reg__,__SREG__
 440 0122 F894      		cli
 441 0124 DEBF      		out __SP_H__,r29
 442 0126 0FBE      		out __SREG__,__tmp_reg__
 443 0128 CDBF      		out __SP_L__,r28
 444 012a DF91      		pop r29
 445 012c CF91      		pop r28
 446 012e 1F91      		pop r17
 447 0130 0F91      		pop r16
 448 0132 FF90      		pop r15
 449 0134 EF90      		pop r14
 450 0136 DF90      		pop r13
 451 0138 CF90      		pop r12
 452 013a BF90      		pop r11
 453 013c AF90      		pop r10
 454 013e 9F90      		pop r9
 455 0140 8F90      		pop r8
 456 0142 7F90      		pop r7
 457 0144 5F90      		pop r5
 458 0146 4F90      		pop r4
 305:tmk_core/common/keyboard.c ****     }
 459               		.loc 1 305 0
 460 0148 0C94 0000 		jmp keyboard_set_leds
 461               	.LVL38:
 462               	.L21:
 463               	/* epilogue start */
 307:tmk_core/common/keyboard.c **** 
 464               		.loc 1 307 0
 465 014c 2A96      		adiw r28,10
 466 014e 0FB6      		in __tmp_reg__,__SREG__
 467 0150 F894      		cli
 468 0152 DEBF      		out __SP_H__,r29
 469 0154 0FBE      		out __SREG__,__tmp_reg__
 470 0156 CDBF      		out __SP_L__,r28
 471 0158 DF91      		pop r29
 472 015a CF91      		pop r28
 473 015c 1F91      		pop r17
 474 015e 0F91      		pop r16
 475 0160 FF90      		pop r15
 476 0162 EF90      		pop r14
 477 0164 DF90      		pop r13
 478 0166 CF90      		pop r12
 479 0168 BF90      		pop r11
 480 016a AF90      		pop r10
 481 016c 9F90      		pop r9
 482 016e 8F90      		pop r8
 483 0170 7F90      		pop r7
 484 0172 5F90      		pop r5
 485 0174 4F90      		pop r4
 486 0176 0895      		ret
 487               		.cfi_endproc
 488               	.LFE8:
 490               		.section	.progmem.data.__c.2933,"a",@progbits
 493               	__c.2933:
 494 0000 0A00      		.string	"\n"
 495               		.section	.progmem.data.__c.2931,"a",@progbits
 498               	__c.2931:
 499 0000 2530 3258 		.string	"%02X"
 499      00
 500               		.section	.progmem.data.__c.2929,"a",@progbits
 503               	__c.2929:
 504 0000 6B65 7962 		.string	"keyboard_set_led: "
 504      6F61 7264 
 504      5F73 6574 
 504      5F6C 6564 
 504      3A20 00
 505               		.section	.bss.led_status.2910,"aw",@nobits
 508               	led_status.2910:
 509 0000 00        		.zero	1
 510               		.section	.bss.matrix_prev.2909,"aw",@nobits
 513               	matrix_prev.2909:
 514 0000 0000 0000 		.zero	8
 514      0000 0000 
 515               		.text
 516               	.Letext0:
 517               		.file 2 "c:\\msys64\\home\\cris almanza\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdint.h"
 518               		.file 3 "tmk_core/common/keyboard.h"
 519               		.file 4 "tmk_core/common/matrix.h"
 520               		.file 5 "tmk_core/common/debug.h"
 521               		.file 6 "tmk_core/common/timer.h"
 522               		.file 7 "tmk_core/common/magic.h"
 523               		.file 8 "tmk_core/common/backlight.h"
 524               		.file 9 "quantum/rgblight.h"
 525               		.file 10 "tmk_core/common/avr/xprintf.h"
 526               		.file 11 "tmk_core/common/led.h"
 527               		.file 12 "tmk_core/common/action.h"
 528               		.file 13 "tmk_core/common/host.h"
DEFINED SYMBOLS
                            *ABS*:00000000 keyboard.c
C:\msys64\tmp\ccEN1nBu.s:2      *ABS*:0000003e __SP_H__
C:\msys64\tmp\ccEN1nBu.s:3      *ABS*:0000003d __SP_L__
C:\msys64\tmp\ccEN1nBu.s:4      *ABS*:0000003f __SREG__
C:\msys64\tmp\ccEN1nBu.s:5      *ABS*:00000000 __tmp_reg__
C:\msys64\tmp\ccEN1nBu.s:6      *ABS*:00000001 __zero_reg__
C:\msys64\tmp\ccEN1nBu.s:13     .text.matrix_setup:00000000 matrix_setup
C:\msys64\tmp\ccEN1nBu.s:29     .text.keyboard_setup:00000000 keyboard_setup
C:\msys64\tmp\ccEN1nBu.s:46     .text.is_keyboard_master:00000000 is_keyboard_master
C:\msys64\tmp\ccEN1nBu.s:63     .text.keyboard_init:00000000 keyboard_init
C:\msys64\tmp\ccEN1nBu.s:100    .text.keyboard_set_leds:00000000 keyboard_set_leds
C:\msys64\tmp\ccEN1nBu.s:503    .progmem.data.__c.2929:00000000 __c.2929
C:\msys64\tmp\ccEN1nBu.s:498    .progmem.data.__c.2931:00000000 __c.2931
C:\msys64\tmp\ccEN1nBu.s:493    .progmem.data.__c.2933:00000000 __c.2933
C:\msys64\tmp\ccEN1nBu.s:181    .text.keyboard_task:00000000 keyboard_task
C:\msys64\tmp\ccEN1nBu.s:513    .bss.matrix_prev.2909:00000000 matrix_prev.2909
C:\msys64\tmp\ccEN1nBu.s:508    .bss.led_status.2910:00000000 led_status.2910

UNDEFINED SYMBOLS
timer_init
matrix_init
magic
backlight_init
rgblight_init
debug_config
xputs
__xprintf
led_set
matrix_scan
timer_read
action_exec
matrix_get_row
matrix_print
host_keyboard_leds
__do_clear_bss
