   1               		.file	"ws2812.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.ws2812_sendarray_mask,"ax",@progbits
  11               	.global	ws2812_sendarray_mask
  13               	ws2812_sendarray_mask:
  14               	.LFB11:
  15               		.file 1 "drivers/avr/ws2812.c"
   1:drivers/avr/ws2812.c **** /*
   2:drivers/avr/ws2812.c **** * light weight WS2812 lib V2.0b
   3:drivers/avr/ws2812.c **** *
   4:drivers/avr/ws2812.c **** * Controls WS2811/WS2812/WS2812B RGB-LEDs
   5:drivers/avr/ws2812.c **** * Author: Tim (cpldcpu@gmail.com)
   6:drivers/avr/ws2812.c **** *
   7:drivers/avr/ws2812.c **** * Jan 18th, 2014  v2.0b Initial Version
   8:drivers/avr/ws2812.c **** * Nov 29th, 2015  v2.3  Added SK6812RGBW support
   9:drivers/avr/ws2812.c **** *
  10:drivers/avr/ws2812.c **** * This program is free software: you can redistribute it and/or modify
  11:drivers/avr/ws2812.c **** * it under the terms of the GNU General Public License as published by
  12:drivers/avr/ws2812.c **** * the Free Software Foundation, either version 2 of the License, or
  13:drivers/avr/ws2812.c **** * (at your option) any later version.
  14:drivers/avr/ws2812.c **** *
  15:drivers/avr/ws2812.c **** * This program is distributed in the hope that it will be useful,
  16:drivers/avr/ws2812.c **** * but WITHOUT ANY WARRANTY; without even the implied warranty of
  17:drivers/avr/ws2812.c **** * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  18:drivers/avr/ws2812.c **** * GNU General Public License for more details.
  19:drivers/avr/ws2812.c **** *
  20:drivers/avr/ws2812.c **** * You should have received a copy of the GNU General Public License
  21:drivers/avr/ws2812.c **** * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  22:drivers/avr/ws2812.c **** */
  23:drivers/avr/ws2812.c **** 
  24:drivers/avr/ws2812.c **** #include "ws2812.h"
  25:drivers/avr/ws2812.c **** #include <avr/interrupt.h>
  26:drivers/avr/ws2812.c **** #include <avr/io.h>
  27:drivers/avr/ws2812.c **** #include <util/delay.h>
  28:drivers/avr/ws2812.c **** #include "debug.h"
  29:drivers/avr/ws2812.c **** 
  30:drivers/avr/ws2812.c **** #ifdef RGBW_BB_TWI
  31:drivers/avr/ws2812.c **** 
  32:drivers/avr/ws2812.c **** // Port for the I2C
  33:drivers/avr/ws2812.c **** #define I2C_DDR DDRD
  34:drivers/avr/ws2812.c **** #define I2C_PIN PIND
  35:drivers/avr/ws2812.c **** #define I2C_PORT PORTD
  36:drivers/avr/ws2812.c **** 
  37:drivers/avr/ws2812.c **** // Pins to be used in the bit banging
  38:drivers/avr/ws2812.c **** #define I2C_CLK 0
  39:drivers/avr/ws2812.c **** #define I2C_DAT 1
  40:drivers/avr/ws2812.c **** 
  41:drivers/avr/ws2812.c **** #define I2C_DATA_HI()\
  42:drivers/avr/ws2812.c **** I2C_DDR &= ~ (1 << I2C_DAT);\
  43:drivers/avr/ws2812.c **** I2C_PORT |= (1 << I2C_DAT);
  44:drivers/avr/ws2812.c **** #define I2C_DATA_LO()\
  45:drivers/avr/ws2812.c **** I2C_DDR |= (1 << I2C_DAT);\
  46:drivers/avr/ws2812.c **** I2C_PORT &= ~ (1 << I2C_DAT);
  47:drivers/avr/ws2812.c **** 
  48:drivers/avr/ws2812.c **** #define I2C_CLOCK_HI()\
  49:drivers/avr/ws2812.c **** I2C_DDR &= ~ (1 << I2C_CLK);\
  50:drivers/avr/ws2812.c **** I2C_PORT |= (1 << I2C_CLK);
  51:drivers/avr/ws2812.c **** #define I2C_CLOCK_LO()\
  52:drivers/avr/ws2812.c **** I2C_DDR |= (1 << I2C_CLK);\
  53:drivers/avr/ws2812.c **** I2C_PORT &= ~ (1 << I2C_CLK);
  54:drivers/avr/ws2812.c **** 
  55:drivers/avr/ws2812.c **** #define I2C_DELAY 1
  56:drivers/avr/ws2812.c **** 
  57:drivers/avr/ws2812.c **** void I2C_WriteBit(unsigned char c)
  58:drivers/avr/ws2812.c **** {
  59:drivers/avr/ws2812.c ****     if (c > 0)
  60:drivers/avr/ws2812.c ****     {
  61:drivers/avr/ws2812.c ****         I2C_DATA_HI();
  62:drivers/avr/ws2812.c ****     }
  63:drivers/avr/ws2812.c ****     else
  64:drivers/avr/ws2812.c ****     {
  65:drivers/avr/ws2812.c ****         I2C_DATA_LO();
  66:drivers/avr/ws2812.c ****     }
  67:drivers/avr/ws2812.c **** 
  68:drivers/avr/ws2812.c ****     I2C_CLOCK_HI();
  69:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
  70:drivers/avr/ws2812.c **** 
  71:drivers/avr/ws2812.c ****     I2C_CLOCK_LO();
  72:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
  73:drivers/avr/ws2812.c **** 
  74:drivers/avr/ws2812.c ****     if (c > 0)
  75:drivers/avr/ws2812.c ****     {
  76:drivers/avr/ws2812.c ****         I2C_DATA_LO();
  77:drivers/avr/ws2812.c ****     }
  78:drivers/avr/ws2812.c **** 
  79:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
  80:drivers/avr/ws2812.c **** }
  81:drivers/avr/ws2812.c **** 
  82:drivers/avr/ws2812.c **** // Inits bitbanging port, must be called before using the functions below
  83:drivers/avr/ws2812.c **** //
  84:drivers/avr/ws2812.c **** void I2C_Init(void)
  85:drivers/avr/ws2812.c **** {
  86:drivers/avr/ws2812.c ****     I2C_PORT &= ~ ((1 << I2C_DAT) | (1 << I2C_CLK));
  87:drivers/avr/ws2812.c **** 
  88:drivers/avr/ws2812.c ****     I2C_CLOCK_HI();
  89:drivers/avr/ws2812.c ****     I2C_DATA_HI();
  90:drivers/avr/ws2812.c **** 
  91:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
  92:drivers/avr/ws2812.c **** }
  93:drivers/avr/ws2812.c **** 
  94:drivers/avr/ws2812.c **** // Send a START Condition
  95:drivers/avr/ws2812.c **** //
  96:drivers/avr/ws2812.c **** void I2C_Start(void)
  97:drivers/avr/ws2812.c **** {
  98:drivers/avr/ws2812.c ****     // set both to high at the same time
  99:drivers/avr/ws2812.c ****     I2C_DDR &= ~ ((1 << I2C_DAT) | (1 << I2C_CLK));
 100:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
 101:drivers/avr/ws2812.c **** 
 102:drivers/avr/ws2812.c ****     I2C_DATA_LO();
 103:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
 104:drivers/avr/ws2812.c **** 
 105:drivers/avr/ws2812.c ****     I2C_CLOCK_LO();
 106:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
 107:drivers/avr/ws2812.c **** }
 108:drivers/avr/ws2812.c **** 
 109:drivers/avr/ws2812.c **** // Send a STOP Condition
 110:drivers/avr/ws2812.c **** //
 111:drivers/avr/ws2812.c **** void I2C_Stop(void)
 112:drivers/avr/ws2812.c **** {
 113:drivers/avr/ws2812.c ****     I2C_CLOCK_HI();
 114:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
 115:drivers/avr/ws2812.c **** 
 116:drivers/avr/ws2812.c ****     I2C_DATA_HI();
 117:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
 118:drivers/avr/ws2812.c **** }
 119:drivers/avr/ws2812.c **** 
 120:drivers/avr/ws2812.c **** // write a byte to the I2C slave device
 121:drivers/avr/ws2812.c **** //
 122:drivers/avr/ws2812.c **** unsigned char I2C_Write(unsigned char c)
 123:drivers/avr/ws2812.c **** {
 124:drivers/avr/ws2812.c ****     for (char i = 0; i < 8; i++)
 125:drivers/avr/ws2812.c ****     {
 126:drivers/avr/ws2812.c ****         I2C_WriteBit(c & 128);
 127:drivers/avr/ws2812.c **** 
 128:drivers/avr/ws2812.c ****         c <<= 1;
 129:drivers/avr/ws2812.c ****     }
 130:drivers/avr/ws2812.c **** 
 131:drivers/avr/ws2812.c ****     
 132:drivers/avr/ws2812.c ****     I2C_WriteBit(0);
 133:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
 134:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
 135:drivers/avr/ws2812.c ****   
 136:drivers/avr/ws2812.c ****     // _delay_us(I2C_DELAY);
 137:drivers/avr/ws2812.c ****     //return I2C_ReadBit();
 138:drivers/avr/ws2812.c ****     return 0;
 139:drivers/avr/ws2812.c **** }
 140:drivers/avr/ws2812.c **** 
 141:drivers/avr/ws2812.c **** 
 142:drivers/avr/ws2812.c **** #endif
 143:drivers/avr/ws2812.c **** 
 144:drivers/avr/ws2812.c **** // Setleds for standard RGB
 145:drivers/avr/ws2812.c **** void inline ws2812_setleds(LED_TYPE *ledarray, uint16_t leds)
 146:drivers/avr/ws2812.c **** {
 147:drivers/avr/ws2812.c ****    // ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
 148:drivers/avr/ws2812.c ****    ws2812_setleds_pin(ledarray,leds, _BV(RGB_DI_PIN & 0xF));
 149:drivers/avr/ws2812.c **** }
 150:drivers/avr/ws2812.c **** 
 151:drivers/avr/ws2812.c **** void inline ws2812_setleds_pin(LED_TYPE *ledarray, uint16_t leds, uint8_t pinmask)
 152:drivers/avr/ws2812.c **** {
 153:drivers/avr/ws2812.c ****   // ws2812_DDRREG |= pinmask; // Enable DDR
 154:drivers/avr/ws2812.c ****   // new universal format (DDR)
 155:drivers/avr/ws2812.c ****   _SFR_IO8((RGB_DI_PIN >> 4) + 1) |= pinmask;
 156:drivers/avr/ws2812.c **** 
 157:drivers/avr/ws2812.c ****   ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
 158:drivers/avr/ws2812.c ****   _delay_us(50);
 159:drivers/avr/ws2812.c **** }
 160:drivers/avr/ws2812.c **** 
 161:drivers/avr/ws2812.c **** // Setleds for SK6812RGBW
 162:drivers/avr/ws2812.c **** void inline ws2812_setleds_rgbw(LED_TYPE *ledarray, uint16_t leds)
 163:drivers/avr/ws2812.c **** {
 164:drivers/avr/ws2812.c **** 
 165:drivers/avr/ws2812.c ****   #ifdef RGBW_BB_TWI
 166:drivers/avr/ws2812.c ****     uint8_t sreg_prev, twcr_prev;
 167:drivers/avr/ws2812.c ****     sreg_prev=SREG;
 168:drivers/avr/ws2812.c ****     twcr_prev=TWCR;
 169:drivers/avr/ws2812.c ****     cli();
 170:drivers/avr/ws2812.c ****     TWCR &= ~(1<<TWEN);
 171:drivers/avr/ws2812.c ****     I2C_Init();
 172:drivers/avr/ws2812.c ****     I2C_Start();
 173:drivers/avr/ws2812.c ****     I2C_Write(0x84);
 174:drivers/avr/ws2812.c ****     uint16_t datlen = leds<<2;
 175:drivers/avr/ws2812.c ****     uint8_t curbyte;
 176:drivers/avr/ws2812.c ****     uint8_t * data = (uint8_t*)ledarray;
 177:drivers/avr/ws2812.c ****     while (datlen--) {
 178:drivers/avr/ws2812.c ****       curbyte=*data++;
 179:drivers/avr/ws2812.c ****       I2C_Write(curbyte);
 180:drivers/avr/ws2812.c ****     }
 181:drivers/avr/ws2812.c ****     I2C_Stop();
 182:drivers/avr/ws2812.c ****     SREG=sreg_prev;
 183:drivers/avr/ws2812.c ****     TWCR=twcr_prev;
 184:drivers/avr/ws2812.c ****   #endif
 185:drivers/avr/ws2812.c **** 
 186:drivers/avr/ws2812.c **** 
 187:drivers/avr/ws2812.c ****   // ws2812_DDRREG |= _BV(ws2812_pin); // Enable DDR
 188:drivers/avr/ws2812.c ****   // new universal format (DDR)
 189:drivers/avr/ws2812.c ****   _SFR_IO8((RGB_DI_PIN >> 4) + 1) |= _BV(RGB_DI_PIN & 0xF);
 190:drivers/avr/ws2812.c **** 
 191:drivers/avr/ws2812.c ****   ws2812_sendarray_mask((uint8_t*)ledarray,leds<<2,_BV(RGB_DI_PIN & 0xF));
 192:drivers/avr/ws2812.c **** 
 193:drivers/avr/ws2812.c **** 
 194:drivers/avr/ws2812.c ****   #ifndef RGBW_BB_TWI
 195:drivers/avr/ws2812.c ****     _delay_us(80);
 196:drivers/avr/ws2812.c ****   #endif
 197:drivers/avr/ws2812.c **** }
 198:drivers/avr/ws2812.c **** 
 199:drivers/avr/ws2812.c **** void ws2812_sendarray(uint8_t *data,uint16_t datlen)
 200:drivers/avr/ws2812.c **** {
 201:drivers/avr/ws2812.c ****   ws2812_sendarray_mask(data,datlen,_BV(RGB_DI_PIN & 0xF));
 202:drivers/avr/ws2812.c **** }
 203:drivers/avr/ws2812.c **** 
 204:drivers/avr/ws2812.c **** /*
 205:drivers/avr/ws2812.c ****   This routine writes an array of bytes with RGB values to the Dataout pin
 206:drivers/avr/ws2812.c ****   using the fast 800kHz clockless WS2811/2812 protocol.
 207:drivers/avr/ws2812.c **** */
 208:drivers/avr/ws2812.c **** 
 209:drivers/avr/ws2812.c **** // Timing in ns
 210:drivers/avr/ws2812.c **** #define w_zeropulse   350
 211:drivers/avr/ws2812.c **** #define w_onepulse    900
 212:drivers/avr/ws2812.c **** #define w_totalperiod 1250
 213:drivers/avr/ws2812.c **** 
 214:drivers/avr/ws2812.c **** // Fixed cycles used by the inner loop
 215:drivers/avr/ws2812.c **** #define w_fixedlow    2
 216:drivers/avr/ws2812.c **** #define w_fixedhigh   4
 217:drivers/avr/ws2812.c **** #define w_fixedtotal  8
 218:drivers/avr/ws2812.c **** 
 219:drivers/avr/ws2812.c **** // Insert NOPs to match the timing, if possible
 220:drivers/avr/ws2812.c **** #define w_zerocycles    (((F_CPU/1000)*w_zeropulse          )/1000000)
 221:drivers/avr/ws2812.c **** #define w_onecycles     (((F_CPU/1000)*w_onepulse    +500000)/1000000)
 222:drivers/avr/ws2812.c **** #define w_totalcycles   (((F_CPU/1000)*w_totalperiod +500000)/1000000)
 223:drivers/avr/ws2812.c **** 
 224:drivers/avr/ws2812.c **** // w1 - nops between rising edge and falling edge - low
 225:drivers/avr/ws2812.c **** #define w1 (w_zerocycles-w_fixedlow)
 226:drivers/avr/ws2812.c **** // w2   nops between fe low and fe high
 227:drivers/avr/ws2812.c **** #define w2 (w_onecycles-w_fixedhigh-w1)
 228:drivers/avr/ws2812.c **** // w3   nops to complete loop
 229:drivers/avr/ws2812.c **** #define w3 (w_totalcycles-w_fixedtotal-w1-w2)
 230:drivers/avr/ws2812.c **** 
 231:drivers/avr/ws2812.c **** #if w1>0
 232:drivers/avr/ws2812.c ****   #define w1_nops w1
 233:drivers/avr/ws2812.c **** #else
 234:drivers/avr/ws2812.c ****   #define w1_nops  0
 235:drivers/avr/ws2812.c **** #endif
 236:drivers/avr/ws2812.c **** 
 237:drivers/avr/ws2812.c **** // The only critical timing parameter is the minimum pulse length of the "0"
 238:drivers/avr/ws2812.c **** // Warn or throw error if this timing can not be met with current F_CPU settings.
 239:drivers/avr/ws2812.c **** #define w_lowtime ((w1_nops+w_fixedlow)*1000000)/(F_CPU/1000)
 240:drivers/avr/ws2812.c **** #if w_lowtime>550
 241:drivers/avr/ws2812.c ****    #error "Light_ws2812: Sorry, the clock speed is too low. Did you set F_CPU correctly?"
 242:drivers/avr/ws2812.c **** #elif w_lowtime>450
 243:drivers/avr/ws2812.c ****    #warning "Light_ws2812: The timing is critical and may only work on WS2812B, not on WS2812(S)."
 244:drivers/avr/ws2812.c ****    #warning "Please consider a higher clockspeed, if possible"
 245:drivers/avr/ws2812.c **** #endif
 246:drivers/avr/ws2812.c **** 
 247:drivers/avr/ws2812.c **** #if w2>0
 248:drivers/avr/ws2812.c **** #define w2_nops w2
 249:drivers/avr/ws2812.c **** #else
 250:drivers/avr/ws2812.c **** #define w2_nops  0
 251:drivers/avr/ws2812.c **** #endif
 252:drivers/avr/ws2812.c **** 
 253:drivers/avr/ws2812.c **** #if w3>0
 254:drivers/avr/ws2812.c **** #define w3_nops w3
 255:drivers/avr/ws2812.c **** #else
 256:drivers/avr/ws2812.c **** #define w3_nops  0
 257:drivers/avr/ws2812.c **** #endif
 258:drivers/avr/ws2812.c **** 
 259:drivers/avr/ws2812.c **** #define w_nop1  "nop      \n\t"
 260:drivers/avr/ws2812.c **** #define w_nop2  "rjmp .+0 \n\t"
 261:drivers/avr/ws2812.c **** #define w_nop4  w_nop2 w_nop2
 262:drivers/avr/ws2812.c **** #define w_nop8  w_nop4 w_nop4
 263:drivers/avr/ws2812.c **** #define w_nop16 w_nop8 w_nop8
 264:drivers/avr/ws2812.c **** 
 265:drivers/avr/ws2812.c **** void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
 266:drivers/avr/ws2812.c **** {
  16               		.loc 1 266 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 267:drivers/avr/ws2812.c ****   uint8_t curbyte,ctr,masklo;
 268:drivers/avr/ws2812.c ****   uint8_t sreg_prev;
 269:drivers/avr/ws2812.c **** 
 270:drivers/avr/ws2812.c ****   // masklo  =~maskhi&ws2812_PORTREG;
 271:drivers/avr/ws2812.c ****   // maskhi |=        ws2812_PORTREG;
 272:drivers/avr/ws2812.c ****   masklo  =~maskhi&_SFR_IO8((RGB_DI_PIN >> 4) + 2);
  23               		.loc 1 272 0
  24 0000 2EB1      		in r18,0xe
  25 0002 342F      		mov r19,r20
  26 0004 3095      		com r19
  27 0006 2323      		and r18,r19
  28               	.LVL1:
 273:drivers/avr/ws2812.c ****   maskhi |=        _SFR_IO8((RGB_DI_PIN >> 4) + 2);
  29               		.loc 1 273 0
  30 0008 3EB1      		in r19,0xe
  31 000a 432B      		or r20,r19
  32               	.LVL2:
 274:drivers/avr/ws2812.c ****   sreg_prev=SREG;
  33               		.loc 1 274 0
  34 000c 3FB7      		in r19,__SREG__
  35               	.LVL3:
 275:drivers/avr/ws2812.c ****   cli();
  36               		.loc 1 275 0
  37               	/* #APP */
  38               	 ;  275 "drivers/avr/ws2812.c" 1
  39 000e F894      		cli
  40               	 ;  0 "" 2
  41               	/* #NOAPP */
  42 0010 FC01      		movw r30,r24
  43 0012 680F      		add r22,r24
  44 0014 791F      		adc r23,r25
  45               	.LVL4:
  46               	.L2:
 276:drivers/avr/ws2812.c **** 
 277:drivers/avr/ws2812.c ****   while (datlen--) {
  47               		.loc 1 277 0
  48 0016 E617      		cp r30,r22
  49 0018 F707      		cpc r31,r23
  50 001a 01F0      		breq .L5
  51               	.LVL5:
 278:drivers/avr/ws2812.c ****     curbyte=(*data++);
  52               		.loc 1 278 0
  53 001c 8191      		ld r24,Z+
  54               	.LVL6:
 279:drivers/avr/ws2812.c **** 
 280:drivers/avr/ws2812.c ****     asm volatile(
  55               		.loc 1 280 0
  56               	/* #APP */
  57               	 ;  280 "drivers/avr/ws2812.c" 1
  58 001e 98E0      		       ldi   r25,8  
  59               		loop39:            
  60 0020 4EB9      		       out   14,r20 
  61 0022 0000      		nop      
  62 0024 00C0      		rjmp .+0 
  63 0026 87FF      		       sbrs  r24,7  
  64 0028 2EB9      		       out   14,r18 
  65 002a 880F      		       lsl   r24    
  66 002c 0000      		nop      
  67 002e 00C0      		rjmp .+0 
  68 0030 00C0      		rjmp .+0 
  69 0032 00C0      		rjmp .+0 
  70 0034 2EB9      		       out   14,r18 
  71 0036 00C0      		rjmp .+0 
  72 0038 9A95      		       dec   r25    
  73 003a 01F4      		       brne  loop39
  74               		
  75               	 ;  0 "" 2
  76               	.LVL7:
  77               	/* #NOAPP */
  78 003c 00C0      		rjmp .L2
  79               	.LVL8:
  80               	.L5:
 281:drivers/avr/ws2812.c ****     "       ldi   %0,8  \n\t"
 282:drivers/avr/ws2812.c ****     "loop%=:            \n\t"
 283:drivers/avr/ws2812.c ****     "       out   %2,%3 \n\t"    //  '1' [01] '0' [01] - re
 284:drivers/avr/ws2812.c **** #if (w1_nops&1)
 285:drivers/avr/ws2812.c **** w_nop1
 286:drivers/avr/ws2812.c **** #endif
 287:drivers/avr/ws2812.c **** #if (w1_nops&2)
 288:drivers/avr/ws2812.c **** w_nop2
 289:drivers/avr/ws2812.c **** #endif
 290:drivers/avr/ws2812.c **** #if (w1_nops&4)
 291:drivers/avr/ws2812.c **** w_nop4
 292:drivers/avr/ws2812.c **** #endif
 293:drivers/avr/ws2812.c **** #if (w1_nops&8)
 294:drivers/avr/ws2812.c **** w_nop8
 295:drivers/avr/ws2812.c **** #endif
 296:drivers/avr/ws2812.c **** #if (w1_nops&16)
 297:drivers/avr/ws2812.c **** w_nop16
 298:drivers/avr/ws2812.c **** #endif
 299:drivers/avr/ws2812.c ****     "       sbrs  %1,7  \n\t"    //  '1' [03] '0' [02]
 300:drivers/avr/ws2812.c ****     "       out   %2,%4 \n\t"    //  '1' [--] '0' [03] - fe-low
 301:drivers/avr/ws2812.c ****     "       lsl   %1    \n\t"    //  '1' [04] '0' [04]
 302:drivers/avr/ws2812.c **** #if (w2_nops&1)
 303:drivers/avr/ws2812.c ****   w_nop1
 304:drivers/avr/ws2812.c **** #endif
 305:drivers/avr/ws2812.c **** #if (w2_nops&2)
 306:drivers/avr/ws2812.c ****   w_nop2
 307:drivers/avr/ws2812.c **** #endif
 308:drivers/avr/ws2812.c **** #if (w2_nops&4)
 309:drivers/avr/ws2812.c ****   w_nop4
 310:drivers/avr/ws2812.c **** #endif
 311:drivers/avr/ws2812.c **** #if (w2_nops&8)
 312:drivers/avr/ws2812.c ****   w_nop8
 313:drivers/avr/ws2812.c **** #endif
 314:drivers/avr/ws2812.c **** #if (w2_nops&16)
 315:drivers/avr/ws2812.c ****   w_nop16
 316:drivers/avr/ws2812.c **** #endif
 317:drivers/avr/ws2812.c ****     "       out   %2,%4 \n\t"    //  '1' [+1] '0' [+1] - fe-high
 318:drivers/avr/ws2812.c **** #if (w3_nops&1)
 319:drivers/avr/ws2812.c **** w_nop1
 320:drivers/avr/ws2812.c **** #endif
 321:drivers/avr/ws2812.c **** #if (w3_nops&2)
 322:drivers/avr/ws2812.c **** w_nop2
 323:drivers/avr/ws2812.c **** #endif
 324:drivers/avr/ws2812.c **** #if (w3_nops&4)
 325:drivers/avr/ws2812.c **** w_nop4
 326:drivers/avr/ws2812.c **** #endif
 327:drivers/avr/ws2812.c **** #if (w3_nops&8)
 328:drivers/avr/ws2812.c **** w_nop8
 329:drivers/avr/ws2812.c **** #endif
 330:drivers/avr/ws2812.c **** #if (w3_nops&16)
 331:drivers/avr/ws2812.c **** w_nop16
 332:drivers/avr/ws2812.c **** #endif
 333:drivers/avr/ws2812.c **** 
 334:drivers/avr/ws2812.c ****     "       dec   %0    \n\t"    //  '1' [+2] '0' [+2]
 335:drivers/avr/ws2812.c ****     "       brne  loop%=\n\t"    //  '1' [+3] '0' [+4]
 336:drivers/avr/ws2812.c ****     :	"=&d" (ctr)
 337:drivers/avr/ws2812.c ****     :	"r" (curbyte), "I" (_SFR_IO_ADDR(_SFR_IO8((RGB_DI_PIN >> 4) + 2))), "r" (maskhi), "r" (masklo
 338:drivers/avr/ws2812.c ****     );
 339:drivers/avr/ws2812.c ****   }
 340:drivers/avr/ws2812.c **** 
 341:drivers/avr/ws2812.c ****   SREG=sreg_prev;
  81               		.loc 1 341 0
  82 003e 3FBF      		out __SREG__,r19
  83 0040 0895      		ret
  84               		.cfi_endproc
  85               	.LFE11:
  87               		.section	.text.ws2812_setleds_pin,"ax",@progbits
  88               	.global	ws2812_setleds_pin
  90               	ws2812_setleds_pin:
  91               	.LFB8:
 152:drivers/avr/ws2812.c ****   // ws2812_DDRREG |= pinmask; // Enable DDR
  92               		.loc 1 152 0
  93               		.cfi_startproc
  94               	.LVL9:
  95               	/* prologue: function */
  96               	/* frame size = 0 */
  97               	/* stack size = 0 */
  98               	.L__stack_usage = 0
 155:drivers/avr/ws2812.c **** 
  99               		.loc 1 155 0
 100 0000 2DB1      		in r18,0xd
 101 0002 242B      		or r18,r20
 102 0004 2DB9      		out 0xd,r18
 157:drivers/avr/ws2812.c ****   _delay_us(50);
 103               		.loc 1 157 0
 104 0006 9B01      		movw r18,r22
 105 0008 220F      		lsl r18
 106 000a 331F      		rol r19
 107 000c 620F      		add r22,r18
 108 000e 731F      		adc r23,r19
 109               	.LVL10:
 110 0010 0E94 0000 		call ws2812_sendarray_mask
 111               	.LVL11:
 112               	.LBB6:
 113               	.LBB7:
 114               		.file 2 "c:\\msys64\\home\\cris almanza\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\util\\delay.
   1:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id$ */
  34:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 189:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #else
 190:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint16_t __ticks;
 191:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	if (__tmp < 1.0)
 193:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = 1;
 194:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else if (__tmp > 65535)
 195:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	{
 196:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		while(__ticks)
 199:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		{
 200:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			// wait 1/10 ms
 201:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			__ticks --;
 203:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		}
 204:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		return;
 205:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	}
 206:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else
 207:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t)__tmp;
 208:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	_delay_loop_2(__ticks);
 209:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 210:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** }
 211:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 212:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 213:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 214:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 215:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 217:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 218:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 220:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 222:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    will not be informed about this case.
 225:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 226:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflow results in
 229:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0us.
 230:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 231:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __us
 234:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 235:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 236:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 240:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 241:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 242:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 243:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 244:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 246:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 248:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 249:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 252:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 253:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 254:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 255:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_us(double __us)
 256:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 257:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 258:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 261:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 262:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 265:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 268:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 271:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 272:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 273:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 275:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 276:c:\msys64\home\cris almanza\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 115               		.loc 2 276 0
 116 0014 87EC      		ldi r24,lo8(199)
 117 0016 90E0      		ldi r25,hi8(199)
 118 0018 0197      	1:	sbiw r24,1
 119 001a 01F4      		brne 1b
 120 001c 00C0      		rjmp .
 121 001e 0000      		nop
 122 0020 0895      		ret
 123               	.LBE7:
 124               	.LBE6:
 125               		.cfi_endproc
 126               	.LFE8:
 128               		.section	.text.ws2812_setleds,"ax",@progbits
 129               	.global	ws2812_setleds
 131               	ws2812_setleds:
 132               	.LFB7:
 146:drivers/avr/ws2812.c ****    // ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
 133               		.loc 1 146 0
 134               		.cfi_startproc
 135               	.LVL12:
 136               	/* prologue: function */
 137               	/* frame size = 0 */
 138               	/* stack size = 0 */
 139               	.L__stack_usage = 0
 148:drivers/avr/ws2812.c **** }
 140               		.loc 1 148 0
 141 0000 44E0      		ldi r20,lo8(4)
 142 0002 0C94 0000 		jmp ws2812_setleds_pin
 143               	.LVL13:
 144               		.cfi_endproc
 145               	.LFE7:
 147               		.section	.text.ws2812_setleds_rgbw,"ax",@progbits
 148               	.global	ws2812_setleds_rgbw
 150               	ws2812_setleds_rgbw:
 151               	.LFB9:
 163:drivers/avr/ws2812.c **** 
 152               		.loc 1 163 0
 153               		.cfi_startproc
 154               	.LVL14:
 155               	/* prologue: function */
 156               	/* frame size = 0 */
 157               	/* stack size = 0 */
 158               	.L__stack_usage = 0
 189:drivers/avr/ws2812.c **** 
 159               		.loc 1 189 0
 160 0000 6A9A      		sbi 0xd,2
 191:drivers/avr/ws2812.c **** 
 161               		.loc 1 191 0
 162 0002 660F      		lsl r22
 163 0004 771F      		rol r23
 164 0006 660F      		lsl r22
 165 0008 771F      		rol r23
 166               	.LVL15:
 167 000a 44E0      		ldi r20,lo8(4)
 168 000c 0E94 0000 		call ws2812_sendarray_mask
 169               	.LVL16:
 170               	.LBB8:
 171               	.LBB9:
 172               		.loc 2 276 0
 173 0010 8FE3      		ldi r24,lo8(319)
 174 0012 91E0      		ldi r25,hi8(319)
 175 0014 0197      	1:	sbiw r24,1
 176 0016 01F4      		brne 1b
 177 0018 00C0      		rjmp .
 178 001a 0000      		nop
 179 001c 0895      		ret
 180               	.LBE9:
 181               	.LBE8:
 182               		.cfi_endproc
 183               	.LFE9:
 185               		.section	.text.ws2812_sendarray,"ax",@progbits
 186               	.global	ws2812_sendarray
 188               	ws2812_sendarray:
 189               	.LFB10:
 200:drivers/avr/ws2812.c ****   ws2812_sendarray_mask(data,datlen,_BV(RGB_DI_PIN & 0xF));
 190               		.loc 1 200 0
 191               		.cfi_startproc
 192               	.LVL17:
 193               	/* prologue: function */
 194               	/* frame size = 0 */
 195               	/* stack size = 0 */
 196               	.L__stack_usage = 0
 201:drivers/avr/ws2812.c **** }
 197               		.loc 1 201 0
 198 0000 44E0      		ldi r20,lo8(4)
 199 0002 0C94 0000 		jmp ws2812_sendarray_mask
 200               	.LVL18:
 201               		.cfi_endproc
 202               	.LFE10:
 204               		.text
 205               	.Letext0:
 206               		.file 3 "c:\\msys64\\home\\cris almanza\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdint.h"
 207               		.file 4 "quantum/rgblight_types.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ws2812.c
C:\msys64\tmp\cch4RnUD.s:2      *ABS*:0000003e __SP_H__
C:\msys64\tmp\cch4RnUD.s:3      *ABS*:0000003d __SP_L__
C:\msys64\tmp\cch4RnUD.s:4      *ABS*:0000003f __SREG__
C:\msys64\tmp\cch4RnUD.s:5      *ABS*:00000000 __tmp_reg__
C:\msys64\tmp\cch4RnUD.s:6      *ABS*:00000001 __zero_reg__
C:\msys64\tmp\cch4RnUD.s:13     .text.ws2812_sendarray_mask:00000000 ws2812_sendarray_mask
C:\msys64\tmp\cch4RnUD.s:59     .text.ws2812_sendarray_mask:00000020 loop39
C:\msys64\tmp\cch4RnUD.s:90     .text.ws2812_setleds_pin:00000000 ws2812_setleds_pin
C:\msys64\tmp\cch4RnUD.s:131    .text.ws2812_setleds:00000000 ws2812_setleds
C:\msys64\tmp\cch4RnUD.s:150    .text.ws2812_setleds_rgbw:00000000 ws2812_setleds_rgbw
C:\msys64\tmp\cch4RnUD.s:188    .text.ws2812_sendarray:00000000 ws2812_sendarray

NO UNDEFINED SYMBOLS
